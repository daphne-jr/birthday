"use strict";(self.webpackChunkbirthday=self.webpackChunkbirthday||[]).push([[633],{8717:(e,t,n)=>{n.d(t,{Z:()=>k});var r=n(7462),u=n(7294),o=n(344),i=(n(334),n(1413)),c=n(2550),f=n(4203),s=n(1033),a=new Map,l=new s.Z((function(e){e.forEach((function(e){var t,n=e.target;null===(t=a.get(n))||void 0===t||t.forEach((function(e){return e(n)}))}))})),h=n(5671),d=n(3144),v=n(9340),g=n(8557),p=function(e){(0,v.Z)(n,e);var t=(0,g.Z)(n);function n(){return(0,h.Z)(this,n),t.apply(this,arguments)}return(0,d.Z)(n,[{key:"render",value:function(){return this.props.children}}]),n}(u.Component),Z=u.createContext(null);function m(e){var t=e.children,n=e.disabled,r=u.useRef(null),o=u.useRef(null),s=u.useContext(Z),h="function"==typeof t,d=h?t(r):t,v=u.useRef({width:-1,height:-1,offsetWidth:-1,offsetHeight:-1}),g=!h&&u.isValidElement(d)&&(0,c.Yr)(d),m=g?d.ref:null,b=u.useMemo((function(){return(0,c.sQ)(m,r)}),[m,r]),k=u.useRef(e);k.current=e;var C=u.useCallback((function(e){var t=k.current,n=t.onResize,r=t.data,u=e.getBoundingClientRect(),o=u.width,c=u.height,f=e.offsetWidth,a=e.offsetHeight,l=Math.floor(o),h=Math.floor(c);if(v.current.width!==l||v.current.height!==h||v.current.offsetWidth!==f||v.current.offsetHeight!==a){var d={width:l,height:h,offsetWidth:f,offsetHeight:a};v.current=d;var g=f===Math.round(o)?o:f,p=a===Math.round(c)?c:a,Z=(0,i.Z)((0,i.Z)({},d),{},{offsetWidth:g,offsetHeight:p});null==s||s(Z,e,r),n&&Promise.resolve().then((function(){n(Z,e)}))}}),[]);return u.useEffect((function(){var e,t,u=(0,f.Z)(r.current)||(0,f.Z)(o.current);return u&&!n&&(e=u,t=C,a.has(e)||(a.set(e,new Set),l.observe(e)),a.get(e).add(t)),function(){return function(e,t){a.has(e)&&(a.get(e).delete(t),a.get(e).size||(l.unobserve(e),a.delete(e)))}(u,C)}}),[r.current,n]),u.createElement(p,{ref:o},g?u.cloneElement(d,{ref:b}):d)}function b(e){var t=e.children;return("function"==typeof t?[t]:(0,o.Z)(t)).map((function(t,n){var o=(null==t?void 0:t.key)||"".concat("rc-observer-key","-").concat(n);return u.createElement(m,(0,r.Z)({},e,{key:o}),t)}))}b.Collection=function(e){var t=e.children,n=e.onBatchResize,r=u.useRef(0),o=u.useRef([]),i=u.useContext(Z),c=u.useCallback((function(e,t,u){r.current+=1;var c=r.current;o.current.push({size:e,element:t,data:u}),Promise.resolve().then((function(){c===r.current&&(null==n||n(o.current),o.current=[])})),null==i||i(e,t,u)}),[n,i]);return u.createElement(Z.Provider,{value:c},t)};const k=b}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,