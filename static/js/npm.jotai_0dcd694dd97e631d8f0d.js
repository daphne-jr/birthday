"use strict";(self.webpackChunkbirthday=self.webpackChunkbirthday||[]).push([[642],{2633:(e,t,n)=>{n.d(t,{cn:()=>E,KO:()=>P});var r=n(7294);const o=Symbol(),i=e=>!!e[o],s=e=>{var t,n;null==(n=(t=e[o]).c)||n.call(t)},c=(e,t)=>{const n=e[o].o,r=t[o].o;return n===r||e===r||i(n)&&c(n,t)},a=e=>{const t={o:e,c:null},n=new Promise((n=>{t.c=()=>{t.c=null,n()},e.then(t.c,t.c)}));return n[o]=t,n};var l=Object.defineProperty,u=Object.defineProperties,d=Object.getOwnPropertyDescriptors,f=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable,v=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;const h=e=>"init"in e,b=e=>{const t=new WeakMap,n=new WeakMap,r=new Map;let l,b;if(l=new Set,b=new Set,e)for(const[n,r]of e){const e={v:r,r:0,d:new Map};Object.freeze(e),h(n)||console.warn("Found initial value for derived atom which can cause unexpected behavior",n),t.set(n,e)}const g=new WeakMap,m=new WeakMap,y=e=>{let t=m.get(e);return t||(t=new Map,m.set(e,t)),t},E=(e,n)=>{if(e){const t=y(e);let r=t.get(n);return r||(r=E(e.p,n),r&&("p"in r&&r.p.then((()=>t.delete(n))),t.set(n,r))),r}return t.get(n)},O=(e,n,o)=>{if(Object.freeze(o),e)y(e).set(n,o);else{const e=t.get(n);t.set(n,o),r.has(n)||r.set(n,e)}},j=(e,t=new Map,n)=>{if(!n)return t;const r=new Map;let o=!1;return n.forEach((n=>{var i;const s=(null==(i=E(e,n))?void 0:i.r)||0;r.set(n,s),t.get(n)!==s&&(o=!0)})),t.size!==r.size||o?r:t},P=(e,t,n,r,o)=>{const i=E(e,t);if(i){if(o&&(!("p"in i)||!c(i.p,o)))return i;"p"in i&&s(i.p)}const a={v:n,r:(null==i?void 0:i.r)||0,d:j(e,null==i?void 0:i.d,r)};return i&&"v"in i&&Object.is(i.v,n)?a.d===i.d||a.d.size===i.d.size&&Array.from(a.d.keys()).every((e=>i.d.has(e)))||Promise.resolve().then((()=>{I(e)})):(++a.r,a.d.has(t)&&(a.d=new Map(a.d).set(t,a.r))),O(e,t,a),a},M=(e,t,n,r,o)=>{const i=E(e,t);if(i){if(o&&(!("p"in i)||!c(i.p,o)))return i;"p"in i&&s(i.p)}const a={e:n,r:(null==i?void 0:i.r)||0,d:j(e,null==i?void 0:i.d,r)};return O(e,t,a),a},k=(e,t,n,r)=>{const o=E(e,t);if(o&&"p"in o){if(c(o.p,n))return o;s(o.p)}((e,t,n)=>{let r=g.get(t);r||(r=new Map,g.set(t,r)),n.then((()=>{r.get(e)===n&&(r.delete(e),r.size||g.delete(t))})),r.set(e,n)})(e,t,n);const i={p:n,r:(null==o?void 0:o.r)||0,d:j(e,null==o?void 0:o.d,r)};return O(e,t,i),i},S=(e,t,n,r)=>{if(n instanceof Promise){const o=a(n.then((n=>{P(e,t,n,r,o),I(e)})).catch((n=>{if(n instanceof Promise)return i(n)?n.then((()=>{z(e,t,!0)})):n;M(e,t,n,r,o),I(e)})));return k(e,t,o,r)}return P(e,t,n,r)},z=(e,t,r)=>{if(!r){const r=E(e,t);if(r){if(r.r!==r.i&&"p"in r&&r.p[o].c)return r;if(r.d.forEach(((r,o)=>{if(o!==t)if(n.has(o)){const t=E(e,o);t&&t.r===t.i&&z(e,o)}else z(e,o)})),Array.from(r.d).every((([t,n])=>{const r=E(e,t);return r&&"v"in r&&r.r===n})))return r}}const i=new Set;try{const n=t.read((n=>{i.add(n);const r=n===t?E(e,n):z(e,n);if(r){if("e"in r)throw r.e;if("p"in r)throw r.p;return r.v}if(h(n))return n.init;throw new Error("no atom init")}));return S(e,t,n,i)}catch(n){if(n instanceof Promise){const r=a(n);return k(e,t,r,i)}return M(e,t,n,i)}},C=(e,t)=>!t.l.size&&(!t.t.size||1===t.t.size&&t.t.has(e)),x=(e,t)=>{const r=n.get(t);null==r||r.t.forEach((n=>{n!==t&&(((e,t)=>{const n=E(e,t);if(n){const i=(r=((e,t)=>{for(var n in t||(t={}))p.call(t,n)&&v(e,n,t[n]);if(f)for(var n of f(t))w.call(t,n)&&v(e,n,t[n]);return e})({},n),o={i:n.r},u(r,d(o)));O(e,t,i)}else console.warn("[Bug] could not invalidate non existing atom",t);var r,o})(e,n),x(e,n))}))},A=(e,t,n)=>{let r=!0;const o=(t,n)=>{const r=z(e,t);if("e"in r)throw r.e;if("p"in r){if(null==n?void 0:n.unstable_promise)return r.p.then((()=>o(t,n)));throw console.info("Reading pending atom state in write operation. We throw a promise for now.",t),r.p}if("v"in r)return r.v;throw console.warn("[Bug] no value found while reading atom in write operation. This is probably a bug.",t),new Error("no value found")},i=t.write(o,((n,o)=>{let i;if(n===t){if(!h(n))throw new Error("atom not writable");const t=(e=>{const t=new Set,n=g.get(e);return n&&(g.delete(e),n.forEach(((e,n)=>{s(e),t.add(n)}))),t})(n);t.forEach((t=>{t!==e&&S(t,n,o)})),S(e,n,o),x(e,n)}else i=A(e,n,o);return r||I(e),i}),n);return r=!1,e=void 0,i},W=(e,t,n)=>{const r=A(n,e,t);return I(n),r},R=(e,t)=>{const r={t:new Set(t&&[t]),l:new Set};if(n.set(e,r),b.add(e),z(void 0,e).d.forEach(((t,r)=>{const o=n.get(r);o?o.t.add(e):r!==e&&R(r,e)})),(e=>!!e.write)(e)&&e.onMount){const t=t=>W(e,t),n=e.onMount(t);n&&(r.u=n)}return r},B=e=>{var t;const r=null==(t=n.get(e))?void 0:t.u;r&&r(),n.delete(e),b.delete(e);const o=E(void 0,e);o?o.d.forEach(((t,r)=>{if(r!==e){const t=n.get(r);t&&(t.t.delete(e),C(r,t)&&B(r))}})):console.warn("[Bug] could not find atom state to unmount",e)},D=(e,t,r)=>{const o=new Set(t.d.keys());null==r||r.forEach(((t,r)=>{if(o.has(r))return void o.delete(r);const i=n.get(r);i&&(i.t.delete(e),C(r,i)&&B(r))})),o.forEach((t=>{const r=n.get(t);r?r.t.add(e):n.has(e)&&R(t,e)}))},I=e=>{if(e)y(e).forEach(((r,o)=>{if(r!==t.get(o)){const t=n.get(o);null==t||t.l.forEach((t=>t(e)))}}));else{for(;r.size;){const e=Array.from(r);r.clear(),e.forEach((([e,t])=>{const r=E(void 0,e);r&&r.d!==(null==t?void 0:t.d)&&D(e,r,null==t?void 0:t.d);const o=n.get(e);null==o||o.l.forEach((e=>e()))}))}l.forEach((e=>e()))}};return{r:(e,t)=>z(t,e),w:W,c:(e,n)=>{n&&(e=>{y(e).forEach(((e,n)=>{const r=t.get(n);(e.r>((null==r?void 0:r.r)||0)||"v"in e&&e.r===(null==r?void 0:r.r)&&e.d!==(null==r?void 0:r.d))&&(t.set(n,e),e.d!==(null==r?void 0:r.d)&&D(n,e,null==r?void 0:r.d))}))})(n),I(void 0)},s:(e,t)=>{const r=(e=>{let t=n.get(e);return t||(t=R(e)),t})(e).l;return r.add(t),()=>{r.delete(t),(e=>{const t=n.get(e);t&&C(e,t)&&B(e)})(e)}},h:(e,t)=>{for(const[n,r]of e)h(n)&&(S(t,n,r),x(t,n));I(t)},n:e=>(l.add(e),()=>{l.delete(e)}),l:()=>b.values(),a:e=>t.get(e),m:e=>n.get(e)}},g=new Map,m=e=>{return g.has(e)||g.set(e,(0,r.createContext)({s:n?n(t).SECRET_INTERNAL_store:b(t)})),g.get(e);var t,n};Object.defineProperty,Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols,Object.prototype.hasOwnProperty,Object.prototype.propertyIsEnumerable;let y=0;function E(e,t){const n="atom"+ ++y,r={toString:()=>n};return"function"==typeof e?r.read=e:(r.init=e,r.read=e=>e(r),r.write=(e,t,n)=>t(r,"function"==typeof n?n(e(r)):n)),t&&(r.write=t),r}function O(e,t){const n=m(t),{s:o}=(0,r.useContext)(n),i=(0,r.useCallback)((t=>{const n=o.r(e,t);if("e"in n)throw n.e;if("p"in n)throw n.p;if("v"in n)return n.v;throw new Error("no atom value")}),[o,e]),[[s,c,a],l]=(0,r.useReducer)((0,r.useCallback)(((t,n)=>{const r=i(n);return Object.is(t[1],r)&&t[2]===e?t:[n,r,e]}),[i,e]),void 0,(()=>{const t=void 0;return[t,i(t),e]}));return a!==e&&l(void 0),(0,r.useEffect)((()=>{const t=o.s(e,l);return l(void 0),t}),[o,e]),(0,r.useEffect)((()=>{o.c(e,s)})),(0,r.useDebugValue)(c),c}function j(e,t){const n=m(t),{s:o,w:i}=(0,r.useContext)(n);return(0,r.useCallback)((t=>{const n=n=>o.w(e,t,n);return i?i(n):n()}),[o,i,e])}function P(e,t){return"scope"in e&&(console.warn("atom.scope is deprecated. Please do useAtom(atom, scope) instead."),t=e.scope),[O(e,t),j(e,t)]}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,