"use strict";(self.webpackChunkbirthday=self.webpackChunkbirthday||[]).push([[586],{9214:(e,t,n)=>{n.d(t,{Z:()=>z});var r=n(7462),i=n(1413),a=n(9439),l=n(4925),o=n(7294),s=n(4184),u=n.n(s),c=n(8717),f=n(8410),m=["prefixCls","invalidate","item","renderItem","responsive","registerSize","itemKey","className","style","children","display","order","component"],d=void 0;function v(e,t){var n=e.prefixCls,a=e.invalidate,s=e.item,f=e.renderItem,v=e.responsive,p=e.registerSize,Z=e.itemKey,y=e.className,h=e.style,E=e.children,N=e.display,g=e.order,R=e.component,b=void 0===R?"div":R,C=(0,l.Z)(e,m),w=v&&!N;function I(e){p(Z,e)}o.useEffect((function(){return function(){I(null)}}),[]);var S,x=f&&s!==d?f(s):E;a||(S={opacity:w?0:1,height:w?0:d,overflowY:w?"hidden":d,order:v?g:d,pointerEvents:w?"none":d,position:w?"absolute":d});var k={};w&&(k["aria-hidden"]=!0);var M=o.createElement(b,(0,r.Z)({className:u()(!a&&n,y),style:(0,i.Z)((0,i.Z)({},S),h)},k,C,{ref:t}),x);return v&&(M=o.createElement(c.Z,{onResize:function(e){I(e.offsetWidth)}},M)),M}var p=o.forwardRef(v);p.displayName="Item";const Z=p;var y=n(5164),h=["component"],E=["className"],N=["className"],g=function(e,t){var n=o.useContext(w);if(!n){var i=e.component,a=void 0===i?"div":i,s=(0,l.Z)(e,h);return o.createElement(a,(0,r.Z)({},s,{ref:t}))}var c=n.className,f=(0,l.Z)(n,E),m=e.className,d=(0,l.Z)(e,N);return o.createElement(w.Provider,{value:null},o.createElement(Z,(0,r.Z)({ref:t,className:u()(c,m)},f,d)))},R=o.forwardRef(g);R.displayName="RawItem";const b=R;var C=["prefixCls","data","renderItem","renderRawItem","itemKey","itemWidth","ssr","style","className","maxCount","renderRest","renderRawRest","suffix","component","itemComponent","onVisibleChange"],w=o.createContext(null),I="responsive",S="invalidate";function x(e){return"+ ".concat(e.length," ...")}function k(e,t){var n=e.prefixCls,s=void 0===n?"rc-overflow":n,m=e.data,d=void 0===m?[]:m,v=e.renderItem,p=e.renderRawItem,h=e.itemKey,E=e.itemWidth,N=void 0===E?10:E,g=e.ssr,R=e.style,b=e.className,k=e.maxCount,M=e.renderRest,z=e.renderRawRest,A=e.suffix,K=e.component,P=void 0===K?"div":K,V=e.itemComponent,W=e.onVisibleChange,_=(0,l.Z)(e,C),T=function(){var e=(0,o.useState)({}),t=(0,a.Z)(e,2)[1],n=(0,o.useRef)([]),r=(0,o.useRef)(!1),i=0,l=0;return(0,o.useEffect)((function(){return function(){r.current=!0}}),[]),function(e){var a=i;return i+=1,n.current.length<a+1&&(n.current[a]=e),[n.current[a],function(e){n.current[a]="function"==typeof e?e(n.current[a]):e,y.Z.cancel(l),l=(0,y.Z)((function(){r.current||t({})}))}]}}(),F="full"===g,G=T(null),O=(0,a.Z)(G,2),X=O[0],D=O[1],L=X||0,Y=T(new Map),j=(0,a.Z)(Y,2),q=j[0],B=j[1],H=T(0),J=(0,a.Z)(H,2),Q=J[0],U=J[1],$=T(0),ee=(0,a.Z)($,2),te=ee[0],ne=ee[1],re=T(0),ie=(0,a.Z)(re,2),ae=ie[0],le=ie[1],oe=(0,o.useState)(null),se=(0,a.Z)(oe,2),ue=se[0],ce=se[1],fe=(0,o.useState)(null),me=(0,a.Z)(fe,2),de=me[0],ve=me[1],pe=o.useMemo((function(){return null===de&&F?Number.MAX_SAFE_INTEGER:de||0}),[de,X]),Ze=(0,o.useState)(!1),ye=(0,a.Z)(Ze,2),he=ye[0],Ee=ye[1],Ne="".concat(s,"-item"),ge=Math.max(Q,te),Re=d.length&&k===I,be=k===S,Ce=Re||"number"==typeof k&&d.length>k,we=(0,o.useMemo)((function(){var e=d;return Re?e=null===X&&F?d:d.slice(0,Math.min(d.length,L/N)):"number"==typeof k&&(e=d.slice(0,k)),e}),[d,N,X,k,Re]),Ie=(0,o.useMemo)((function(){return Re?d.slice(pe+1):d.slice(we.length)}),[d,we,Re,pe]),Se=(0,o.useCallback)((function(e,t){var n;return"function"==typeof h?h(e):null!==(n=h&&(null==e?void 0:e[h]))&&void 0!==n?n:t}),[h]),xe=(0,o.useCallback)(v||function(e){return e},[v]);function ke(e,t){ve(e),t||(Ee(e<d.length-1),null==W||W(e))}function Me(e,t){B((function(n){var r=new Map(n);return null===t?r.delete(e):r.set(e,t),r}))}function ze(e){return q.get(Se(we[e],e))}(0,f.Z)((function(){if(L&&ge&&we){var e=ae,t=we.length,n=t-1;if(!t)return ke(0),void ce(null);for(var r=0;r<t;r+=1){var i=ze(r);if(void 0===i){ke(r-1,!0);break}if(e+=i,0===n&&e<=L||r===n-1&&e+ze(n)<=L){ke(n),ce(null);break}if(e+ge>L){ke(r-1),ce(e-i-ae+te);break}}A&&ze(0)+ae>L&&ce(null)}}),[L,q,te,ae,Se,we]);var Ae=he&&!!Ie.length,Ke={};null!==ue&&Re&&(Ke={position:"absolute",left:ue,top:0});var Pe,Ve={prefixCls:Ne,responsive:Re,component:V,invalidate:be},We=p?function(e,t){var n=Se(e,t);return o.createElement(w.Provider,{key:n,value:(0,i.Z)((0,i.Z)({},Ve),{},{order:t,item:e,itemKey:n,registerSize:Me,display:t<=pe})},p(e,t))}:function(e,t){var n=Se(e,t);return o.createElement(Z,(0,r.Z)({},Ve,{order:t,key:n,item:e,renderItem:xe,itemKey:n,registerSize:Me,display:t<=pe}))},_e={order:Ae?pe:Number.MAX_SAFE_INTEGER,className:"".concat(Ne,"-rest"),registerSize:function(e,t){ne(t),U(te)},display:Ae};if(z)z&&(Pe=o.createElement(w.Provider,{value:(0,i.Z)((0,i.Z)({},Ve),_e)},z(Ie)));else{var Te=M||x;Pe=o.createElement(Z,(0,r.Z)({},Ve,_e),"function"==typeof Te?Te(Ie):Te)}var Fe=o.createElement(P,(0,r.Z)({className:u()(!be&&s,b),style:R,ref:t},_),we.map(We),Ce?Pe:null,A&&o.createElement(Z,(0,r.Z)({},Ve,{order:pe,className:"".concat(Ne,"-suffix"),registerSize:function(e,t){le(t)},display:!0,style:Ke}),A));return Re&&(Fe=o.createElement(c.Z,{onResize:function(e,t){D(t.clientWidth)}},Fe)),Fe}var M=o.forwardRef(k);M.displayName="Overflow",M.Item=b,M.RESPONSIVE=I,M.INVALIDATE=S;const z=M}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljL2pzL25wbS5yYy1vdmVyZmxvd185NTY5MDIyOGQwMDhlNDI3ZTdiYS5qcyIsIm1hcHBpbmdzIjoiaU5BR0lBLEVBQVksQ0FBQyxZQUFhLGFBQWMsT0FBUSxhQUFjLGFBQWMsZUFBZ0IsVUFBVyxZQUFhLFFBQVMsV0FBWSxVQUFXLFFBQVMsYUFLN0pDLE9BQVlDLEVBRWhCLFNBQVNDLEVBQWFDLEVBQU9DLEdBQzNCLElBQUlDLEVBQVlGLEVBQU1FLFVBQ2xCQyxFQUFhSCxFQUFNRyxXQUNuQkMsRUFBT0osRUFBTUksS0FDYkMsRUFBYUwsRUFBTUssV0FDbkJDLEVBQWFOLEVBQU1NLFdBQ25CQyxFQUFlUCxFQUFNTyxhQUNyQkMsRUFBVVIsRUFBTVEsUUFDaEJDLEVBQVlULEVBQU1TLFVBQ2xCQyxFQUFRVixFQUFNVSxNQUNkQyxFQUFXWCxFQUFNVyxTQUNqQkMsRUFBVVosRUFBTVksUUFDaEJDLEVBQVFiLEVBQU1hLE1BQ2RDLEVBQW1CZCxFQUFNZSxVQUN6QkMsT0FBaUMsSUFBckJGLEVBQThCLE1BQVFBLEVBQ2xERyxHQUFZLE9BQXlCakIsRUFBT0osR0FFNUNzQixFQUFlWixJQUFlTSxFQUVsQyxTQUFTTyxFQUFxQkMsR0FDNUJiLEVBQWFDLEVBQVNZLEdBR3hCLGFBQWdCLFdBQ2QsT0FBTyxXQUNMRCxFQUFxQixTQUV0QixJQUVILElBQ0lFLEVBREFDLEVBQVlqQixHQUFjRCxJQUFTUCxFQUFZUSxFQUFXRCxHQUFRTyxFQUdqRVIsSUFDSGtCLEVBQWdCLENBQ2RFLFFBQVNMLEVBQWUsRUFBSSxFQUM1Qk0sT0FBUU4sRUFBZSxFQUFJckIsRUFDM0I0QixVQUFXUCxFQUFlLFNBQVdyQixFQUNyQ2dCLE1BQU9QLEVBQWFPLEVBQVFoQixFQUM1QjZCLGNBQWVSLEVBQWUsT0FBU3JCLEVBQ3ZDOEIsU0FBVVQsRUFBZSxXQUFhckIsSUFJMUMsSUFBSStCLEVBQWdCLEdBRWhCVixJQUNGVSxFQUFjLGdCQUFpQixHQUdqQyxJQUFJQyxFQUF3QixnQkFBb0Ji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QUk4RyxHQUFtQmxHLEdBQWNiLEVBQ3JDMEcsR0FBd0IsZ0JBQW9CLEdBQU0sT0FBUyxHQUFJQyxHQUFpQkUsSUFBK0MsbUJBQXJCRSxHQUFrQ0EsR0FBaUI5RyxJQUFnQjhHLElBTy9LLElBQUlDLEdBQTRCLGdCQUFvQmhKLEdBQVcsT0FBUyxDQUN0RVAsVUFBVyxLQUFZTixJQUFjRCxFQUFXTyxHQUNoREMsTUFBT0EsRUFDUFQsSUFBS0EsR0FDSmdCLEdBQVk0RyxHQUFXb0MsSUFBSUwsSUFBeUJoQyxHQUFXOEIsR0FBVyxLQUFNM0YsR0FBdUIsZ0JBQW9CLEdBQU0sT0FBUyxHQUFJNEYsR0FBaUIsQ0FDaEs5SSxNQUFPbUcsR0FDUHZHLFVBQVcsR0FBR3lDLE9BQU9xRSxHQUFlLFdBQ3BDaEgsYUF4SEYsU0FBNEJ1SixFQUFHMUksR0FDN0JvRixHQUFlcEYsSUF3SGZSLFNBQVMsRUFDVEYsTUFBTzZJLEtBQ0x4RixJQVFKLE9BTkk0RCxLQUNGcUMsR0FBNEIsZ0JBQW9CLElBQWdCLENBQzlEbEksU0F0SkosU0FBMEJnSSxFQUFHSSxHQUMzQjVFLEVBQWtCNEUsRUFBUUMsZUFzSnZCSCxLQUdFQSxHQUdULElBQUlJLEVBQStCLGFBQWlCaEgsR0FDcERnSCxFQUFnQmxJLFlBQWMsV0FDOUJrSSxFQUFnQm5JLEtBQU8sRUFDdkJtSSxFQUFnQnRILFdBQWFBLEVBQzdCc0gsRUFBZ0JySCxXQUFhQSxFQUU3QixNRTVUQSxFRjRUQSIsInNvdXJjZXMiOlsid2VicGFjazovL2JpcnRoZGF5Ly4vbm9kZV9tb2R1bGVzL3JjLW92ZXJmbG93L2VzL0l0ZW0uanMiLCJ3ZWJwYWNrOi8vYmlydGhkYXkvLi9ub2RlX21vZHVsZXMvcmMtb3ZlcmZsb3cvZXMvUmF3SXRlbS5qcyIsIndlYnBhY2s6Ly9iaXJ0aGRheS8uL25vZGVfbW9kdWxlcy9yYy1vdmVyZmxvdy9lcy9PdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly9iaXJ0aGRheS8uL25vZGVfbW9kdWxlcy9yYy1vdmVyZmxvdy9lcy9ob29rcy91c2VCYXRjaEZyYW1lU3RhdGUuanMiLCJ3ZWJwYWNrOi8vYmlydGhkYXkvLi9ub2RlX21vZHVsZXMvcmMtb3ZlcmZsb3cvZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJwcmVmaXhDbHNcIiwgXCJpbnZhbGlkYXRlXCIsIFwiaXRlbVwiLCBcInJlbmRlckl0ZW1cIiwgXCJyZXNwb25zaXZlXCIsIFwicmVnaXN0ZXJTaXplXCIsIFwiaXRlbUtleVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwiY2hpbGRyZW5cIiwgXCJkaXNwbGF5XCIsIFwib3JkZXJcIiwgXCJjb21wb25lbnRcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZXNpemVPYnNlcnZlciBmcm9tICdyYy1yZXNpemUtb2JzZXJ2ZXInOyAvLyBVc2Ugc2hhcmVkIHZhcmlhYmxlIHRvIHNhdmUgYnVuZGxlIHNpemVcblxudmFyIFVOREVGSU5FRCA9IHVuZGVmaW5lZDtcblxuZnVuY3Rpb24gSW50ZXJuYWxJdGVtKHByb3BzLCByZWYpIHtcbiAgdmFyIHByZWZpeENscyA9IHByb3BzLnByZWZpeENscyxcbiAgICAgIGludmFsaWRhdGUgPSBwcm9wcy5pbnZhbGlkYXRlLFxuICAgICAgaXRlbSA9IHByb3BzLml0ZW0sXG4gICAgICByZW5kZXJJdGVtID0gcHJvcHMucmVuZGVySXRlbSxcbiAgICAgIHJlc3BvbnNpdmUgPSBwcm9wcy5yZXNwb25zaXZlLFxuICAgICAgcmVnaXN0ZXJTaXplID0gcHJvcHMucmVnaXN0ZXJTaXplLFxuICAgICAgaXRlbUtleSA9IHByb3BzLml0ZW1LZXksXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBzdHlsZSA9IHByb3BzLnN0eWxlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGRpc3BsYXkgPSBwcm9wcy5kaXNwbGF5LFxuICAgICAgb3JkZXIgPSBwcm9wcy5vcmRlcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgdmFyIG1lcmdlZEhpZGRlbiA9IHJlc3BvbnNpdmUgJiYgIWRpc3BsYXk7IC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IEVmZmVjdCA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIGludGVybmFsUmVnaXN0ZXJTaXplKHdpZHRoKSB7XG4gICAgcmVnaXN0ZXJTaXplKGl0ZW1LZXksIHdpZHRoKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGludGVybmFsUmVnaXN0ZXJTaXplKG51bGwpO1xuICAgIH07XG4gIH0sIFtdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGNoaWxkTm9kZSA9IHJlbmRlckl0ZW0gJiYgaXRlbSAhPT0gVU5ERUZJTkVEID8gcmVuZGVySXRlbShpdGVtKSA6IGNoaWxkcmVuO1xuICB2YXIgb3ZlcmZsb3dTdHlsZTtcblxuICBpZiAoIWludmFsaWRhdGUpIHtcbiAgICBvdmVyZmxvd1N0eWxlID0ge1xuICAgICAgb3BhY2l0eTogbWVyZ2VkSGlkZGVuID8gMCA6IDEsXG4gICAgICBoZWlnaHQ6IG1lcmdlZEhpZGRlbiA/IDAgOiBVTkRFRklORUQsXG4gICAgICBvdmVyZmxvd1k6IG1lcmdlZEhpZGRlbiA/ICdoaWRkZW4nIDogVU5ERUZJTkVELFxuICAgICAgb3JkZXI6IHJlc3BvbnNpdmUgPyBvcmRlciA6IFVOREVGSU5FRCxcbiAgICAgIHBvaW50ZXJFdmVudHM6IG1lcmdlZEhpZGRlbiA/ICdub25lJyA6IFVOREVGSU5FRCxcbiAgICAgIHBvc2l0aW9uOiBtZXJnZWRIaWRkZW4gPyAnYWJzb2x1dGUnIDogVU5ERUZJTkVEXG4gICAgfTtcbiAgfVxuXG4gIHZhciBvdmVyZmxvd1Byb3BzID0ge307XG5cbiAgaWYgKG1lcmdlZEhpZGRlbikge1xuICAgIG92ZXJmbG93UHJvcHNbJ2FyaWEtaGlkZGVuJ10gPSB0cnVlO1xuICB9XG5cbiAgdmFyIGl0ZW1Ob2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCFpbnZhbGlkYXRlICYmIHByZWZpeENscywgY2xhc3NOYW1lKSxcbiAgICBzdHlsZTogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvdmVyZmxvd1N0eWxlKSwgc3R5bGUpXG4gIH0sIG92ZXJmbG93UHJvcHMsIHJlc3RQcm9wcywge1xuICAgIHJlZjogcmVmXG4gIH0pLCBjaGlsZE5vZGUpO1xuXG4gIGlmIChyZXNwb25zaXZlKSB7XG4gICAgaXRlbU5vZGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXNpemVPYnNlcnZlciwge1xuICAgICAgb25SZXNpemU6IGZ1bmN0aW9uIG9uUmVzaXplKF9yZWYpIHtcbiAgICAgICAgdmFyIG9mZnNldFdpZHRoID0gX3JlZi5vZmZzZXRXaWR0aDtcbiAgICAgICAgaW50ZXJuYWxSZWdpc3RlclNpemUob2Zmc2V0V2lkdGgpO1xuICAgICAgfVxuICAgIH0sIGl0ZW1Ob2RlKTtcbiAgfVxuXG4gIHJldHVybiBpdGVtTm9kZTtcbn1cblxudmFyIEl0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbnRlcm5hbEl0ZW0pO1xuSXRlbS5kaXNwbGF5TmFtZSA9ICdJdGVtJztcbmV4cG9ydCBkZWZhdWx0IEl0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcImNvbXBvbmVudFwiXSxcbiAgICBfZXhjbHVkZWQyID0gW1wiY2xhc3NOYW1lXCJdLFxuICAgIF9leGNsdWRlZDMgPSBbXCJjbGFzc05hbWVcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBJdGVtIGZyb20gJy4vSXRlbSc7XG5pbXBvcnQgeyBPdmVyZmxvd0NvbnRleHQgfSBmcm9tICcuL092ZXJmbG93JztcblxudmFyIEludGVybmFsUmF3SXRlbSA9IGZ1bmN0aW9uIEludGVybmFsUmF3SXRlbShwcm9wcywgcmVmKSB7XG4gIHZhciBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChPdmVyZmxvd0NvbnRleHQpOyAvLyBSZW5kZXIgZGlyZWN0bHkgd2hlbiBjb250ZXh0IG5vdCBwcm92aWRlZFxuXG4gIGlmICghY29udGV4dCkge1xuICAgIHZhciBfcHJvcHMkY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICAgIF9yZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgX3Jlc3RQcm9wcywge1xuICAgICAgcmVmOiByZWZcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgY29udGV4dENsYXNzTmFtZSA9IGNvbnRleHQuY2xhc3NOYW1lLFxuICAgICAgcmVzdENvbnRleHQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoY29udGV4dCwgX2V4Y2x1ZGVkMik7XG5cbiAgdmFyIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkMyk7IC8vIERvIG5vdCBwYXNzIGNvbnRleHQgdG8gc3ViIGl0ZW0gdG8gYXZvaWQgbXVsdGlwbGUgbWVhc3VyZVxuXG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE92ZXJmbG93Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBudWxsXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW0sIF9leHRlbmRzKHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY29udGV4dENsYXNzTmFtZSwgY2xhc3NOYW1lKVxuICB9LCByZXN0Q29udGV4dCwgcmVzdFByb3BzKSkpO1xufTtcblxudmFyIFJhd0l0ZW0gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihJbnRlcm5hbFJhd0l0ZW0pO1xuUmF3SXRlbS5kaXNwbGF5TmFtZSA9ICdSYXdJdGVtJztcbmV4cG9ydCBkZWZhdWx0IFJhd0l0ZW07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMlwiO1xuaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xudmFyIF9leGNsdWRlZCA9IFtcInByZWZpeENsc1wiLCBcImRhdGFcIiwgXCJyZW5kZXJJdGVtXCIsIFwicmVuZGVyUmF3SXRlbVwiLCBcIml0ZW1LZXlcIiwgXCJpdGVtV2lkdGhcIiwgXCJzc3JcIiwgXCJzdHlsZVwiLCBcImNsYXNzTmFtZVwiLCBcIm1heENvdW50XCIsIFwicmVuZGVyUmVzdFwiLCBcInJlbmRlclJhd1Jlc3RcIiwgXCJzdWZmaXhcIiwgXCJjb21wb25lbnRcIiwgXCJpdGVtQ29tcG9uZW50XCIsIFwib25WaXNpYmxlQ2hhbmdlXCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSAncmMtcmVzaXplLW9ic2VydmVyJztcbmltcG9ydCB1c2VMYXlvdXRFZmZlY3QgZnJvbSBcInJjLXV0aWwvZXMvaG9va3MvdXNlTGF5b3V0RWZmZWN0XCI7XG5pbXBvcnQgSXRlbSBmcm9tICcuL0l0ZW0nO1xuaW1wb3J0IHsgdXNlQmF0Y2hGcmFtZVN0YXRlIH0gZnJvbSAnLi9ob29rcy91c2VCYXRjaEZyYW1lU3RhdGUnO1xuaW1wb3J0IFJhd0l0ZW0gZnJvbSAnLi9SYXdJdGVtJztcbmV4cG9ydCB2YXIgT3ZlcmZsb3dDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG52YXIgUkVTUE9OU0lWRSA9ICdyZXNwb25zaXZlJztcbnZhciBJTlZBTElEQVRFID0gJ2ludmFsaWRhdGUnO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmVuZGVyUmVzdChvbWl0dGVkSXRlbXMpIHtcbiAgcmV0dXJuIFwiKyBcIi5jb25jYXQob21pdHRlZEl0ZW1zLmxlbmd0aCwgXCIgLi4uXCIpO1xufVxuXG5mdW5jdGlvbiBPdmVyZmxvdyhwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgcHJlZml4Q2xzID0gX3Byb3BzJHByZWZpeENscyA9PT0gdm9pZCAwID8gJ3JjLW92ZXJmbG93JyA6IF9wcm9wcyRwcmVmaXhDbHMsXG4gICAgICBfcHJvcHMkZGF0YSA9IHByb3BzLmRhdGEsXG4gICAgICBkYXRhID0gX3Byb3BzJGRhdGEgPT09IHZvaWQgMCA/IFtdIDogX3Byb3BzJGRhdGEsXG4gICAgICByZW5kZXJJdGVtID0gcHJvcHMucmVuZGVySXRlbSxcbiAgICAgIHJlbmRlclJhd0l0ZW0gPSBwcm9wcy5yZW5kZXJSYXdJdGVtLFxuICAgICAgaXRlbUtleSA9IHByb3BzLml0ZW1LZXksXG4gICAgICBfcHJvcHMkaXRlbVdpZHRoID0gcHJvcHMuaXRlbVdpZHRoLFxuICAgICAgaXRlbVdpZHRoID0gX3Byb3BzJGl0ZW1XaWR0aCA9PT0gdm9pZCAwID8gMTAgOiBfcHJvcHMkaXRlbVdpZHRoLFxuICAgICAgc3NyID0gcHJvcHMuc3NyLFxuICAgICAgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG1heENvdW50ID0gcHJvcHMubWF4Q291bnQsXG4gICAgICByZW5kZXJSZXN0ID0gcHJvcHMucmVuZGVyUmVzdCxcbiAgICAgIHJlbmRlclJhd1Jlc3QgPSBwcm9wcy5yZW5kZXJSYXdSZXN0LFxuICAgICAgc3VmZml4ID0gcHJvcHMuc3VmZml4LFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdkaXYnIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIGl0ZW1Db21wb25lbnQgPSBwcm9wcy5pdGVtQ29tcG9uZW50LFxuICAgICAgb25WaXNpYmxlQ2hhbmdlID0gcHJvcHMub25WaXNpYmxlQ2hhbmdlLFxuICAgICAgcmVzdFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gIHZhciBjcmVhdGVVc2VTdGF0ZSA9IHVzZUJhdGNoRnJhbWVTdGF0ZSgpO1xuICB2YXIgZnVsbHlTU1IgPSBzc3IgPT09ICdmdWxsJztcblxuICB2YXIgX2NyZWF0ZVVzZVN0YXRlID0gY3JlYXRlVXNlU3RhdGUobnVsbCksXG4gICAgICBfY3JlYXRlVXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX2NyZWF0ZVVzZVN0YXRlLCAyKSxcbiAgICAgIGNvbnRhaW5lcldpZHRoID0gX2NyZWF0ZVVzZVN0YXRlMlswXSxcbiAgICAgIHNldENvbnRhaW5lcldpZHRoID0gX2NyZWF0ZVVzZVN0YXRlMlsxXTtcblxuICB2YXIgbWVyZ2VkQ29udGFpbmVyV2lkdGggPSBjb250YWluZXJXaWR0aCB8fCAwO1xuXG4gIHZhciBfY3JlYXRlVXNlU3RhdGUzID0gY3JlYXRlVXNlU3RhdGUobmV3IE1hcCgpKSxcbiAgICAgIF9jcmVhdGVVc2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfY3JlYXRlVXNlU3RhdGUzLCAyKSxcbiAgICAgIGl0ZW1XaWR0aHMgPSBfY3JlYXRlVXNlU3RhdGU0WzBdLFxuICAgICAgc2V0SXRlbVdpZHRocyA9IF9jcmVhdGVVc2VTdGF0ZTRbMV07XG5cbiAgdmFyIF9jcmVhdGVVc2VTdGF0ZTUgPSBjcmVhdGVVc2VTdGF0ZSgwKSxcbiAgICAgIF9jcmVhdGVVc2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfY3JlYXRlVXNlU3RhdGU1LCAyKSxcbiAgICAgIHByZXZSZXN0V2lkdGggPSBfY3JlYXRlVXNlU3RhdGU2WzBdLFxuICAgICAgc2V0UHJldlJlc3RXaWR0aCA9IF9jcmVhdGVVc2VTdGF0ZTZbMV07XG5cbiAgdmFyIF9jcmVhdGVVc2VTdGF0ZTcgPSBjcmVhdGVVc2VTdGF0ZSgwKSxcbiAgICAgIF9jcmVhdGVVc2VTdGF0ZTggPSBfc2xpY2VkVG9BcnJheShfY3JlYXRlVXNlU3RhdGU3LCAyKSxcbiAgICAgIHJlc3RXaWR0aCA9IF9jcmVhdGVVc2VTdGF0ZThbMF0sXG4gICAgICBzZXRSZXN0V2lkdGggPSBfY3JlYXRlVXNlU3RhdGU4WzFdO1xuXG4gIHZhciBfY3JlYXRlVXNlU3RhdGU5ID0gY3JlYXRlVXNlU3RhdGUoMCksXG4gICAgICBfY3JlYXRlVXNlU3RhdGUxMCA9IF9zbGljZWRUb0FycmF5KF9jcmVhdGVVc2VTdGF0ZTksIDIpLFxuICAgICAgc3VmZml4V2lkdGggPSBfY3JlYXRlVXNlU3RhdGUxMFswXSxcbiAgICAgIHNldFN1ZmZpeFdpZHRoID0gX2NyZWF0ZVVzZVN0YXRlMTBbMV07XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKG51bGwpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBzdWZmaXhGaXhlZFN0YXJ0ID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldFN1ZmZpeEZpeGVkU3RhcnQgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUzID0gdXNlU3RhdGUobnVsbCksXG4gICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgICBkaXNwbGF5Q291bnQgPSBfdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0RGlzcGxheUNvdW50ID0gX3VzZVN0YXRlNFsxXTtcblxuICB2YXIgbWVyZ2VkRGlzcGxheUNvdW50ID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRpc3BsYXlDb3VudCA9PT0gbnVsbCAmJiBmdWxseVNTUikge1xuICAgICAgcmV0dXJuIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgIH1cblxuICAgIHJldHVybiBkaXNwbGF5Q291bnQgfHwgMDtcbiAgfSwgW2Rpc3BsYXlDb3VudCwgY29udGFpbmVyV2lkdGhdKTtcblxuICB2YXIgX3VzZVN0YXRlNSA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF91c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU1LCAyKSxcbiAgICAgIHJlc3RSZWFkeSA9IF91c2VTdGF0ZTZbMF0sXG4gICAgICBzZXRSZXN0UmVhZHkgPSBfdXNlU3RhdGU2WzFdO1xuXG4gIHZhciBpdGVtUHJlZml4Q2xzID0gXCJcIi5jb25jYXQocHJlZml4Q2xzLCBcIi1pdGVtXCIpOyAvLyBBbHdheXMgdXNlIHRoZSBtYXggd2lkdGggdG8gYXZvaWQgYmxpbmtcblxuICB2YXIgbWVyZ2VkUmVzdFdpZHRoID0gTWF0aC5tYXgocHJldlJlc3RXaWR0aCwgcmVzdFdpZHRoKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IERhdGEgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGlzUmVzcG9uc2l2ZSA9IGRhdGEubGVuZ3RoICYmIG1heENvdW50ID09PSBSRVNQT05TSVZFO1xuICB2YXIgaW52YWxpZGF0ZSA9IG1heENvdW50ID09PSBJTlZBTElEQVRFO1xuICAvKipcbiAgICogV2hlbiBpcyBgcmVzcG9uc2l2ZWAsIHdlIHdpbGwgYWx3YXlzIHJlbmRlciByZXN0IG5vZGUgdG8gZ2V0IHRoZSByZWFsIHdpZHRoIG9mIGl0IGZvciBjYWxjdWxhdGlvblxuICAgKi9cblxuICB2YXIgc2hvd1Jlc3QgPSBpc1Jlc3BvbnNpdmUgfHwgdHlwZW9mIG1heENvdW50ID09PSAnbnVtYmVyJyAmJiBkYXRhLmxlbmd0aCA+IG1heENvdW50O1xuICB2YXIgbWVyZ2VkRGF0YSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBpdGVtcyA9IGRhdGE7XG5cbiAgICBpZiAoaXNSZXNwb25zaXZlKSB7XG4gICAgICBpZiAoY29udGFpbmVyV2lkdGggPT09IG51bGwgJiYgZnVsbHlTU1IpIHtcbiAgICAgICAgaXRlbXMgPSBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXMgPSBkYXRhLnNsaWNlKDAsIE1hdGgubWluKGRhdGEubGVuZ3RoLCBtZXJnZWRDb250YWluZXJXaWR0aCAvIGl0ZW1XaWR0aCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1heENvdW50ID09PSAnbnVtYmVyJykge1xuICAgICAgaXRlbXMgPSBkYXRhLnNsaWNlKDAsIG1heENvdW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlbXM7XG4gIH0sIFtkYXRhLCBpdGVtV2lkdGgsIGNvbnRhaW5lcldpZHRoLCBtYXhDb3VudCwgaXNSZXNwb25zaXZlXSk7XG4gIHZhciBvbWl0dGVkSXRlbXMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNSZXNwb25zaXZlKSB7XG4gICAgICByZXR1cm4gZGF0YS5zbGljZShtZXJnZWREaXNwbGF5Q291bnQgKyAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YS5zbGljZShtZXJnZWREYXRhLmxlbmd0aCk7XG4gIH0sIFtkYXRhLCBtZXJnZWREYXRhLCBpc1Jlc3BvbnNpdmUsIG1lcmdlZERpc3BsYXlDb3VudF0pOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gSXRlbSA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgZ2V0S2V5ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICBpZiAodHlwZW9mIGl0ZW1LZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBpdGVtS2V5KGl0ZW0pO1xuICAgIH1cblxuICAgIHJldHVybiAoX3JlZiA9IGl0ZW1LZXkgJiYgKGl0ZW0gPT09IG51bGwgfHwgaXRlbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlbVtpdGVtS2V5XSkpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBpbmRleDtcbiAgfSwgW2l0ZW1LZXldKTtcbiAgdmFyIG1lcmdlZFJlbmRlckl0ZW0gPSB1c2VDYWxsYmFjayhyZW5kZXJJdGVtIHx8IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH0sIFtyZW5kZXJJdGVtXSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheUNvdW50KGNvdW50LCBub3RSZWFkeSkge1xuICAgIHNldERpc3BsYXlDb3VudChjb3VudCk7XG5cbiAgICBpZiAoIW5vdFJlYWR5KSB7XG4gICAgICBzZXRSZXN0UmVhZHkoY291bnQgPCBkYXRhLmxlbmd0aCAtIDEpO1xuICAgICAgb25WaXNpYmxlQ2hhbmdlID09PSBudWxsIHx8IG9uVmlzaWJsZUNoYW5nZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25WaXNpYmxlQ2hhbmdlKGNvdW50KTtcbiAgICB9XG4gIH0gLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFNpemUgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICBmdW5jdGlvbiBvbk92ZXJmbG93UmVzaXplKF8sIGVsZW1lbnQpIHtcbiAgICBzZXRDb250YWluZXJXaWR0aChlbGVtZW50LmNsaWVudFdpZHRoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyU2l6ZShrZXksIHdpZHRoKSB7XG4gICAgc2V0SXRlbVdpZHRocyhmdW5jdGlvbiAob3JpZ2luKSB7XG4gICAgICB2YXIgY2xvbmUgPSBuZXcgTWFwKG9yaWdpbik7XG5cbiAgICAgIGlmICh3aWR0aCA9PT0gbnVsbCkge1xuICAgICAgICBjbG9uZS5kZWxldGUoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb25lLnNldChrZXksIHdpZHRoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJPdmVyZmxvd1NpemUoXywgd2lkdGgpIHtcbiAgICBzZXRSZXN0V2lkdGgod2lkdGgpO1xuICAgIHNldFByZXZSZXN0V2lkdGgocmVzdFdpZHRoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyU3VmZml4U2l6ZShfLCB3aWR0aCkge1xuICAgIHNldFN1ZmZpeFdpZHRoKHdpZHRoKTtcbiAgfSAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFZmZlY3QgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXG4gIGZ1bmN0aW9uIGdldEl0ZW1XaWR0aChpbmRleCkge1xuICAgIHJldHVybiBpdGVtV2lkdGhzLmdldChnZXRLZXkobWVyZ2VkRGF0YVtpbmRleF0sIGluZGV4KSk7XG4gIH1cblxuICB1c2VMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChtZXJnZWRDb250YWluZXJXaWR0aCAmJiBtZXJnZWRSZXN0V2lkdGggJiYgbWVyZ2VkRGF0YSkge1xuICAgICAgdmFyIHRvdGFsV2lkdGggPSBzdWZmaXhXaWR0aDtcbiAgICAgIHZhciBsZW4gPSBtZXJnZWREYXRhLmxlbmd0aDtcbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW4gLSAxOyAvLyBXaGVuIGRhdGEgY291bnQgY2hhbmdlIHRvIDAsIHJlc2V0IHRoaXMgc2luY2Ugbm90IGxvb3Agd2lsbCByZWFjaFxuXG4gICAgICBpZiAoIWxlbikge1xuICAgICAgICB1cGRhdGVEaXNwbGF5Q291bnQoMCk7XG4gICAgICAgIHNldFN1ZmZpeEZpeGVkU3RhcnQobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB2YXIgY3VycmVudEl0ZW1XaWR0aCA9IGdldEl0ZW1XaWR0aChpKTsgLy8gQnJlYWsgc2luY2UgZGF0YSBub3QgcmVhZHlcblxuICAgICAgICBpZiAoY3VycmVudEl0ZW1XaWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBkYXRlRGlzcGxheUNvdW50KGkgLSAxLCB0cnVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAvLyBGaW5kIGJlc3QgbWF0Y2hcblxuXG4gICAgICAgIHRvdGFsV2lkdGggKz0gY3VycmVudEl0ZW1XaWR0aDtcblxuICAgICAgICBpZiAoIC8vIE9ubHkgb25lIG1lYW5zIGB0b3RhbFdpZHRoYCBpcyB0aGUgZmluYWwgd2lkdGhcbiAgICAgICAgbGFzdEluZGV4ID09PSAwICYmIHRvdGFsV2lkdGggPD0gbWVyZ2VkQ29udGFpbmVyV2lkdGggfHwgLy8gTGFzdCB0d28gd2lkdGggd2lsbCBiZSB0aGUgZmluYWwgd2lkdGhcbiAgICAgICAgaSA9PT0gbGFzdEluZGV4IC0gMSAmJiB0b3RhbFdpZHRoICsgZ2V0SXRlbVdpZHRoKGxhc3RJbmRleCkgPD0gbWVyZ2VkQ29udGFpbmVyV2lkdGgpIHtcbiAgICAgICAgICAvLyBBZGRpdGlvbmFsIGNoZWNrIGlmIG1hdGNoIHRoZSBlbmRcbiAgICAgICAgICB1cGRhdGVEaXNwbGF5Q291bnQobGFzdEluZGV4KTtcbiAgICAgICAgICBzZXRTdWZmaXhGaXhlZFN0YXJ0KG51bGwpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKHRvdGFsV2lkdGggKyBtZXJnZWRSZXN0V2lkdGggPiBtZXJnZWRDb250YWluZXJXaWR0aCkge1xuICAgICAgICAgIC8vIENhbiBub3QgaG9sZCBhbGwgdGhlIGNvbnRlbnQgdG8gc2hvdyByZXN0XG4gICAgICAgICAgdXBkYXRlRGlzcGxheUNvdW50KGkgLSAxKTtcbiAgICAgICAgICBzZXRTdWZmaXhGaXhlZFN0YXJ0KHRvdGFsV2lkdGggLSBjdXJyZW50SXRlbVdpZHRoIC0gc3VmZml4V2lkdGggKyByZXN0V2lkdGgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWZmaXggJiYgZ2V0SXRlbVdpZHRoKDApICsgc3VmZml4V2lkdGggPiBtZXJnZWRDb250YWluZXJXaWR0aCkge1xuICAgICAgICBzZXRTdWZmaXhGaXhlZFN0YXJ0KG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW21lcmdlZENvbnRhaW5lcldpZHRoLCBpdGVtV2lkdGhzLCByZXN0V2lkdGgsIHN1ZmZpeFdpZHRoLCBnZXRLZXksIG1lcmdlZERhdGFdKTsgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gUmVuZGVyID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIGRpc3BsYXlSZXN0ID0gcmVzdFJlYWR5ICYmICEhb21pdHRlZEl0ZW1zLmxlbmd0aDtcbiAgdmFyIHN1ZmZpeFN0eWxlID0ge307XG5cbiAgaWYgKHN1ZmZpeEZpeGVkU3RhcnQgIT09IG51bGwgJiYgaXNSZXNwb25zaXZlKSB7XG4gICAgc3VmZml4U3R5bGUgPSB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6IHN1ZmZpeEZpeGVkU3RhcnQsXG4gICAgICB0b3A6IDBcbiAgICB9O1xuICB9XG5cbiAgdmFyIGl0ZW1TaGFyZWRQcm9wcyA9IHtcbiAgICBwcmVmaXhDbHM6IGl0ZW1QcmVmaXhDbHMsXG4gICAgcmVzcG9uc2l2ZTogaXNSZXNwb25zaXZlLFxuICAgIGNvbXBvbmVudDogaXRlbUNvbXBvbmVudCxcbiAgICBpbnZhbGlkYXRlOiBpbnZhbGlkYXRlXG4gIH07IC8vID4+Pj4+IENob2ljZSByZW5kZXIgZnVuIGJ5IGByZW5kZXJSYXdJdGVtYFxuXG4gIHZhciBpbnRlcm5hbFJlbmRlckl0ZW1Ob2RlID0gcmVuZGVyUmF3SXRlbSA/IGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIHZhciBrZXkgPSBnZXRLZXkoaXRlbSwgaW5kZXgpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdmVyZmxvd0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIGtleToga2V5LFxuICAgICAgdmFsdWU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbVNoYXJlZFByb3BzKSwge30sIHtcbiAgICAgICAgb3JkZXI6IGluZGV4LFxuICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICBpdGVtS2V5OiBrZXksXG4gICAgICAgIHJlZ2lzdGVyU2l6ZTogcmVnaXN0ZXJTaXplLFxuICAgICAgICBkaXNwbGF5OiBpbmRleCA8PSBtZXJnZWREaXNwbGF5Q291bnRcbiAgICAgIH0pXG4gICAgfSwgcmVuZGVyUmF3SXRlbShpdGVtLCBpbmRleCkpO1xuICB9IDogZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgdmFyIGtleSA9IGdldEtleShpdGVtLCBpbmRleCk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW0sIF9leHRlbmRzKHt9LCBpdGVtU2hhcmVkUHJvcHMsIHtcbiAgICAgIG9yZGVyOiBpbmRleCxcbiAgICAgIGtleToga2V5LFxuICAgICAgaXRlbTogaXRlbSxcbiAgICAgIHJlbmRlckl0ZW06IG1lcmdlZFJlbmRlckl0ZW0sXG4gICAgICBpdGVtS2V5OiBrZXksXG4gICAgICByZWdpc3RlclNpemU6IHJlZ2lzdGVyU2l6ZSxcbiAgICAgIGRpc3BsYXk6IGluZGV4IDw9IG1lcmdlZERpc3BsYXlDb3VudFxuICAgIH0pKTtcbiAgfTsgLy8gPj4+Pj4gUmVzdCBub2RlXG5cbiAgdmFyIHJlc3ROb2RlO1xuICB2YXIgcmVzdENvbnRleHRQcm9wcyA9IHtcbiAgICBvcmRlcjogZGlzcGxheVJlc3QgPyBtZXJnZWREaXNwbGF5Q291bnQgOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcbiAgICBjbGFzc05hbWU6IFwiXCIuY29uY2F0KGl0ZW1QcmVmaXhDbHMsIFwiLXJlc3RcIiksXG4gICAgcmVnaXN0ZXJTaXplOiByZWdpc3Rlck92ZXJmbG93U2l6ZSxcbiAgICBkaXNwbGF5OiBkaXNwbGF5UmVzdFxuICB9O1xuXG4gIGlmICghcmVuZGVyUmF3UmVzdCkge1xuICAgIHZhciBtZXJnZWRSZW5kZXJSZXN0ID0gcmVuZGVyUmVzdCB8fCBkZWZhdWx0UmVuZGVyUmVzdDtcbiAgICByZXN0Tm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW0sIF9leHRlbmRzKHt9LCBpdGVtU2hhcmVkUHJvcHMsIHJlc3RDb250ZXh0UHJvcHMpLCB0eXBlb2YgbWVyZ2VkUmVuZGVyUmVzdCA9PT0gJ2Z1bmN0aW9uJyA/IG1lcmdlZFJlbmRlclJlc3Qob21pdHRlZEl0ZW1zKSA6IG1lcmdlZFJlbmRlclJlc3QpO1xuICB9IGVsc2UgaWYgKHJlbmRlclJhd1Jlc3QpIHtcbiAgICByZXN0Tm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE92ZXJmbG93Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgaXRlbVNoYXJlZFByb3BzKSwgcmVzdENvbnRleHRQcm9wcylcbiAgICB9LCByZW5kZXJSYXdSZXN0KG9taXR0ZWRJdGVtcykpO1xuICB9XG5cbiAgdmFyIG92ZXJmbG93Tm9kZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyghaW52YWxpZGF0ZSAmJiBwcmVmaXhDbHMsIGNsYXNzTmFtZSksXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHJlZjogcmVmXG4gIH0sIHJlc3RQcm9wcyksIG1lcmdlZERhdGEubWFwKGludGVybmFsUmVuZGVySXRlbU5vZGUpLCBzaG93UmVzdCA/IHJlc3ROb2RlIDogbnVsbCwgc3VmZml4ICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEl0ZW0sIF9leHRlbmRzKHt9LCBpdGVtU2hhcmVkUHJvcHMsIHtcbiAgICBvcmRlcjogbWVyZ2VkRGlzcGxheUNvdW50LFxuICAgIGNsYXNzTmFtZTogXCJcIi5jb25jYXQoaXRlbVByZWZpeENscywgXCItc3VmZml4XCIpLFxuICAgIHJlZ2lzdGVyU2l6ZTogcmVnaXN0ZXJTdWZmaXhTaXplLFxuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgc3R5bGU6IHN1ZmZpeFN0eWxlXG4gIH0pLCBzdWZmaXgpKTtcblxuICBpZiAoaXNSZXNwb25zaXZlKSB7XG4gICAgb3ZlcmZsb3dOb2RlID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzaXplT2JzZXJ2ZXIsIHtcbiAgICAgIG9uUmVzaXplOiBvbk92ZXJmbG93UmVzaXplXG4gICAgfSwgb3ZlcmZsb3dOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd05vZGU7XG59XG5cbnZhciBGb3J3YXJkT3ZlcmZsb3cgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihPdmVyZmxvdyk7XG5Gb3J3YXJkT3ZlcmZsb3cuZGlzcGxheU5hbWUgPSAnT3ZlcmZsb3cnO1xuRm9yd2FyZE92ZXJmbG93Lkl0ZW0gPSBSYXdJdGVtO1xuRm9yd2FyZE92ZXJmbG93LlJFU1BPTlNJVkUgPSBSRVNQT05TSVZFO1xuRm9yd2FyZE92ZXJmbG93LklOVkFMSURBVEUgPSBJTlZBTElEQVRFOyAvLyBDb252ZXJ0IHRvIGdlbmVyaWMgdHlwZVxuXG5leHBvcnQgZGVmYXVsdCBGb3J3YXJkT3ZlcmZsb3c7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgeyB1c2VSZWYsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgcmFmIGZyb20gXCJyYy11dGlsL2VzL3JhZlwiO1xuLyoqXG4gKiBTdGF0ZSBnZW5lcmF0ZS4gUmV0dXJuIGEgYHNldFN0YXRlYCBidXQgaXQgd2lsbCBmbHVzaCBhbGwgc3RhdGUgd2l0aCBvbmUgcmVuZGVyIHRvIHNhdmUgcGVyZi5cbiAqIFRoaXMgaXMgbm90IGEgcmVhbGl6YXRpb24gb2YgYHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzYC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlQmF0Y2hGcmFtZVN0YXRlKCkge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoe30pLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBmb3JjZVVwZGF0ZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIHN0YXRlc1JlZiA9IHVzZVJlZihbXSk7XG4gIHZhciBkZXN0cm95UmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdmFyIHdhbGtpbmdJbmRleCA9IDA7XG4gIHZhciBiZWZvcmVGcmFtZUlkID0gMDtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZGVzdHJveVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlU3RhdGUoZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIG15SW5kZXggPSB3YWxraW5nSW5kZXg7XG4gICAgd2Fsa2luZ0luZGV4ICs9IDE7IC8vIEZpbGwgdmFsdWUgaWYgbm90IGV4aXN0IHlldFxuXG4gICAgaWYgKHN0YXRlc1JlZi5jdXJyZW50Lmxlbmd0aCA8IG15SW5kZXggKyAxKSB7XG4gICAgICBzdGF0ZXNSZWYuY3VycmVudFtteUluZGV4XSA9IGRlZmF1bHRWYWx1ZTtcbiAgICB9IC8vIFJldHVybiBmaWxsZWQgYXMgYHNldFN0YXRlYFxuXG5cbiAgICB2YXIgdmFsdWUgPSBzdGF0ZXNSZWYuY3VycmVudFtteUluZGV4XTtcblxuICAgIGZ1bmN0aW9uIHNldFZhbHVlKHZhbCkge1xuICAgICAgc3RhdGVzUmVmLmN1cnJlbnRbbXlJbmRleF0gPSB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nID8gdmFsKHN0YXRlc1JlZi5jdXJyZW50W215SW5kZXhdKSA6IHZhbDtcbiAgICAgIHJhZi5jYW5jZWwoYmVmb3JlRnJhbWVJZCk7IC8vIEZsdXNoIHdpdGggYmF0Y2hcblxuICAgICAgYmVmb3JlRnJhbWVJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZGVzdHJveVJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgZm9yY2VVcGRhdGUoe30pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZV07XG4gIH1cblxuICByZXR1cm4gY3JlYXRlU3RhdGU7XG59IiwiaW1wb3J0IE92ZXJmbG93IGZyb20gJy4vT3ZlcmZsb3cnO1xuZXhwb3J0IGRlZmF1bHQgT3ZlcmZsb3c7Il0sIm5hbWVzIjpbIl9leGNsdWRlZCIsIlVOREVGSU5FRCIsInVuZGVmaW5lZCIsIkludGVybmFsSXRlbSIsInByb3BzIiwicmVmIiwicHJlZml4Q2xzIiwiaW52YWxpZGF0ZSIsIml0ZW0iLCJyZW5kZXJJdGVtIiwicmVzcG9uc2l2ZSIsInJlZ2lzdGVyU2l6ZSIsIml0ZW1LZXkiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNoaWxkcmVuIiwiZGlzcGxheSIsIm9yZGVyIiwiX3Byb3BzJGNvbXBvbmVudCIsImNvbXBvbmVudCIsIkNvbXBvbmVudCIsInJlc3RQcm9wcyIsIm1lcmdlZEhpZGRlbiIsImludGVybmFsUmVnaXN0ZXJTaXplIiwid2lkdGgiLCJvdmVyZmxvd1N0eWxlIiwiY2hpbGROb2RlIiwib3BhY2l0eSIsImhlaWdodCIsIm92ZXJmbG93WSIsInBvaW50ZXJFdmVudHMiLCJwb3NpdGlvbiIsIm92ZXJmbG93UHJvcHMiLCJpdGVtTm9kZSIsIm9uUmVzaXplIiwiX3JlZiIsIm9mZnNldFdpZHRoIiwiSXRlbSIsImRpc3BsYXlOYW1lIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJJbnRlcm5hbFJhd0l0ZW0iLCJjb250ZXh0IiwiT3ZlcmZsb3dDb250ZXh0IiwiX3Jlc3RQcm9wcyIsImNvbnRleHRDbGFzc05hbWUiLCJyZXN0Q29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJSYXdJdGVtIiwiUkVTUE9OU0lWRSIsIklOVkFMSURBVEUiLCJkZWZhdWx0UmVuZGVyUmVzdCIsIm9taXR0ZWRJdGVtcyIsImNvbmNhdCIsImxlbmd0aCIsIk92ZXJmbG93IiwiX3Byb3BzJHByZWZpeENscyIsIl9wcm9wcyRkYXRhIiwiZGF0YSIsInJlbmRlclJhd0l0ZW0iLCJfcHJvcHMkaXRlbVdpZHRoIiwiaXRlbVdpZHRoIiwic3NyIiwibWF4Q291bnQiLCJyZW5kZXJSZXN0IiwicmVuZGVyUmF3UmVzdCIsInN1ZmZpeCIsIml0ZW1Db21wb25lbnQiLCJvblZpc2libGVDaGFuZ2UiLCJjcmVhdGVVc2VTdGF0ZSIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiZm9yY2VVcGRhdGUiLCJzdGF0ZXNSZWYiLCJ1c2VSZWYiLCJkZXN0cm95UmVmIiwid2Fsa2luZ0luZGV4IiwiYmVmb3JlRnJhbWVJZCIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJkZWZhdWx0VmFsdWUiLCJteUluZGV4IiwidmFsIiwicmFmIiwidXNlQmF0Y2hGcmFtZVN0YXRlIiwiZnVsbHlTU1IiLCJfY3JlYXRlVXNlU3RhdGUiLCJfY3JlYXRlVXNlU3RhdGUyIiwiY29udGFpbmVyV2lkdGgiLCJzZXRDb250YWluZXJXaWR0aCIsIm1lcmdlZENvbnRhaW5lcldpZHRoIiwiX2NyZWF0ZVVzZVN0YXRlMyIsIk1hcCIsIl9jcmVhdGVVc2VTdGF0ZTQiLCJpdGVtV2lkdGhzIiwic2V0SXRlbVdpZHRocyIsIl9jcmVhdGVVc2VTdGF0ZTUiLCJfY3JlYXRlVXNlU3RhdGU2IiwicHJldlJlc3RXaWR0aCIsInNldFByZXZSZXN0V2lkdGgiLCJfY3JlYXRlVXNlU3RhdGU3IiwiX2NyZWF0ZVVzZVN0YXRlOCIsInJlc3RXaWR0aCIsInNldFJlc3RXaWR0aCIsIl9jcmVhdGVVc2VTdGF0ZTkiLCJfY3JlYXRlVXNlU3RhdGUxMCIsInN1ZmZpeFdpZHRoIiwic2V0U3VmZml4V2lkdGgiLCJfdXNlU3RhdGUyIiwic3VmZml4Rml4ZWRTdGFydCIsInNldFN1ZmZpeEZpeGVkU3RhcnQiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsImRpc3BsYXlDb3VudCIsInNldERpc3BsYXlDb3VudCIsIm1lcmdlZERpc3BsYXlDb3VudCIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJfdXNlU3RhdGU1IiwiX3VzZVN0YXRlNiIsInJlc3RSZWFkeSIsInNldFJlc3RSZWFkeSIsIml0ZW1QcmVmaXhDbHMiLCJtZXJnZWRSZXN0V2lkdGgiLCJNYXRoIiwibWF4IiwiaXNSZXNwb25zaXZlIiwic2hvd1Jlc3QiLCJtZXJnZWREYXRhIiwidXNlTWVtbyIsIml0ZW1zIiwic2xpY2UiLCJtaW4iLCJnZXRLZXkiLCJ1c2VDYWxsYmFjayIsImluZGV4IiwibWVyZ2VkUmVuZGVySXRlbSIsInVwZGF0ZURpc3BsYXlDb3VudCIsImNvdW50Iiwibm90UmVhZHkiLCJrZXkiLCJvcmlnaW4iLCJjbG9uZSIsImRlbGV0ZSIsInNldCIsImdldEl0ZW1XaWR0aCIsImdldCIsInVzZUxheW91dEVmZmVjdCIsInRvdGFsV2lkdGgiLCJsZW4iLCJsYXN0SW5kZXgiLCJpIiwiY3VycmVudEl0ZW1XaWR0aCIsImRpc3BsYXlSZXN0Iiwic3VmZml4U3R5bGUiLCJsZWZ0IiwidG9wIiwicmVzdE5vZGUiLCJpdGVtU2hhcmVkUHJvcHMiLCJpbnRlcm5hbFJlbmRlckl0ZW1Ob2RlIiwicmVzdENvbnRleHRQcm9wcyIsIl8iLCJtZXJnZWRSZW5kZXJSZXN0Iiwib3ZlcmZsb3dOb2RlIiwibWFwIiwiZWxlbWVudCIsImNsaWVudFdpZHRoIiwiRm9yd2FyZE92ZXJmbG93Il0sInNvdXJjZVJvb3QiOiIifQ==