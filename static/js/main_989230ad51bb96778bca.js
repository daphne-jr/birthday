/*! For license information please see main_989230ad51bb96778bca.js.LICENSE.txt */
(()=>{var e={7757:(e,t,n)=>{e.exports=n(5666)},4184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var o=typeof n;if("string"===o||"number"===o)e.push(n);else if(Array.isArray(n)){if(n.length){var i=a.apply(null,n);i&&e.push(i)}}else if("object"===o)if(n.toString===Object.prototype.toString)for(var l in n)r.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(n=function(){return a}.apply(t,[]))||(e.exports=n)}()},640:(e,t,n)=>{"use strict";var r=n(1742),a={"text/plain":"Text","text/html":"Url",default:"Text"};e.exports=function(e,t){var n,o,i,l,u,c,s=!1;t||(t={}),n=t.debug||!1;try{if(i=r(),l=document.createRange(),u=document.getSelection(),(c=document.createElement("span")).textContent=e,c.style.all="unset",c.style.position="fixed",c.style.top=0,c.style.clip="rect(0, 0, 0, 0)",c.style.whiteSpace="pre",c.style.webkitUserSelect="text",c.style.MozUserSelect="text",c.style.msUserSelect="text",c.style.userSelect="text",c.addEventListener("copy",(function(r){if(r.stopPropagation(),t.format)if(r.preventDefault(),void 0===r.clipboardData){n&&console.warn("unable to use e.clipboardData"),n&&console.warn("trying IE specific stuff"),window.clipboardData.clearData();var o=a[t.format]||a.default;window.clipboardData.setData(o,e)}else r.clipboardData.clearData(),r.clipboardData.setData(t.format,e);t.onCopy&&(r.preventDefault(),t.onCopy(r.clipboardData))})),document.body.appendChild(c),l.selectNodeContents(c),u.addRange(l),!document.execCommand("copy"))throw new Error("copy command was unsuccessful");s=!0}catch(r){n&&console.error("unable to copy using execCommand: ",r),n&&console.warn("trying IE specific stuff");try{window.clipboardData.setData(t.format||"text",e),t.onCopy&&t.onCopy(window.clipboardData),s=!0}catch(r){n&&console.error("unable to copy using clipboardData: ",r),n&&console.error("falling back to prompt"),o=function(e){var t=(/mac os x/i.test(navigator.userAgent)?"âŒ˜":"Ctrl")+"+C";return e.replace(/#{\s*key\s*}/g,t)}("message"in t?t.message:"Copy to clipboard: #{key}, Enter"),window.prompt(o,e)}}finally{u&&("function"==typeof u.removeRange?u.removeRange(l):u.removeAllRanges()),c&&document.body.removeChild(c),i()}return s}},8552:(e,t,n)=>{var r=n(852)(n(5639),"DataView");e.exports=r},1989:(e,t,n)=>{var r=n(1789),a=n(401),o=n(7667),i=n(1327),l=n(1866);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=a,u.prototype.get=o,u.prototype.has=i,u.prototype.set=l,e.exports=u},8407:(e,t,n)=>{var r=n(7040),a=n(4125),o=n(2117),i=n(7518),l=n(4705);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=a,u.prototype.get=o,u.prototype.has=i,u.prototype.set=l,e.exports=u},7071:(e,t,n)=>{var r=n(852)(n(5639),"Map");e.exports=r},3369:(e,t,n)=>{var r=n(4785),a=n(1285),o=n(6e3),i=n(9916),l=n(5265);function u(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}u.prototype.clear=r,u.prototype.delete=a,u.prototype.get=o,u.prototype.has=i,u.prototype.set=l,e.exports=u},3818:(e,t,n)=>{var r=n(852)(n(5639),"Promise");e.exports=r},8525:(e,t,n)=>{var r=n(852)(n(5639),"Set");e.exports=r},8668:(e,t,n)=>{var r=n(3369),a=n(619),o=n(2385);function i(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}i.prototype.add=i.prototype.push=a,i.prototype.has=o,e.exports=i},6384:(e,t,n)=>{var r=n(8407),a=n(7465),o=n(3779),i=n(7599),l=n(4758),u=n(4309);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=a,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=l,c.prototype.set=u,e.exports=c},2705:(e,t,n)=>{var r=n(5639).Symbol;e.exports=r},1149:(e,t,n)=>{var r=n(5639).Uint8Array;e.exports=r},577:(e,t,n)=>{var r=n(852)(n(5639),"WeakMap");e.exports=r},4963:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,a=0,o=[];++n<r;){var i=e[n];t(i,n,e)&&(o[a++]=i)}return o}},4636:(e,t,n)=>{var r=n(2545),a=n(5694),o=n(1469),i=n(4144),l=n(5776),u=n(6719),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),s=!n&&a(e),f=!n&&!s&&i(e),d=!n&&!s&&!f&&u(e),p=n||s||f||d,m=p?r(e.length,String):[],h=m.length;for(var v in e)!t&&!c.call(e,v)||p&&("length"==v||f&&("offset"==v||"parent"==v)||d&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||l(v,h))||m.push(v);return m}},2488:e=>{e.exports=function(e,t){for(var n=-1,r=t.length,a=e.length;++n<r;)e[a+n]=t[n];return e}},2908:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},8470:(e,t,n)=>{var r=n(7813);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},8866:(e,t,n)=>{var r=n(2488),a=n(1469);e.exports=function(e,t,n){var o=t(e);return a(e)?o:r(o,n(e))}},4239:(e,t,n)=>{var r=n(2705),a=n(9607),o=n(2333),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?a(e):o(e)}},9454:(e,t,n)=>{var r=n(4239),a=n(7005);e.exports=function(e){return a(e)&&"[object Arguments]"==r(e)}},939:(e,t,n)=>{var r=n(2492),a=n(7005);e.exports=function e(t,n,o,i,l){return t===n||(null==t||null==n||!a(t)&&!a(n)?t!=t&&n!=n:r(t,n,o,i,e,l))}},2492:(e,t,n)=>{var r=n(6384),a=n(7114),o=n(8351),i=n(6096),l=n(4160),u=n(1469),c=n(4144),s=n(6719),f="[object Arguments]",d="[object Array]",p="[object Object]",m=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,h,v,g){var y=u(e),b=u(t),w=y?d:l(e),E=b?d:l(t),x=(w=w==f?p:w)==p,k=(E=E==f?p:E)==p,C=w==E;if(C&&c(e)){if(!c(t))return!1;y=!0,x=!1}if(C&&!x)return g||(g=new r),y||s(e)?a(e,t,n,h,v,g):o(e,t,w,n,h,v,g);if(!(1&n)){var S=x&&m.call(e,"__wrapped__"),O=k&&m.call(t,"__wrapped__");if(S||O){var P=S?e.value():e,N=O?t.value():t;return g||(g=new r),v(P,N,n,h,g)}}return!!C&&(g||(g=new r),i(e,t,n,h,v,g))}},8458:(e,t,n)=>{var r=n(3560),a=n(5346),o=n(3218),i=n(346),l=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,s=u.toString,f=c.hasOwnProperty,d=RegExp("^"+s.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||a(e))&&(r(e)?d:l).test(i(e))}},8749:(e,t,n)=>{var r=n(4239),a=n(1780),o=n(7005),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&a(e.length)&&!!i[r(e)]}},280:(e,t,n)=>{var r=n(5726),a=n(6916),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return a(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},2545:e=>{e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},4757:e=>{e.exports=function(e,t){return e.has(t)}},4429:(e,t,n)=>{var r=n(5639)["__core-js_shared__"];e.exports=r},7114:(e,t,n)=>{var r=n(8668),a=n(2908),o=n(4757);e.exports=function(e,t,n,i,l,u){var c=1&n,s=e.length,f=t.length;if(s!=f&&!(c&&f>s))return!1;var d=u.get(e),p=u.get(t);if(d&&p)return d==t&&p==e;var m=-1,h=!0,v=2&n?new r:void 0;for(u.set(e,t),u.set(t,e);++m<s;){var g=e[m],y=t[m];if(i)var b=c?i(y,g,m,t,e,u):i(g,y,m,e,t,u);if(void 0!==b){if(b)continue;h=!1;break}if(v){if(!a(t,(function(e,t){if(!o(v,t)&&(g===e||l(g,e,n,i,u)))return v.push(t)}))){h=!1;break}}else if(g!==y&&!l(g,y,n,i,u)){h=!1;break}}return u.delete(e),u.delete(t),h}},8351:(e,t,n)=>{var r=n(2705),a=n(1149),o=n(7813),i=n(7114),l=n(8776),u=n(1814),c=r?r.prototype:void 0,s=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,f,d){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!f(new a(e),new a(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=l;case"[object Set]":var m=1&r;if(p||(p=u),e.size!=t.size&&!m)return!1;var h=d.get(e);if(h)return h==t;r|=2,d.set(e,t);var v=i(p(e),p(t),r,c,f,d);return d.delete(e),v;case"[object Symbol]":if(s)return s.call(e)==s.call(t)}return!1}},6096:(e,t,n)=>{var r=n(8234),a=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,o,i,l){var u=1&n,c=r(e),s=c.length;if(s!=r(t).length&&!u)return!1;for(var f=s;f--;){var d=c[f];if(!(u?d in t:a.call(t,d)))return!1}var p=l.get(e),m=l.get(t);if(p&&m)return p==t&&m==e;var h=!0;l.set(e,t),l.set(t,e);for(var v=u;++f<s;){var g=e[d=c[f]],y=t[d];if(o)var b=u?o(y,g,d,t,e,l):o(g,y,d,e,t,l);if(!(void 0===b?g===y||i(g,y,n,o,l):b)){h=!1;break}v||(v="constructor"==d)}if(h&&!v){var w=e.constructor,E=t.constructor;w==E||!("constructor"in e)||!("constructor"in t)||"function"==typeof w&&w instanceof w&&"function"==typeof E&&E instanceof E||(h=!1)}return l.delete(e),l.delete(t),h}},1957:(e,t,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;e.exports=r},8234:(e,t,n)=>{var r=n(8866),a=n(9551),o=n(3674);e.exports=function(e){return r(e,o,a)}},5050:(e,t,n)=>{var r=n(7019);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},852:(e,t,n)=>{var r=n(8458),a=n(7801);e.exports=function(e,t){var n=a(e,t);return r(n)?n:void 0}},9607:(e,t,n)=>{var r=n(2705),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,l=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,l),n=e[l];try{e[l]=void 0;var r=!0}catch(e){}var a=i.call(e);return r&&(t?e[l]=n:delete e[l]),a}},9551:(e,t,n)=>{var r=n(4963),a=n(479),o=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,l=i?function(e){return null==e?[]:(e=Object(e),r(i(e),(function(t){return o.call(e,t)})))}:a;e.exports=l},4160:(e,t,n)=>{var r=n(8552),a=n(7071),o=n(3818),i=n(8525),l=n(577),u=n(4239),c=n(346),s="[object Map]",f="[object Promise]",d="[object Set]",p="[object WeakMap]",m="[object DataView]",h=c(r),v=c(a),g=c(o),y=c(i),b=c(l),w=u;(r&&w(new r(new ArrayBuffer(1)))!=m||a&&w(new a)!=s||o&&w(o.resolve())!=f||i&&w(new i)!=d||l&&w(new l)!=p)&&(w=function(e){var t=u(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case h:return m;case v:return s;case g:return f;case y:return d;case b:return p}return t}),e.exports=w},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},1789:(e,t,n)=>{var r=n(4536);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,n)=>{var r=n(4536),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return a.call(t,e)?t[e]:void 0}},1327:(e,t,n)=>{var r=n(4536),a=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:a.call(t,e)}},1866:(e,t,n)=>{var r=n(4536);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var r=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&t.test(e))&&e>-1&&e%1==0&&e<n}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,n)=>{var r,a=n(4429),o=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!o&&o in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,n)=>{var r=n(8470),a=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():a.call(t,n,1),--this.size,0))}},2117:(e,t,n)=>{var r=n(8470);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},7518:(e,t,n)=>{var r=n(8470);e.exports=function(e){return r(this.__data__,e)>-1}},4705:(e,t,n)=>{var r=n(8470);e.exports=function(e,t){var n=this.__data__,a=r(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this}},4785:(e,t,n)=>{var r=n(1989),a=n(8407),o=n(7071);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||a),string:new r}}},1285:(e,t,n)=>{var r=n(5050);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).get(e)}},9916:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).has(e)}},5265:(e,t,n)=>{var r=n(5050);e.exports=function(e,t){var n=r(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},4536:(e,t,n)=>{var r=n(852)(Object,"create");e.exports=r},6916:(e,t,n)=>{var r=n(5569)(Object.keys,Object);e.exports=r},1167:(e,t,n)=>{e=n.nmd(e);var r=n(1957),a=t&&!t.nodeType&&t,o=a&&e&&!e.nodeType&&e,i=o&&o.exports===a&&r.process,l=function(){try{return o&&o.require&&o.require("util").types||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=l},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(n){return e(t(n))}}},5639:(e,t,n)=>{var r=n(1957),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();e.exports=o},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},7465:(e,t,n)=>{var r=n(8407);e.exports=function(){this.__data__=new r,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,n)=>{var r=n(8407),a=n(7071),o=n(3369);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var i=n.__data__;if(!a||i.length<199)return i.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(i)}return n.set(e,t),this.size=n.size,this}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},5694:(e,t,n)=>{var r=n(9454),a=n(7005),o=Object.prototype,i=o.hasOwnProperty,l=o.propertyIsEnumerable,u=r(function(){return arguments}())?r:function(e){return a(e)&&i.call(e,"callee")&&!l.call(e,"callee")};e.exports=u},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,n)=>{var r=n(3560),a=n(1780);e.exports=function(e){return null!=e&&a(e.length)&&!r(e)}},4144:(e,t,n)=>{e=n.nmd(e);var r=n(5639),a=n(5062),o=t&&!t.nodeType&&t,i=o&&e&&!e.nodeType&&e,l=i&&i.exports===o?r.Buffer:void 0,u=(l?l.isBuffer:void 0)||a;e.exports=u},8446:(e,t,n)=>{var r=n(939);e.exports=function(e,t){return r(e,t)}},3560:(e,t,n)=>{var r=n(4239),a=n(3218);e.exports=function(e){if(!a(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},6719:(e,t,n)=>{var r=n(8749),a=n(1717),o=n(1167),i=o&&o.isTypedArray,l=i?a(i):r;e.exports=l},3674:(e,t,n)=>{var r=n(4636),a=n(280),o=n(8612);e.exports=function(e){return o(e)?r(e):a(e)}},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,l,u=a(e),c=1;c<arguments.length;c++){for(var s in i=Object(arguments[c]))n.call(i,s)&&(u[s]=i[s]);if(t){l=t(i);for(var f=0;f<l.length;f++)r.call(i,l[f])&&(u[l[f]]=i[l[f]])}}return u}},8324:e=>{var t=["ability","able","aboard","about","above","accept","accident","according","account","accurate","acres","across","act","action","active","activity","actual","actually","add","addition","additional","adjective","adult","adventure","advice","affect","afraid","after","afternoon","again","against","age","ago","agree","ahead","aid","air","airplane","alike","alive","all","allow","almost","alone","along","aloud","alphabet","already","also","although","am","among","amount","ancient","angle","angry","animal","announced","another","answer","ants","any","anybody","anyone","anything","anyway","anywhere","apart","apartment","appearance","apple","applied","appropriate","are","area","arm","army","around","arrange","arrangement","arrive","arrow","art","article","as","aside","ask","asleep","at","ate","atmosphere","atom","atomic","attached","attack","attempt","attention","audience","author","automobile","available","average","avoid","aware","away","baby","back","bad","badly","bag","balance","ball","balloon","band","bank","bar","bare","bark","barn","base","baseball","basic","basis","basket","bat","battle","be","bean","bear","beat","beautiful","beauty","became","because","become","becoming","bee","been","before","began","beginning","begun","behavior","behind","being","believed","bell","belong","below","belt","bend","beneath","bent","beside","best","bet","better","between","beyond","bicycle","bigger","biggest","bill","birds","birth","birthday","bit","bite","black","blank","blanket","blew","blind","block","blood","blow","blue","board","boat","body","bone","book","border","born","both","bottle","bottom","bound","bow","bowl","box","boy","brain","branch","brass","brave","bread","break","breakfast","breath","breathe","breathing","breeze","brick","bridge","brief","bright","bring","broad","broke","broken","brother","brought","brown","brush","buffalo","build","building","built","buried","burn","burst","bus","bush","business","busy","but","butter","buy","by","cabin","cage","cake","call","calm","came","camera","camp","can","canal","cannot","cap","capital","captain","captured","car","carbon","card","care","careful","carefully","carried","carry","case","cast","castle","cat","catch","cattle","caught","cause","cave","cell","cent","center","central","century","certain","certainly","chain","chair","chamber","chance","change","changing","chapter","character","characteristic","charge","chart","check","cheese","chemical","chest","chicken","chief","child","children","choice","choose","chose","chosen","church","circle","circus","citizen","city","class","classroom","claws","clay","clean","clear","clearly","climate","climb","clock","close","closely","closer","cloth","clothes","clothing","cloud","club","coach","coal","coast","coat","coffee","cold","collect","college","colony","color","column","combination","combine","come","comfortable","coming","command","common","community","company","compare","compass","complete","completely","complex","composed","composition","compound","concerned","condition","congress","connected","consider","consist","consonant","constantly","construction","contain","continent","continued","contrast","control","conversation","cook","cookies","cool","copper","copy","corn","corner","correct","correctly","cost","cotton","could","count","country","couple","courage","course","court","cover","cow","cowboy","crack","cream","create","creature","crew","crop","cross","crowd","cry","cup","curious","current","curve","customs","cut","cutting","daily","damage","dance","danger","dangerous","dark","darkness","date","daughter","dawn","day","dead","deal","dear","death","decide","declared","deep","deeply","deer","definition","degree","depend","depth","describe","desert","design","desk","detail","determine","develop","development","diagram","diameter","did","die","differ","difference","different","difficult","difficulty","dig","dinner","direct","direction","directly","dirt","dirty","disappear","discover","discovery","discuss","discussion","disease","dish","distance","distant","divide","division","do","doctor","does","dog","doing","doll","dollar","done","donkey","door","dot","double","doubt","down","dozen","draw","drawn","dream","dress","drew","dried","drink","drive","driven","driver","driving","drop","dropped","drove","dry","duck","due","dug","dull","during","dust","duty","each","eager","ear","earlier","early","earn","earth","easier","easily","east","easy","eat","eaten","edge","education","effect","effort","egg","eight","either","electric","electricity","element","elephant","eleven","else","empty","end","enemy","energy","engine","engineer","enjoy","enough","enter","entire","entirely","environment","equal","equally","equator","equipment","escape","especially","essential","establish","even","evening","event","eventually","ever","every","everybody","everyone","everything","everywhere","evidence","exact","exactly","examine","example","excellent","except","exchange","excited","excitement","exciting","exclaimed","exercise","exist","expect","experience","experiment","explain","explanation","explore","express","expression","extra","eye","face","facing","fact","factor","factory","failed","fair","fairly","fall","fallen","familiar","family","famous","far","farm","farmer","farther","fast","fastened","faster","fat","father","favorite","fear","feathers","feature","fed","feed","feel","feet","fell","fellow","felt","fence","few","fewer","field","fierce","fifteen","fifth","fifty","fight","fighting","figure","fill","film","final","finally","find","fine","finest","finger","finish","fire","fireplace","firm","first","fish","five","fix","flag","flame","flat","flew","flies","flight","floating","floor","flow","flower","fly","fog","folks","follow","food","foot","football","for","force","foreign","forest","forget","forgot","forgotten","form","former","fort","forth","forty","forward","fought","found","four","fourth","fox","frame","free","freedom","frequently","fresh","friend","friendly","frighten","frog","from","front","frozen","fruit","fuel","full","fully","fun","function","funny","fur","furniture","further","future","gain","game","garage","garden","gas","gasoline","gate","gather","gave","general","generally","gentle","gently","get","getting","giant","gift","girl","give","given","giving","glad","glass","globe","go","goes","gold","golden","gone","good","goose","got","government","grabbed","grade","gradually","grain","grandfather","grandmother","graph","grass","gravity","gray","great","greater","greatest","greatly","green","grew","ground","group","grow","grown","growth","guard","guess","guide","gulf","gun","habit","had","hair","half","halfway","hall","hand","handle","handsome","hang","happen","happened","happily","happy","harbor","hard","harder","hardly","has","hat","have","having","hay","he","headed","heading","health","heard","hearing","heart","heat","heavy","height","held","hello","help","helpful","her","herd","here","herself","hidden","hide","high","higher","highest","highway","hill","him","himself","his","history","hit","hold","hole","hollow","home","honor","hope","horn","horse","hospital","hot","hour","house","how","however","huge","human","hundred","hung","hungry","hunt","hunter","hurried","hurry","hurt","husband","ice","idea","identity","if","ill","image","imagine","immediately","importance","important","impossible","improve","in","inch","include","including","income","increase","indeed","independent","indicate","individual","industrial","industry","influence","information","inside","instance","instant","instead","instrument","interest","interior","into","introduced","invented","involved","iron","is","island","it","its","itself","jack","jar","jet","job","join","joined","journey","joy","judge","jump","jungle","just","keep","kept","key","kids","kill","kind","kitchen","knew","knife","know","knowledge","known","label","labor","lack","lady","laid","lake","lamp","land","language","large","larger","largest","last","late","later","laugh","law","lay","layers","lead","leader","leaf","learn","least","leather","leave","leaving","led","left","leg","length","lesson","let","letter","level","library","lie","life","lift","light","like","likely","limited","line","lion","lips","liquid","list","listen","little","live","living","load","local","locate","location","log","lonely","long","longer","look","loose","lose","loss","lost","lot","loud","love","lovely","low","lower","luck","lucky","lunch","lungs","lying","machine","machinery","mad","made","magic","magnet","mail","main","mainly","major","make","making","man","managed","manner","manufacturing","many","map","mark","market","married","mass","massage","master","material","mathematics","matter","may","maybe","me","meal","mean","means","meant","measure","meat","medicine","meet","melted","member","memory","men","mental","merely","met","metal","method","mice","middle","might","mighty","mile","military","milk","mill","mind","mine","minerals","minute","mirror","missing","mission","mistake","mix","mixture","model","modern","molecular","moment","money","monkey","month","mood","moon","more","morning","most","mostly","mother","motion","motor","mountain","mouse","mouth","move","movement","movie","moving","mud","muscle","music","musical","must","my","myself","mysterious","nails","name","nation","national","native","natural","naturally","nature","near","nearby","nearer","nearest","nearly","necessary","neck","needed","needle","needs","negative","neighbor","neighborhood","nervous","nest","never","new","news","newspaper","next","nice","night","nine","no","nobody","nodded","noise","none","noon","nor","north","nose","not","note","noted","nothing","notice","noun","now","number","numeral","nuts","object","observe","obtain","occasionally","occur","ocean","of","off","offer","office","officer","official","oil","old","older","oldest","on","once","one","only","onto","open","operation","opinion","opportunity","opposite","or","orange","orbit","order","ordinary","organization","organized","origin","original","other","ought","our","ourselves","out","outer","outline","outside","over","own","owner","oxygen","pack","package","page","paid","pain","paint","pair","palace","pale","pan","paper","paragraph","parallel","parent","park","part","particles","particular","particularly","partly","parts","party","pass","passage","past","path","pattern","pay","peace","pen","pencil","people","per","percent","perfect","perfectly","perhaps","period","person","personal","pet","phrase","physical","piano","pick","picture","pictured","pie","piece","pig","pile","pilot","pine","pink","pipe","pitch","place","plain","plan","plane","planet","planned","planning","plant","plastic","plate","plates","play","pleasant","please","pleasure","plenty","plural","plus","pocket","poem","poet","poetry","point","pole","police","policeman","political","pond","pony","pool","poor","popular","population","porch","port","position","positive","possible","possibly","post","pot","potatoes","pound","pour","powder","power","powerful","practical","practice","prepare","present","president","press","pressure","pretty","prevent","previous","price","pride","primitive","principal","principle","printed","private","prize","probably","problem","process","produce","product","production","program","progress","promised","proper","properly","property","protection","proud","prove","provide","public","pull","pupil","pure","purple","purpose","push","put","putting","quarter","queen","question","quick","quickly","quiet","quietly","quite","rabbit","race","radio","railroad","rain","raise","ran","ranch","range","rapidly","rate","rather","raw","rays","reach","read","reader","ready","real","realize","rear","reason","recall","receive","recent","recently","recognize","record","red","refer","refused","region","regular","related","relationship","religious","remain","remarkable","remember","remove","repeat","replace","replied","report","represent","require","research","respect","rest","result","return","review","rhyme","rhythm","rice","rich","ride","riding","right","ring","rise","rising","river","road","roar","rock","rocket","rocky","rod","roll","roof","room","root","rope","rose","rough","round","route","row","rubbed","rubber","rule","ruler","run","running","rush","sad","saddle","safe","safety","said","sail","sale","salmon","salt","same","sand","sang","sat","satellites","satisfied","save","saved","saw","say","scale","scared","scene","school","science","scientific","scientist","score","screen","sea","search","season","seat","second","secret","section","see","seed","seeing","seems","seen","seldom","select","selection","sell","send","sense","sent","sentence","separate","series","serious","serve","service","sets","setting","settle","settlers","seven","several","shade","shadow","shake","shaking","shall","shallow","shape","share","sharp","she","sheep","sheet","shelf","shells","shelter","shine","shinning","ship","shirt","shoe","shoot","shop","shore","short","shorter","shot","should","shoulder","shout","show","shown","shut","sick","sides","sight","sign","signal","silence","silent","silk","silly","silver","similar","simple","simplest","simply","since","sing","single","sink","sister","sit","sitting","situation","six","size","skill","skin","sky","slabs","slave","sleep","slept","slide","slight","slightly","slip","slipped","slope","slow","slowly","small","smaller","smallest","smell","smile","smoke","smooth","snake","snow","so","soap","social","society","soft","softly","soil","solar","sold","soldier","solid","solution","solve","some","somebody","somehow","someone","something","sometime","somewhere","son","song","soon","sort","sound","source","south","southern","space","speak","special","species","specific","speech","speed","spell","spend","spent","spider","spin","spirit","spite","split","spoken","sport","spread","spring","square","stage","stairs","stand","standard","star","stared","start","state","statement","station","stay","steady","steam","steel","steep","stems","step","stepped","stick","stiff","still","stock","stomach","stone","stood","stop","stopped","store","storm","story","stove","straight","strange","stranger","straw","stream","street","strength","stretch","strike","string","strip","strong","stronger","struck","structure","struggle","stuck","student","studied","studying","subject","substance","success","successful","such","sudden","suddenly","sugar","suggest","suit","sum","summer","sun","sunlight","supper","supply","support","suppose","sure","surface","surprise","surrounded","swam","sweet","swept","swim","swimming","swing","swung","syllable","symbol","system","table","tail","take","taken","tales","talk","tall","tank","tape","task","taste","taught","tax","tea","teach","teacher","team","tears","teeth","telephone","television","tell","temperature","ten","tent","term","terrible","test","than","thank","that","thee","them","themselves","then","theory","there","therefore","these","they","thick","thin","thing","think","third","thirty","this","those","thou","though","thought","thousand","thread","three","threw","throat","through","throughout","throw","thrown","thumb","thus","thy","tide","tie","tight","tightly","till","time","tin","tiny","tip","tired","title","to","tobacco","today","together","told","tomorrow","tone","tongue","tonight","too","took","tool","top","topic","torn","total","touch","toward","tower","town","toy","trace","track","trade","traffic","trail","train","transportation","trap","travel","treated","tree","triangle","tribe","trick","tried","trip","troops","tropical","trouble","truck","trunk","truth","try","tube","tune","turn","twelve","twenty","twice","two","type","typical","uncle","under","underline","understanding","unhappy","union","unit","universe","unknown","unless","until","unusual","up","upon","upper","upward","us","use","useful","using","usual","usually","valley","valuable","value","vapor","variety","various","vast","vegetable","verb","vertical","very","vessels","victory","view","village","visit","visitor","voice","volume","vote","vowel","voyage","wagon","wait","walk","wall","want","war","warm","warn","was","wash","waste","watch","water","wave","way","we","weak","wealth","wear","weather","week","weigh","weight","welcome","well","went","were","west","western","wet","whale","what","whatever","wheat","wheel","when","whenever","where","wherever","whether","which","while","whispered","whistle","white","who","whole","whom","whose","why","wide","widely","wife","wild","will","willing","win","wind","window","wing","winter","wire","wise","wish","with","within","without","wolf","women","won","wonder","wonderful","wood","wooden","wool","word","wore","work","worker","world","worried","worry","worse","worth","would","wrapped","write","writer","writing","written","wrong","wrote","yard","year","yellow","yes","yesterday","yet","you","young","younger","your","yourself","youth","zero","zebra","zipper","zoo","zulu"];function n(e){function n(){return e&&e.maxLength>1?function(){for(var t,n=!1;!n;)(t=r()).length<=e.maxLength&&(n=!0);return t}():r()}function r(){return t[a(t.length)]}function a(e){return Math.floor(Math.random()*e)}if(void 0===e)return n();"number"==typeof e&&(e={exactly:e}),e.exactly&&(e.min=e.exactly,e.max=e.exactly),"number"!=typeof e.wordsPerString&&(e.wordsPerString=1),"function"!=typeof e.formatter&&(e.formatter=e=>e),"string"!=typeof e.separator&&(e.separator=" ");for(var o=e.min+a(e.max+1-e.min),i=[],l="",u=0,c=0;c<o*e.wordsPerString;c++)u===e.wordsPerString-1?l+=e.formatter(n(),u):l+=e.formatter(n(),u)+e.separator,u++,(c+1)%e.wordsPerString==0&&(i.push(l),l="",u=0);return"string"==typeof e.join&&(i=i.join(e.join)),i}e.exports=n,n.wordList=t},4448:(e,t,n)=>{"use strict";var r=n(7294),a=n(7418),o=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function v(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(h,e)||!p.call(m,e)&&(d.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,k=60106,C=60107,S=60108,O=60114,P=60109,N=60110,_=60112,T=60113,M=60120,R=60115,A=60116,F=60121,j=60128,L=60129,I=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;x=D("react.element"),k=D("react.portal"),C=D("react.fragment"),S=D("react.strict_mode"),O=D("react.profiler"),P=D("react.provider"),N=D("react.context"),_=D("react.forward_ref"),T=D("react.suspense"),M=D("react.suspense_list"),R=D("react.memo"),A=D("react.lazy"),F=D("react.block"),D("react.scope"),j=D("react.opaque.id"),L=D("react.debug_trace_mode"),I=D("react.offscreen"),z=D("react.legacy_hidden")}var V,H="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=H&&e[H]||e["@@iterator"])?e:null}function B(e){if(void 0===V)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);V=t&&t[1]||""}return"\n"+V+e}var W=!1;function $(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l])return"\n"+a[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function q(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case C:return"Fragment";case k:return"Portal";case O:return"Profiler";case S:return"StrictMode";case T:return"Suspense";case M:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return K(e.type);case F:return K(e._render);case A:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ce(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function se(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ve=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var xe=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Pe=null,Ne=null;function _e(e){if(e=na(e)){if("function"!=typeof Oe)throw Error(i(280));var t=e.stateNode;t&&(t=aa(t),Oe(e.stateNode,e.type,t))}}function Te(e){Pe?Ne?Ne.push(e):Ne=[e]:Pe=e}function Me(){if(Pe){var e=Pe,t=Ne;if(Ne=Pe=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Re(e,t){return e(t)}function Ae(e,t,n,r,a){return e(t,n,r,a)}function Fe(){}var je=Re,Le=!1,Ie=!1;function ze(){null===Pe&&null===Ne||(Fe(),Me())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=aa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ve=!1;if(f)try{var He={};Object.defineProperty(He,"passive",{get:function(){Ve=!0}}),window.addEventListener("test",He,He),window.removeEventListener("test",He,He)}catch(he){Ve=!1}function Ue(e,t,n,r,a,o,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Be=!1,We=null,$e=!1,qe=null,Ke={onError:function(e){Be=!0,We=e}};function Ye(e,t,n,r,a,o,i,l,u){Be=!1,We=null,Ue.apply(Ke,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ge(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Qe(e)!==e)throw Error(i(188))}function Ze(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Xe(a),e;if(o===r)return Xe(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,at=!1,ot=[],it=null,lt=null,ut=null,ct=new Map,st=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":st.delete(t.pointerId)}}function ht(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=pt(t,n,r,a,o),null!==t&&null!==(t=na(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function vt(e){var t=ta(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ge(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=na(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(at=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=na(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==it&&gt(it)&&(it=null),null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),ct.forEach(yt),st.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,bt)))}function Et(e){function t(t){return wt(t,e)}if(0<ot.length){wt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&wt(it,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),ct.forEach(t),st.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},Ct={},St={};function Ot(e){if(Ct[e])return Ct[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return Ct[e]=n[t];return e}f&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Pt=Ot("animationend"),Nt=Ot("animationiteration"),_t=Ot("animationstart"),Tt=Ot("transitionend"),Mt=new Map,Rt=new Map,At=["abort","abort",Pt,"animationEnd",Nt,"animationIteration",_t,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Ft(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Rt.set(r,t),Mt.set(r,a),c(a,[r])}}(0,o.unstable_now)();var jt=8;function Lt(e){if(0!=(1&e))return jt=15,1;if(0!=(2&e))return jt=14,2;if(0!=(4&e))return jt=13,4;var t=24&e;return 0!==t?(jt=12,t):0!=(32&e)?(jt=11,32):0!=(t=192&e)?(jt=10,t):0!=(256&e)?(jt=9,256):0!=(t=3584&e)?(jt=8,t):0!=(4096&e)?(jt=7,4096):0!=(t=4186112&e)?(jt=6,t):0!=(t=62914560&e)?(jt=5,t):67108864&e?(jt=4,67108864):0!=(134217728&e)?(jt=3,134217728):0!=(t=805306368&e)?(jt=2,t):0!=(1073741824&e)?(jt=1,1073741824):(jt=8,e)}function It(e,t){var n=e.pendingLanes;if(0===n)return jt=0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=jt=15;else if(0!=(o=134217727&n)){var u=o&~i;0!==u?(r=Lt(u),a=jt):0!=(l&=o)&&(r=Lt(l),a=jt)}else 0!=(o=n&~i)?(r=Lt(o),a=jt):0!==l&&(r=Lt(l),a=jt);if(0===r)return 0;if(r=n&((0>(r=31-Bt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Lt(t),a<=jt)return t;jt=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Bt(t)),r|=e[n],t&=~a;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Vt(24&~t))?Dt(10,t):e;case 10:return 0===(e=Vt(192&~t))?Dt(8,t):e;case 8:return 0===(e=Vt(3584&~t))&&0===(e=Vt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Vt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Vt(e){return e&-e}function Ht(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Bt(t)]=n}var Bt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2,qt=o.unstable_UserBlockingPriority,Kt=o.unstable_runWithPriority,Yt=!0;function Qt(e,t,n,r){Le||Fe();var a=Xt,o=Le;Le=!0;try{Ae(a,e,t,n,r)}finally{(Le=o)||ze()}}function Gt(e,t,n,r){Kt(qt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var a;if(Yt)if((a=0==(4&t))&&0<ot.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),ot.push(e);else{var o=Zt(e,t,n,r);if(null===o)a&&mt(e,r);else{if(a){if(-1<dt.indexOf(e))return e=pt(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return it=ht(it,e,t,n,r,a),!0;case"dragenter":return lt=ht(lt,e,t,n,r,a),!0;case"mouseover":return ut=ht(ut,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return ct.set(o,ht(ct.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,st.set(o,ht(st.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;mt(e,r)}Fr(e,t,r,null,n)}}}function Zt(e,t,n,r){var a=Se(r);if(null!==(a=ta(a))){var o=Qe(a);if(null===o)a=null;else{var i=o.tag;if(13===i){if(null!==(a=Ge(o)))return a;a=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return Fr(e,t,r,a,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return tn=a.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function ln(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?an:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var un,cn,sn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=a({},fn,{view:0,detail:0}),mn=ln(pn),hn=a({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(un=e.screenX-sn.screenX,cn=e.screenY-sn.screenY):cn=un=0,sn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),vn=ln(hn),gn=ln(a({},hn,{dataTransfer:0})),yn=ln(a({},pn,{relatedTarget:0})),bn=ln(a({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=a({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),En=ln(wn),xn=ln(a({},fn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Pn(){return On}var Nn=a({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),_n=ln(Nn),Tn=ln(a({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Mn=ln(a({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),Rn=ln(a({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=a({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Fn=ln(An),jn=[9,13,27,32],Ln=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var zn=f&&"TextEvent"in window&&!In,Dn=f&&(!Ln||In&&8<In&&11>=In),Vn=String.fromCharCode(32),Hn=!1;function Un(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Kn(e,t,n,r){Te(r),0<(t=Lr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Qn=null;function Gn(e){Nr(e,0)}function Xn(e){if(X(ra(e)))return e}function Zn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Yn&&(Yn.detachEvent("onpropertychange",ar),Qn=Yn=null)}function ar(e){if("value"===e.propertyName&&Xn(Qn)){var t=[];if(Kn(t,Qn,e,Se(e)),e=Gn,Le)e(t);else{Le=!0;try{Re(e,t)}finally{Le=!1,ze()}}}}function or(e,t,n){"focusin"===e?(rr(),Qn=n,(Yn=t).attachEvent("onpropertychange",ar)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn(Qn)}function lr(e,t){if("click"===e)return Xn(t)}function ur(e,t){if("input"===e||"change"===e)return Xn(t)}var cr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function fr(e,t){if(cr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!cr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function mr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?mr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=f&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,wr=null,Er=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Er||null==yr||yr!==Z(r)||(r="selectionStart"in(r=yr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Lr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Ft("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Ft("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Ft(At,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Cr=0;Cr<kr.length;Cr++)Rt.set(kr[Cr],0);s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,l,u,c){if(Ye.apply(this,arguments),Be){if(!Be)throw Error(i(198));var s=We;Be=!1,We=null,$e||($e=!0,qe=s)}}(r,t,void 0,e),e.currentTarget=null}function Nr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Pr(a,l,c),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Pr(a,l,c),o=u}}}if($e)throw e=qe,$e=!1,qe=null,e}function _r(e,t){var n=oa(t),r=e+"__bubble";n.has(r)||(Ar(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Mr(e){e[Tr]||(e[Tr]=!0,l.forEach((function(t){Or.has(t)||Rr(t,!1,e,null),Rr(t,!0,e,null)})))}function Rr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&Or.has(e)){if("scroll"!==e)return;a|=2,o=r}var i=oa(o),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(a|=4),Ar(o,e,a,t),i.add(l))}function Ar(e,t,n,r){var a=Rt.get(t);switch(void 0===a?2:a){case 0:a=Qt;break;case 1:a=Gt;break;default:a=Xt}n=a.bind(null,t,n,e),a=void 0,!Ve||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Fr(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ta(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Ie)return e();Ie=!0;try{je(e,t,n)}finally{Ie=!1,ze()}}((function(){var r=o,a=Se(n),i=[];e:{var l=Mt.get(e);if(void 0!==l){var u=dn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":c="focus",u=yn;break;case"focusout":c="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Mn;break;case Pt:case Nt:case _t:u=bn;break;case Tt:u=Rn;break;case"scroll":u=mn;break;case"wheel":u=Fn;break;case"copy":case"cut":case"paste":u=En;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=De(m,d))&&s.push(jr(m,h,p))),f)break;m=m.return}0<s.length&&(l=new u(l,c,null,n,a),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!ta(c)&&!c[Jr])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?ta(c):null)&&(c!==(f=Qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=vn,h="onMouseLeave",d="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(s=Tn,h="onPointerLeave",d="onPointerEnter",m="pointer"),f=null==u?l:ra(u),p=null==c?l:ra(c),(l=new s(h,m+"leave",u,n,a)).target=f,l.relatedTarget=p,h=null,ta(a)===r&&((s=new s(d,m+"enter",c,n,a)).target=p,s.relatedTarget=f,h=s),f=h,u&&c)e:{for(d=c,m=0,p=s=u;p;p=Ir(p))m++;for(p=0,h=d;h;h=Ir(h))p++;for(;0<m-p;)s=Ir(s),m--;for(;0<p-m;)d=Ir(d),p--;for(;m--;){if(s===d||null!==d&&s===d.alternate)break e;s=Ir(s),d=Ir(d)}s=null}else s=null;null!==u&&zr(i,l,u,s,!1),null!==c&&null!==f&&zr(i,f,c,s,!0)}if("select"===(u=(l=r?ra(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Zn;else if(qn(l))if(Jn)v=ur;else{v=ir;var g=or}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=lr);switch(v&&(v=v(e,r))?Kn(i,v,n,a):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ae(l,"number",l.value)),g=r?ra(r):window,e){case"focusin":(qn(g)||"true"===g.contentEditable)&&(yr=g,br=r,wr=null);break;case"focusout":wr=br=yr=null;break;case"mousedown":Er=!0;break;case"contextmenu":case"mouseup":case"dragend":Er=!1,xr(i,n,a);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":xr(i,n,a)}var y;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Jt=a)?Jt.value:Jt.textContent,Wn=!0)),0<(g=Lr(r,b)).length&&(b=new xn(b,e,null,n,a),i.push({event:b,listeners:g}),(y||null!==(y=Bn(n)))&&(b.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Hn=!0,Vn);case"textInput":return(e=t.data)===Vn&&Hn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Ln&&Un(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Lr(r,"onBeforeInput")).length&&(a=new xn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Nr(i,t)}))}function jr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Lr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=De(e,n))&&r.unshift(jr(e,o,a)),null!=(o=De(e,t))&&r.push(jr(e,o,a))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,a?null!=(u=De(n,o))&&i.unshift(jr(n,u,l)):a||null!=(u=De(n,o))&&i.push(jr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var Vr=null,Hr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function qr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Kr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Yr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0,Gr=Math.random().toString(36).slice(2),Xr="__reactFiber$"+Gr,Zr="__reactProps$"+Gr,Jr="__reactContainer$"+Gr,ea="__reactEvents$"+Gr;function ta(e){var t=e[Xr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Xr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Yr(e);null!==e;){if(n=e[Xr])return n;e=Yr(e)}return t}n=(e=n).parentNode}return null}function na(e){return!(e=e[Xr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ra(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function aa(e){return e[Zr]||null}function oa(e){var t=e[ea];return void 0===t&&(t=e[ea]=new Set),t}var ia=[],la=-1;function ua(e){return{current:e}}function ca(e){0>la||(e.current=ia[la],ia[la]=null,la--)}function sa(e,t){la++,ia[la]=e.current,e.current=t}var fa={},da=ua(fa),pa=ua(!1),ma=fa;function ha(e,t){var n=e.type.contextTypes;if(!n)return fa;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function va(e){return null!=e.childContextTypes}function ga(){ca(pa),ca(da)}function ya(e,t,n){if(da.current!==fa)throw Error(i(168));sa(da,t),sa(pa,n)}function ba(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,K(t)||"Unknown",o));return a({},n,r)}function wa(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fa,ma=da.current,sa(da,e),sa(pa,pa.current),!0}function Ea(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=ba(e,t,ma),r.__reactInternalMemoizedMergedChildContext=e,ca(pa),ca(da),sa(da,e)):ca(pa),sa(pa,n)}var xa=null,ka=null,Ca=o.unstable_runWithPriority,Sa=o.unstable_scheduleCallback,Oa=o.unstable_cancelCallback,Pa=o.unstable_shouldYield,Na=o.unstable_requestPaint,_a=o.unstable_now,Ta=o.unstable_getCurrentPriorityLevel,Ma=o.unstable_ImmediatePriority,Ra=o.unstable_UserBlockingPriority,Aa=o.unstable_NormalPriority,Fa=o.unstable_LowPriority,ja=o.unstable_IdlePriority,La={},Ia=void 0!==Na?Na:function(){},za=null,Da=null,Va=!1,Ha=_a(),Ua=1e4>Ha?_a:function(){return _a()-Ha};function Ba(){switch(Ta()){case Ma:return 99;case Ra:return 98;case Aa:return 97;case Fa:return 96;case ja:return 95;default:throw Error(i(332))}}function Wa(e){switch(e){case 99:return Ma;case 98:return Ra;case 97:return Aa;case 96:return Fa;case 95:return ja;default:throw Error(i(332))}}function $a(e,t){return e=Wa(e),Ca(e,t)}function qa(e,t,n){return e=Wa(e),Sa(e,t,n)}function Ka(){if(null!==Da){var e=Da;Da=null,Oa(e)}Ya()}function Ya(){if(!Va&&null!==za){Va=!0;var e=0;try{var t=za;$a(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),za=null}catch(t){throw null!==za&&(za=za.slice(e+1)),Sa(Ma,Ka),t}finally{Va=!1}}}var Qa=E.ReactCurrentBatchConfig;function Ga(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Xa=ua(null),Za=null,Ja=null,eo=null;function to(){eo=Ja=Za=null}function no(e){var t=Xa.current;ca(Xa),e.type._context._currentValue=t}function ro(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ao(e,t){Za=e,eo=Ja=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Li=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ja){if(null===Za)throw Error(i(308));Ja=t,Za.dependencies={lanes:0,firstContext:t,responders:null}}else Ja=Ja.next=t;return e._currentValue}var io=!1;function lo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function uo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function co(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function po(e,t,n,r){var o=e.updateQueue;io=!1;var i=o.firstBaseUpdate,l=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var c=u,s=c.next;c.next=null,null===l?i=s:l.next=s,l=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=o.baseState,l=0,f=s=c=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){d=m.call(p,d,u);break e}d=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,d,u):m))break e;d=a({},d,u);break e;case 2:io=!0}}null!==i.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,l|=u;if(null===(i=i.next)){if(null===(u=o.shared.pending))break;i=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(c=d),o.baseState=c,o.firstBaseUpdate=s,o.lastBaseUpdate=f,zl|=l,e.lanes=l,e.memoizedState=d}}function mo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var ho=(new r.Component).refs;function vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var go={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=cu(),a=su(e),o=co(r,a);o.payload=t,null!=n&&(o.callback=n),so(e,o),fu(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=cu(),a=su(e),o=co(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),so(e,o),fu(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=cu(),r=su(e),a=co(n,r);a.tag=2,null!=t&&(a.callback=t),so(e,a),fu(e,r,n)}};function yo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(a,o))}function bo(e,t,n){var r=!1,a=fa,o=t.contextType;return"object"==typeof o&&null!==o?o=oo(o):(a=va(t)?ma:da.current,o=(r=null!=(r=t.contextTypes))?ha(e,a):fa),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=go,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function wo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&go.enqueueReplaceState(t,t.state,null)}function Eo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ho,lo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=oo(o):(o=va(t)?ma:da.current,a.context=ha(e,o)),po(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(vo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&go.enqueueReplaceState(a,a.state,null),po(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var xo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Co(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function So(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Bu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Ku(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=ko(e,t,n),r.return=e,r):((r=Wu(n.type,n.key,n.props,null,e.mode,r)).ref=ko(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=$u(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ku(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Wu(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case k:return(t=Yu(t,e.mode,n)).return=e,t}if(xo(t)||U(t))return(t=$u(t,e.mode,n,null)).return=e,t;Co(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===a?n.type===C?f(e,t,n.props.children,r,a):c(e,t,n,r):null;case k:return n.key===a?s(e,t,n,r):null}if(xo(n)||U(n))return null!==a?null:f(e,t,n,r,null);Co(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===C?f(t,e,r.props.children,a,r.key):c(t,e,r,a);case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(xo(r)||U(r))return f(t,e=e.get(n)||null,r,a,null);Co(t,r)}return null}function h(a,i,l,u){for(var c=null,s=null,f=i,h=i=0,v=null;null!==f&&h<l.length;h++){f.index>h?(v=f,f=null):v=f.sibling;var g=p(a,f,l[h],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(a,f),i=o(g,i,h),null===s?c=g:s.sibling=g,s=g,f=v}if(h===l.length)return n(a,f),c;if(null===f){for(;h<l.length;h++)null!==(f=d(a,l[h],u))&&(i=o(f,i,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(a,f);h<l.length;h++)null!==(v=m(f,a,h,l[h],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?h:v.key),i=o(v,i,h),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(a,e)})),c}function v(a,l,u,c){var s=U(u);if("function"!=typeof s)throw Error(i(150));if(null==(u=s.call(u)))throw Error(i(151));for(var f=s=null,h=l,v=l=0,g=null,y=u.next();null!==h&&!y.done;v++,y=u.next()){h.index>v?(g=h,h=null):g=h.sibling;var b=p(a,h,y.value,c);if(null===b){null===h&&(h=g);break}e&&h&&null===b.alternate&&t(a,h),l=o(b,l,v),null===f?s=b:f.sibling=b,f=b,h=g}if(y.done)return n(a,h),s;if(null===h){for(;!y.done;v++,y=u.next())null!==(y=d(a,y.value,c))&&(l=o(y,l,v),null===f?s=y:f.sibling=y,f=y);return s}for(h=r(a,h);!y.done;v++,y=u.next())null!==(y=m(h,a,v,y.value,c))&&(e&&null!==y.alternate&&h.delete(null===y.key?v:y.key),l=o(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&h.forEach((function(e){return t(a,e)})),s}return function(e,r,o,u){var c="object"==typeof o&&null!==o&&o.type===C&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case x:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag){if(o.type===C){n(e,c.sibling),(r=a(c,o.props.children)).return=e,e=r;break e}}else if(c.elementType===o.type){n(e,c.sibling),(r=a(c,o.props)).ref=ko(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===C?((r=$u(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Wu(o.type,o.key,o.props,null,e.mode,u)).ref=ko(e,r,o),u.return=e,e=u)}return l(e);case k:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yu(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Ku(o,e.mode,u)).return=e,e=r),l(e);if(xo(o))return h(e,r,o,u);if(U(o))return v(e,r,o,u);if(s&&Co(e,o),void 0===o&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,K(e.type)||"Component"))}return n(e,r)}}var Oo=So(!0),Po=So(!1),No={},_o=ua(No),To=ua(No),Mo=ua(No);function Ro(e){if(e===No)throw Error(i(174));return e}function Ao(e,t){switch(sa(Mo,t),sa(To,e),sa(_o,No),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ca(_o),sa(_o,t)}function Fo(){ca(_o),ca(To),ca(Mo)}function jo(e){Ro(Mo.current);var t=Ro(_o.current),n=pe(t,e.type);t!==n&&(sa(To,e),sa(_o,n))}function Lo(e){To.current===e&&(ca(_o),ca(To))}var Io=ua(0);function zo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Do=null,Vo=null,Ho=!1;function Uo(e,t){var n=Hu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Bo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wo(e){if(Ho){var t=Vo;if(t){var n=t;if(!Bo(e,t)){if(!(t=Kr(n.nextSibling))||!Bo(e,t))return e.flags=-1025&e.flags|2,Ho=!1,void(Do=e);Uo(Do,n)}Do=e,Vo=Kr(t.firstChild)}else e.flags=-1025&e.flags|2,Ho=!1,Do=e}}function $o(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Do=e}function qo(e){if(e!==Do)return!1;if(!Ho)return $o(e),Ho=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Br(t,e.memoizedProps))for(t=Vo;t;)Uo(e,t),t=Kr(t.nextSibling);if($o(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Vo=Kr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Vo=null}}else Vo=Do?Kr(e.stateNode.nextSibling):null;return!0}function Ko(){Vo=Do=null,Ho=!1}var Yo=[];function Qo(){for(var e=0;e<Yo.length;e++)Yo[e]._workInProgressVersionPrimary=null;Yo.length=0}var Go=E.ReactCurrentDispatcher,Xo=E.ReactCurrentBatchConfig,Zo=0,Jo=null,ei=null,ti=null,ni=!1,ri=!1;function ai(){throw Error(i(321))}function oi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!cr(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,a,o){if(Zo=o,Jo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Go.current=null===e||null===e.memoizedState?Ri:Ai,e=n(r,a),ri){o=0;do{if(ri=!1,!(25>o))throw Error(i(301));o+=1,ti=ei=null,t.updateQueue=null,Go.current=Fi,e=n(r,a)}while(ri)}if(Go.current=Mi,t=null!==ei&&null!==ei.next,Zo=0,ti=ei=Jo=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Jo.memoizedState=ti=e:ti=ti.next=e,ti}function ui(){if(null===ei){var e=Jo.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Jo.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Jo.memoizedState=ti=e:ti=ti.next=e}return ti}function ci(e,t){return"function"==typeof t?t(e):t}function si(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=l=o=null,c=a;do{var s=c.lane;if((Zo&s)===s)null!==u&&(u=u.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===u?(l=u=f,o=r):u=u.next=f,Jo.lanes|=s,zl|=s}c=c.next}while(null!==c&&c!==a);null===u?o=r:u.next=l,cr(r,t.memoizedState)||(Li=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fi(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);cr(o,t.memoizedState)||(Li=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function di(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Zo&e)===e)&&(t._workInProgressVersionPrimary=r,Yo.push(t))),e)return n(t._source);throw Yo.push(t),Error(i(350))}function pi(e,t,n,r){var a=Tl;if(null===a)throw Error(i(349));var o=t._getVersion,l=o(t._source),u=Go.current,c=u.useState((function(){return di(a,t,n)})),s=c[1],f=c[0];c=ti;var d=e.memoizedState,p=d.refs,m=p.getSnapshot,h=d.source;d=d.subscribe;var v=Jo;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=o(t._source);if(!cr(l,e)){e=n(t._source),cr(f,e)||(s(e),e=su(v),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,i=e;0<i;){var u=31-Bt(i),c=1<<u;r[u]|=e,i&=~c}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=su(v);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),cr(m,n)&&cr(h,t)&&cr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ci,lastRenderedState:f}).dispatch=s=Ti.bind(null,Jo,e),c.queue=e,c.baseQueue=null,f=di(a,t,n),c.memoizedState=c.baseState=f),f}function mi(e,t,n){return pi(ui(),e,t,n)}function hi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ci,lastRenderedState:e}).dispatch=Ti.bind(null,Jo,e),[t.memoizedState,e]}function vi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Jo.updateQueue)?(t={lastEffect:null},Jo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function gi(e){return e={current:e},li().memoizedState=e}function yi(){return ui().memoizedState}function bi(e,t,n,r){var a=li();Jo.flags|=e,a.memoizedState=vi(1|t,n,void 0,void 0===r?null:r)}function wi(e,t,n,r){var a=ui();r=void 0===r?null:r;var o=void 0;if(null!==ei){var i=ei.memoizedState;if(o=i.destroy,null!==r&&oi(r,i.deps))return void vi(t,n,o,r)}Jo.flags|=e,a.memoizedState=vi(1|t,n,o,r)}function Ei(e,t){return bi(516,4,e,t)}function xi(e,t){return wi(516,4,e,t)}function ki(e,t){return wi(4,2,e,t)}function Ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,2,Ci.bind(null,t,e),n)}function Oi(){}function Pi(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ni(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _i(e,t){var n=Ba();$a(98>n?98:n,(function(){e(!0)})),$a(97<n?97:n,(function(){var n=Xo.transition;Xo.transition=1;try{e(!1),t()}finally{Xo.transition=n}}))}function Ti(e,t,n){var r=cu(),a=su(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Jo||null!==i&&i===Jo)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(o.eagerReducer=i,o.eagerState=u,cr(u,l))return}catch(e){}fu(e,a,r)}}var Mi={readContext:oo,useCallback:ai,useContext:ai,useEffect:ai,useImperativeHandle:ai,useLayoutEffect:ai,useMemo:ai,useReducer:ai,useRef:ai,useState:ai,useDebugValue:ai,useDeferredValue:ai,useTransition:ai,useMutableSource:ai,useOpaqueIdentifier:ai,unstable_isNewReconciler:!1},Ri={readContext:oo,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:oo,useEffect:Ei,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,Ci.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ti.bind(null,Jo,e),[r.memoizedState,e]},useRef:gi,useState:hi,useDebugValue:Oi,useDeferredValue:function(e){var t=hi(e),n=t[0],r=t[1];return Ei((function(){var t=Xo.transition;Xo.transition=1;try{r(e)}finally{Xo.transition=t}}),[e]),n},useTransition:function(){var e=hi(!1),t=e[0];return gi(e=_i.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ho){var e=!1,t=function(e){return{$$typeof:j,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(i(355))})),n=hi(t)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,vi(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return hi(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},Ai={readContext:oo,useCallback:Pi,useContext:oo,useEffect:xi,useImperativeHandle:Si,useLayoutEffect:ki,useMemo:Ni,useReducer:si,useRef:yi,useState:function(){return si(ci)},useDebugValue:Oi,useDeferredValue:function(e){var t=si(ci),n=t[0],r=t[1];return xi((function(){var t=Xo.transition;Xo.transition=1;try{r(e)}finally{Xo.transition=t}}),[e]),n},useTransition:function(){var e=si(ci)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return si(ci)[0]},unstable_isNewReconciler:!1},Fi={readContext:oo,useCallback:Pi,useContext:oo,useEffect:xi,useImperativeHandle:Si,useLayoutEffect:ki,useMemo:Ni,useReducer:fi,useRef:yi,useState:function(){return fi(ci)},useDebugValue:Oi,useDeferredValue:function(e){var t=fi(ci),n=t[0],r=t[1];return xi((function(){var t=Xo.transition;Xo.transition=1;try{r(e)}finally{Xo.transition=t}}),[e]),n},useTransition:function(){var e=fi(ci)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return fi(ci)[0]},unstable_isNewReconciler:!1},ji=E.ReactCurrentOwner,Li=!1;function Ii(e,t,n,r){t.child=null===e?Po(t,null,n,r):Oo(t,e.child,n,r)}function zi(e,t,n,r,a){n=n.render;var o=t.ref;return ao(t,a),r=ii(e,t,n,r,o,a),null===e||Li?(t.flags|=1,Ii(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,nl(e,t,a))}function Di(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Uu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Vi(e,t,i,r,a,o))}return i=e.child,0==(a&o)&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:fr)(a,r)&&e.ref===t.ref)?nl(e,t,o):(t.flags|=1,(e=Bu(i,r)).ref=t.ref,e.return=t,t.child=e)}function Vi(e,t,n,r,a,o){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Li=!1,0==(o&a))return t.lanes=e.lanes,nl(e,t,o);0!=(16384&e.flags)&&(Li=!0)}return Bi(e,t,n,r,o)}function Hi(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Ii(e,t,a,n),t.child}function Ui(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Bi(e,t,n,r,a){var o=va(n)?ma:da.current;return o=ha(t,o),ao(t,a),n=ii(e,t,n,r,o,a),null===e||Li?(t.flags|=1,Ii(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,nl(e,t,a))}function Wi(e,t,n,r,a){if(va(n)){var o=!0;wa(t)}else o=!1;if(ao(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bo(t,n,r),Eo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?oo(c):ha(t,c=va(n)?ma:da.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&wo(t,i,r,c),io=!1;var d=t.memoizedState;i.state=d,po(t,r,i,a),u=t.memoizedState,l!==r||d!==u||pa.current||io?("function"==typeof s&&(vo(t,n,s,r),u=t.memoizedState),(l=io||yo(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,uo(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:Ga(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?oo(u):ha(t,u=va(n)?ma:da.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&wo(t,i,r,u),io=!1,d=t.memoizedState,i.state=d,po(t,r,i,a);var m=t.memoizedState;l!==f||d!==m||pa.current||io?("function"==typeof p&&(vo(t,n,p,r),m=t.memoizedState),(c=io||yo(t,n,c,r,d,m,u))?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return $i(e,t,n,r,o,a)}function $i(e,t,n,r,a,o){Ui(e,t);var i=0!=(64&t.flags);if(!r&&!i)return a&&Ea(t,n,!1),nl(e,t,o);r=t.stateNode,ji.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Oo(t,e.child,null,o),t.child=Oo(t,null,l,o)):Ii(e,t,l,o),t.memoizedState=r.state,a&&Ea(t,n,!0),t.child}function qi(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Ao(e,t.containerInfo)}var Ki,Yi,Qi,Gi={dehydrated:null,retryLane:0};function Xi(e,t,n){var r,a=t.pendingProps,o=Io.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),sa(Io,1&o),null===e?(void 0!==a.fallback&&Wo(t),e=a.children,o=a.fallback,i?(e=Zi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Gi,e):"number"==typeof a.unstable_expectedLoadTime?(e=Zi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Gi,t.lanes=33554432,e):((n=qu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(a=function(e,t,n,r,a){var o=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&o)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Bu(i,l),null!==e?r=Bu(e,r):(r=$u(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),i=t.child,o=e.child.memoizedState,i.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Gi,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Bu(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Zi(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=qu(t,a,0,null),n=$u(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ro(e.return,t)}function el(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function tl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ii(e,t,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(sa(Io,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===zo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),el(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===zo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}el(t,!0,n,null,o,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Bu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!Ho)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function al(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return va(t.type)&&ga(),null;case 3:return Fo(),ca(pa),ca(da),Qo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(qo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Lo(t);var o=Ro(Mo.current);if(n=t.type,null!==e&&null!=t.stateNode)Yi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ro(_o.current),qo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Xr]=t,r[Zr]=l,n){case"dialog":_r("cancel",r),_r("close",r);break;case"iframe":case"object":case"embed":_r("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)_r(Sr[e],r);break;case"source":_r("error",r);break;case"img":case"image":case"link":_r("error",r),_r("load",r);break;case"details":_r("toggle",r);break;case"input":ee(r,l),_r("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},_r("invalid",r);break;case"textarea":ue(r,l),_r("invalid",r)}for(var c in ke(n,l),e=null,l)l.hasOwnProperty(c)&&(o=l[c],"children"===c?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):u.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&_r("scroll",r));switch(n){case"input":G(r),re(r,l,!0);break;case"textarea":G(r),se(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Xr]=t,e[Zr]=r,Ki(e,t),t.stateNode=e,c=Ce(n,r),n){case"dialog":_r("cancel",e),_r("close",e),o=r;break;case"iframe":case"object":case"embed":_r("load",e),o=r;break;case"video":case"audio":for(o=0;o<Sr.length;o++)_r(Sr[o],e);o=r;break;case"source":_r("error",e),o=r;break;case"img":case"image":case"link":_r("error",e),_r("load",e),o=r;break;case"details":_r("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),_r("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),_r("invalid",e);break;case"textarea":ue(e,r),o=le(e,r),_r("invalid",e);break;default:o=r}ke(n,o);var s=o;for(l in s)if(s.hasOwnProperty(l)){var f=s[l];"style"===l?Ee(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&_r("scroll",e):null!=f&&w(e,l,f,c))}switch(n){case"input":G(e),re(e,r,!1);break;case"textarea":G(e),se(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Dr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Qi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ro(Mo.current),Ro(_o.current),qo(t)?(r=t.stateNode,n=t.memoizedProps,r[Xr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Xr]=t,t.stateNode=r)}return null;case 13:return ca(Io),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&qo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===Tl||0==(134217727&zl)&&0==(134217727&Dl)||hu(Tl,Rl))),(r||n)&&(t.flags|=4),null);case 4:return Fo(),null===e&&Mr(t.stateNode.containerInfo),null;case 10:return no(t),null;case 19:if(ca(Io),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(c=r.rendering))if(l)rl(r,!1);else{if(0!==jl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=zo(e))){for(t.flags|=64,rl(r,!1),null!==(l=c.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(c=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=c.childLanes,l.lanes=c.lanes,l.child=c.child,l.memoizedProps=c.memoizedProps,l.memoizedState=c.memoizedState,l.updateQueue=c.updateQueue,l.type=c.type,e=c.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return sa(Io,1&Io.current|2),t.child}e=e.sibling}null!==r.tail&&Ua()>Bl&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=zo(c))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Ho)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ua()-r.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ua(),n.sibling=null,t=Io.current,sa(Io,l?1&t|2:1&t),n):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ol(e){switch(e.tag){case 1:va(e.type)&&ga();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Fo(),ca(pa),ca(da),Qo(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Lo(e),null;case 13:return ca(Io),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ca(Io),null;case 4:return Fo(),null;case 10:return no(e),null;case 23:case 24:return wu(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ki=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Yi=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Ro(_o.current);var i,l=null;switch(n){case"input":o=J(e,o),r=J(e,r),l=[];break;case"option":o=oe(e,o),r=oe(e,r),l=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":o=le(e,o),r=le(e,r),l=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in ke(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var c=o[f];for(i in c)c.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var s=r[f];if(c=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&s!==c&&(null!=s||null!=c))if("style"===f)if(c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(l||(l=[]),l.push(f,n)),n=s;else"dangerouslySetInnerHTML"===f?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(l=l||[]).push(f,s)):"children"===f?"string"!=typeof s&&"number"!=typeof s||(l=l||[]).push(f,""+s):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=s&&"onScroll"===f&&_r("scroll",e),l||c===s||(l=[])):"object"==typeof s&&null!==s&&s.$$typeof===j?s.toString():(l=l||[]).push(f,s))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Qi=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function cl(e,t,n){(n=co(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Kl||(Kl=!0,Yl=r),ll(0,t)},n}function sl(e,t,n){(n=co(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return ll(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ql?Ql=new Set([this]):Ql.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fl="function"==typeof WeakSet?WeakSet:Set;function dl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Iu(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ga(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&qr(t.stateNode.containerInfo))}throw Error(i(163))}function ml(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Fu(n,e),Au(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ga(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&mo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}mo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Et(n)))))}throw Error(i(163))}function hl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=we("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vl(e,t){if(ka&&"function"==typeof ka.onCommitFiberUnmount)try{ka.onCommitFiberUnmount(xa,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Fu(t,n);else{r=t;try{a()}catch(e){Iu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(dl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Iu(t,e)}break;case 5:dl(t);break;case 4:xl(e,t)}}function gl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?wl(e,n,t):El(e,n,t)}function wl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function El(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(El(e,t,n),e=e.sibling;null!==e;)El(e,t,n),e=e.sibling}function xl(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(i(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var l=e,u=a,c=u;;)if(vl(l,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===u)break e;for(;null===c.sibling;){if(null===c.return||c.return===u)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(l=n,u=a.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(vl(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function kl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Zr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,a),t=Ce(e,r),a=0;a<o.length;a+=2){var l=o[a],u=o[a+1];"style"===l?Ee(n,u):"dangerouslySetInnerHTML"===l?ve(n,u):"children"===l?ge(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ie(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Et(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ul=Ua(),hl(t.child,!0)),void Cl(t);case 19:return void Cl(t);case 23:case 24:return void hl(t,null!==t.memoizedState)}throw Error(i(163))}function Cl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fl),t.forEach((function(t){var r=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ol=Math.ceil,Pl=E.ReactCurrentDispatcher,Nl=E.ReactCurrentOwner,_l=0,Tl=null,Ml=null,Rl=0,Al=0,Fl=ua(0),jl=0,Ll=null,Il=0,zl=0,Dl=0,Vl=0,Hl=null,Ul=0,Bl=1/0;function Wl(){Bl=Ua()+500}var $l,ql=null,Kl=!1,Yl=null,Ql=null,Gl=!1,Xl=null,Zl=90,Jl=[],eu=[],tu=null,nu=0,ru=null,au=-1,ou=0,iu=0,lu=null,uu=!1;function cu(){return 0!=(48&_l)?Ua():-1!==au?au:au=Ua()}function su(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ba()?1:2;if(0===ou&&(ou=Il),0!==Qa.transition){0!==iu&&(iu=null!==Hl?Hl.pendingLanes:0),e=ou;var t=4186112&~iu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ba(),e=Dt(0!=(4&_l)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ou)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(i(185));if(null===(e=du(e,t)))return null;Ut(e,t,n),e===Tl&&(Dl|=t,4===jl&&hu(e,Rl));var r=Ba();1===t?0!=(8&_l)&&0==(48&_l)?vu(e):(pu(e,n),0===_l&&(Wl(),Ka())):(0==(4&_l)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),Hl=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Bt(l),c=1<<u,s=o[u];if(-1===s){if(0==(c&r)||0!=(c&a)){s=t,Lt(c);var f=jt;o[u]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);l&=~c}if(r=It(e,e===Tl?Rl:0),t=jt,0===r)null!==n&&(n!==La&&Oa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==La&&Oa(n)}15===t?(n=vu.bind(null,e),null===za?(za=[n],Da=Sa(Ma,Ya)):za.push(n),n=La):14===t?n=qa(99,vu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=qa(n,mu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function mu(e){if(au=-1,iu=ou=0,0!=(48&_l))throw Error(i(327));var t=e.callbackNode;if(Ru()&&e.callbackNode!==t)return null;var n=It(e,e===Tl?Rl:0);if(0===n)return null;var r=n,a=_l;_l|=16;var o=ku();for(Tl===e&&Rl===r||(Wl(),Eu(e,r));;)try{Ou();break}catch(t){xu(e,t)}if(to(),Pl.current=o,_l=a,null!==Ml?r=0:(Tl=null,Rl=0,r=jl),0!=(Il&Dl))Eu(e,0);else if(0!==r){if(2===r&&(_l|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(n=zt(e))&&(r=Cu(e,n))),1===r)throw t=Ll,Eu(e,0),hu(e,n),pu(e,Ua()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:_u(e);break;case 3:if(hu(e,n),(62914560&n)===n&&10<(r=Ul+500-Ua())){if(0!==It(e,0))break;if(((a=e.suspendedLanes)&n)!==n){cu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Wr(_u.bind(null,e),r);break}_u(e);break;case 4:if(hu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Bt(n);o=1<<l,(l=r[l])>a&&(a=l),n&=~o}if(n=a,10<(n=(120>(n=Ua()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ol(n/1960))-n)){e.timeoutHandle=Wr(_u.bind(null,e),n);break}_u(e);break;default:throw Error(i(329))}}return pu(e,Ua()),e.callbackNode===t?mu.bind(null,e):null}function hu(e,t){for(t&=~Vl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Bt(t),r=1<<n;e[n]=-1,t&=~r}}function vu(e){if(0!=(48&_l))throw Error(i(327));if(Ru(),e===Tl&&0!=(e.expiredLanes&Rl)){var t=Rl,n=Cu(e,t);0!=(Il&Dl)&&(n=Cu(e,t=It(e,t)))}else n=Cu(e,t=It(e,0));if(0!==e.tag&&2===n&&(_l|=64,e.hydrate&&(e.hydrate=!1,qr(e.containerInfo)),0!==(t=zt(e))&&(n=Cu(e,t))),1===n)throw n=Ll,Eu(e,0),hu(e,t),pu(e,Ua()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,_u(e),pu(e,Ua()),null}function gu(e,t){var n=_l;_l|=1;try{return e(t)}finally{0===(_l=n)&&(Wl(),Ka())}}function yu(e,t){var n=_l;_l&=-2,_l|=8;try{return e(t)}finally{0===(_l=n)&&(Wl(),Ka())}}function bu(e,t){sa(Fl,Al),Al|=t,Il|=t}function wu(){Al=Fl.current,ca(Fl)}function Eu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==Ml)for(n=Ml.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ga();break;case 3:Fo(),ca(pa),ca(da),Qo();break;case 5:Lo(r);break;case 4:Fo();break;case 13:case 19:ca(Io);break;case 10:no(r);break;case 23:case 24:wu()}n=n.return}Tl=e,Ml=Bu(e.current,null),Rl=Al=Il=t,jl=0,Ll=null,Vl=Dl=zl=0}function xu(e,t){for(;;){var n=Ml;try{if(to(),Go.current=Mi,ni){for(var r=Jo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ni=!1}if(Zo=0,ti=ei=Jo=null,ri=!1,Nl.current=null,null===n||null===n.return){jl=1,Ll=t,Ml=null;break}e:{var o=e,i=n.return,l=n,u=t;if(t=Rl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u;if(0==(2&l.mode)){var s=l.alternate;s?(l.updateQueue=s.updateQueue,l.memoizedState=s.memoizedState,l.lanes=s.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Io.current),d=i;do{var p;if(p=13===d.tag){var m=d.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=d.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var g=new Set;g.add(c),d.updateQueue=g}else v.add(c);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=co(-1,1);y.tag=2,so(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new ul,u=new Set,b.set(c,u)):void 0===(u=b.get(c))&&(u=new Set,b.set(c,u)),!u.has(l)){u.add(l);var w=zu.bind(null,o,c,l);c.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((K(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=il(u,l),d=i;do{switch(d.tag){case 3:o=u,d.flags|=4096,t&=-t,d.lanes|=t,fo(d,cl(0,o,t));break e;case 1:o=u;var E=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof E.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Ql||!Ql.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,fo(d,sl(d,o,t));break e}}d=d.return}while(null!==d)}Nu(n)}catch(e){t=e,Ml===n&&null!==n&&(Ml=n=n.return);continue}break}}function ku(){var e=Pl.current;return Pl.current=Mi,null===e?Mi:e}function Cu(e,t){var n=_l;_l|=16;var r=ku();for(Tl===e&&Rl===t||Eu(e,t);;)try{Su();break}catch(t){xu(e,t)}if(to(),_l=n,Pl.current=r,null!==Ml)throw Error(i(261));return Tl=null,Rl=0,jl}function Su(){for(;null!==Ml;)Pu(Ml)}function Ou(){for(;null!==Ml&&!Pa();)Pu(Ml)}function Pu(e){var t=$l(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Nu(e):Ml=t,Nl.current=null}function Nu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=al(n,t,Al)))return void(Ml=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Al)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ol(t)))return n.flags&=2047,void(Ml=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ml=t);Ml=t=e}while(null!==t);0===jl&&(jl=5)}function _u(e){var t=Ba();return $a(99,Tu.bind(null,e,t)),null}function Tu(e,t){do{Ru()}while(null!==Xl);if(0!=(48&_l))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<o;){var c=31-Bt(o),s=1<<c;a[c]=0,l[c]=-1,u[c]=-1,o&=~s}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Tl&&(Ml=Tl=null,Rl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=_l,_l|=32,Nl.current=null,Vr=Yt,vr(l=hr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(s=u.getSelection&&u.getSelection())&&0!==s.rangeCount){u=s.anchorNode,o=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,m=0,h=0,v=l,g=null;t:for(;;){for(var y;v!==u||0!==o&&3!==v.nodeType||(d=f+o),v!==c||0!==s&&3!==v.nodeType||(p=f+s),3===v.nodeType&&(f+=v.nodeValue.length),null!==(y=v.firstChild);)g=v,v=y;for(;;){if(v===l)break t;if(g===u&&++m===o&&(d=f),g===c&&++h===s&&(p=f),null!==(y=v.nextSibling))break;g=(v=g).parentNode}v=y}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Hr={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,ql=r;do{try{Mu()}catch(e){if(null===ql)throw Error(i(330));Iu(ql,e),ql=ql.nextEffect}}while(null!==ql);lu=null,ql=r;do{try{for(l=e;null!==ql;){var b=ql.flags;if(16&b&&ge(ql.stateNode,""),128&b){var w=ql.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&b){case 2:bl(ql),ql.flags&=-3;break;case 6:bl(ql),ql.flags&=-3,kl(ql.alternate,ql);break;case 1024:ql.flags&=-1025;break;case 1028:ql.flags&=-1025,kl(ql.alternate,ql);break;case 4:kl(ql.alternate,ql);break;case 8:xl(l,u=ql);var x=u.alternate;gl(u),null!==x&&gl(x)}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(i(330));Iu(ql,e),ql=ql.nextEffect}}while(null!==ql);if(E=Hr,w=hr(),b=E.focusedElem,l=E.selectionRange,w!==b&&b&&b.ownerDocument&&mr(b.ownerDocument.documentElement,b)){null!==l&&vr(b)&&(w=l.start,void 0===(E=l.end)&&(E=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(E,b.value.length)):(E=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),u=b.textContent.length,x=Math.min(l.start,u),l=void 0===l.end?x:Math.min(l.end,u),!E.extend&&x>l&&(u=l,l=x,x=u),u=pr(b,x),o=pr(b,l),u&&o&&(1!==E.rangeCount||E.anchorNode!==u.node||E.anchorOffset!==u.offset||E.focusNode!==o.node||E.focusOffset!==o.offset)&&((w=w.createRange()).setStart(u.node,u.offset),E.removeAllRanges(),x>l?(E.addRange(w),E.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),E.addRange(w))))),w=[];for(E=b;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(E=w[b]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Yt=!!Vr,Hr=Vr=null,e.current=n,ql=r;do{try{for(b=e;null!==ql;){var k=ql.flags;if(36&k&&ml(b,ql.alternate,ql),128&k){w=void 0;var C=ql.ref;if(null!==C){var S=ql.stateNode;ql.tag,w=S,"function"==typeof C?C(w):C.current=w}}ql=ql.nextEffect}}catch(e){if(null===ql)throw Error(i(330));Iu(ql,e),ql=ql.nextEffect}}while(null!==ql);ql=null,Ia(),_l=a}else e.current=n;if(Gl)Gl=!1,Xl=e,Zl=t;else for(ql=r;null!==ql;)t=ql.nextEffect,ql.nextEffect=null,8&ql.flags&&((k=ql).sibling=null,k.stateNode=null),ql=t;if(0===(r=e.pendingLanes)&&(Ql=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,ka&&"function"==typeof ka.onCommitFiberRoot)try{ka.onCommitFiberRoot(xa,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,Ua()),Kl)throw Kl=!1,e=Yl,Yl=null,e;return 0!=(8&_l)||Ka(),null}function Mu(){for(;null!==ql;){var e=ql.alternate;uu||null===lu||(0!=(8&ql.flags)?Je(ql,lu)&&(uu=!0):13===ql.tag&&Sl(e,ql)&&Je(ql,lu)&&(uu=!0));var t=ql.flags;0!=(256&t)&&pl(e,ql),0==(512&t)||Gl||(Gl=!0,qa(97,(function(){return Ru(),null}))),ql=ql.nextEffect}}function Ru(){if(90!==Zl){var e=97<Zl?97:Zl;return Zl=90,$a(e,ju)}return!1}function Au(e,t){Jl.push(t,e),Gl||(Gl=!0,qa(97,(function(){return Ru(),null})))}function Fu(e,t){eu.push(t,e),Gl||(Gl=!0,qa(97,(function(){return Ru(),null})))}function ju(){if(null===Xl)return!1;var e=Xl;if(Xl=null,0!=(48&_l))throw Error(i(331));var t=_l;_l|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===o)throw Error(i(330));Iu(o,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===o)throw Error(i(330));Iu(o,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return _l=t,Ka(),!0}function Lu(e,t,n){so(e,t=cl(0,t=il(n,t),1)),t=cu(),null!==(e=du(e,1))&&(Ut(e,1,t),pu(e,t))}function Iu(e,t){if(3===e.tag)Lu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Lu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r))){var a=sl(n,e=il(t,e),1);if(so(n,a),a=cu(),null!==(n=du(n,1)))Ut(n,1,a),pu(n,a);else if("function"==typeof r.componentDidCatch&&(null===Ql||!Ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=cu(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Rl&n)===n&&(4===jl||3===jl&&(62914560&Rl)===Rl&&500>Ua()-Ul?Eu(e,0):Vl|=n),pu(e,t)}function Du(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ba()?1:2:(0===ou&&(ou=Il),0===(t=Vt(62914560&~ou))&&(t=4194304))),n=cu(),null!==(e=du(e,t))&&(Ut(e,t,n),pu(e,n))}function Vu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Hu(e,t,n,r){return new Vu(e,t,n,r)}function Uu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bu(e,t){var n=e.alternate;return null===n?((n=Hu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wu(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Uu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case C:return $u(n.children,a,o,t);case L:l=8,a|=16;break;case S:l=8,a|=1;break;case O:return(e=Hu(12,n,t,8|a)).elementType=O,e.type=O,e.lanes=o,e;case T:return(e=Hu(13,n,t,a)).type=T,e.elementType=T,e.lanes=o,e;case M:return(e=Hu(19,n,t,a)).elementType=M,e.lanes=o,e;case I:return qu(n,a,o,t);case z:return(e=Hu(24,n,t,a)).elementType=z,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case N:l=9;break e;case _:l=11;break e;case R:l=14;break e;case A:l=16,r=null;break e;case F:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Hu(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function $u(e,t,n,r){return(e=Hu(7,e,r,t)).lanes=n,e}function qu(e,t,n,r){return(e=Hu(23,e,r,t)).elementType=I,e.lanes=n,e}function Ku(e,t,n){return(e=Hu(6,e,null,t)).lanes=n,e}function Yu(e,t,n){return(t=Hu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ht(0),this.expirationTimes=Ht(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ht(0),this.mutableSourceEagerHydrationData=null}function Gu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Xu(e,t,n,r){var a=t.current,o=cu(),l=su(a);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(va(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var c=n.type;if(va(c)){n=ba(n,c,u);break e}}n=u}else n=fa;return null===t.context?t.context=n:t.pendingContext=n,(t=co(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),so(a,t),fu(a,l,o),l}function Zu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ec(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function tc(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Qu(e,t,null!=n&&!0===n.hydrate),t=Hu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,lo(t),e[Jr]=n.current,Mr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rc(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Zu(i);l.call(e)}}Xu(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Zu(i);u.call(e)}}yu((function(){Xu(t,i,e,a)}))}return Zu(i)}function ac(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(i(200));return Gu(e,t,null,n)}$l=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||pa.current)Li=!0;else{if(0==(n&r)){switch(Li=!1,t.tag){case 3:qi(t),Ko();break;case 5:jo(t);break;case 1:va(t.type)&&wa(t);break;case 4:Ao(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;sa(Xa,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Xi(e,t,n):(sa(Io,1&Io.current),null!==(t=nl(e,t,n))?t.sibling:null);sa(Io,1&Io.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),sa(Io,Io.current),r)break;return null;case 23:case 24:return t.lanes=0,Hi(e,t,n)}return nl(e,t,n)}Li=0!=(16384&e.flags)}else Li=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=ha(t,da.current),ao(t,n),a=ii(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,va(r)){var o=!0;wa(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,lo(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&vo(t,r,l,e),a.updater=go,t.stateNode=a,a._reactInternals=t,Eo(t,r,e,n),t=$i(null,t,r,!0,o,n)}else t.tag=0,Ii(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return Uu(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===R)return 14}return 2}(a),e=Ga(a,e),o){case 0:t=Bi(null,t,a,e,n);break e;case 1:t=Wi(null,t,a,e,n);break e;case 11:t=zi(null,t,a,e,n);break e;case 14:t=Di(null,t,a,Ga(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Bi(e,t,r,a=t.elementType===r?a:Ga(r,a),n);case 1:return r=t.type,a=t.pendingProps,Wi(e,t,r,a=t.elementType===r?a:Ga(r,a),n);case 3:if(qi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,uo(e,t),po(t,r,null,n),(r=t.memoizedState.element)===a)Ko(),t=nl(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(Vo=Kr(t.stateNode.containerInfo.firstChild),Do=t,o=Ho=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],Yo.push(o);for(n=Po(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ii(e,t,r,n),Ko();t=t.child}return t;case 5:return jo(t),null===e&&Wo(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,Br(r,a)?l=null:null!==o&&Br(r,o)&&(t.flags|=16),Ui(e,t),Ii(e,t,l,n),t.child;case 6:return null===e&&Wo(t),null;case 13:return Xi(e,t,n);case 4:return Ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oo(t,null,r,n):Ii(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,zi(e,t,r,a=t.elementType===r?a:Ga(r,a),n);case 7:return Ii(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ii(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value;var u=t.type._context;if(sa(Xa,u._currentValue),u._currentValue=o,null!==l)if(u=l.value,0==(o=cr(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!pa.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===u.tag&&((s=co(-1,n&-n)).tag=2,so(u,s)),u.lanes|=n,null!==(s=u.alternate)&&(s.lanes|=n),ro(u.return,n),c.lanes|=n;break}s=s.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ii(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,ao(t,n),r=r(a=oo(a,o.unstable_observedBits)),t.flags|=1,Ii(e,t,r,n),t.child;case 14:return o=Ga(a=t.type,t.pendingProps),Di(e,t,a,o=Ga(a.type,o),r,n);case 15:return Vi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ga(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,va(r)?(e=!0,wa(t)):e=!1,ao(t,n),bo(t,r,a),Eo(t,r,a,n),$i(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return Hi(e,t,n)}throw Error(i(156,t.tag))},tc.prototype.render=function(e){Xu(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,cu()),ec(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,cu()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=cu(),n=su(e);fu(e,n,t),ec(e,n)}},rt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=aa(r);if(!a)throw Error(i(90));X(r),ne(r,a)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Re=gu,Ae=function(e,t,n,r,a){var o=_l;_l|=4;try{return $a(98,e.bind(null,t,n,r,a))}finally{0===(_l=o)&&(Wl(),Ka())}},Fe=function(){0==(49&_l)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Ua())}))}Ka()}(),Ru())},je=function(e,t){var n=_l;_l|=2;try{return e(t)}finally{0===(_l=n)&&(Wl(),Ka())}};var oc={Events:[na,ra,aa,Te,Me,Ru,{current:!1}]},ic={findFiberByHostInstance:ta,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},lc={bundleType:ic.bundleType,version:ic.version,rendererPackageName:ic.rendererPackageName,rendererConfig:ic.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:ic.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var uc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!uc.isDisabled&&uc.supportsFiber)try{xa=uc.inject(lc),ka=uc}catch(he){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=oc,t.createPortal=ac,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=_l;if(0!=(48&n))return e(t);_l|=1;try{if(e)return $a(99,e.bind(null,t))}finally{_l=n,Ka()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(i(200));return rc(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(i(200));return rc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){rc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=gu,t.unstable_createPortal=function(e,t){return ac(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nc(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return rc(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=(n&&Symbol.for("react.suspense_list"),n?Symbol.for("react.memo"):60115),h=n?Symbol.for("react.lazy"):60116;n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope");function v(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case h:case m:case u:return e;default:return t}}case a:return t}}}t.isFragment=function(e){return v(e)===o},t.isMemo=function(e){return v(e)===m}},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},2408:(e,t,n)=>{"use strict";var r=n(7418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var c=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;a=f("react.element"),o=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),c=f("react.memo"),s=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function v(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var b=y.prototype=new g;b.constructor=y,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},E=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:w.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var S=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case o:u=!0}}if(u)return i=i(u=e),e=""===r?"."+O(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),P(i,t,n,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(S,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var s=r+O(l=e[c],c);u+=P(l,t,n,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=P(l=l.value,t,n,s=r+O(l,c++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function N(e,t,n){if(null==e)return e;var r=[],a=0;return P(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function _(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function M(){var e=T.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!x.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return M().useCallback(e,t)},t.useContext=function(e,t){return M().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return M().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return M().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return M().useLayoutEffect(e,t)},t.useMemo=function(e,t){return M().useMemo(e,t)},t.useReducer=function(e,t,n){return M().useReducer(e,t,n)},t.useRef=function(e){return M().useRef(e)},t.useState=function(e){return M().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},o=a.iterator||"@@iterator",i=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var a=t&&t.prototype instanceof v?t:v,o=Object.create(a.prototype),i=new N(r||[]);return o._invoke=function(e,t,n){var r=f;return function(a,o){if(r===p)throw new Error("Generator is already running");if(r===m){if("throw"===a)throw o;return T()}for(n.method=a,n.arg=o;;){var i=n.delegate;if(i){var l=S(i,n);if(l){if(l===h)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=s(e,t,n);if("normal"===u.type){if(r=n.done?m:d,u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=m,n.method="throw",n.arg=u.arg)}}}(e,n,i),o}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",m="completed",h={};function v(){}function g(){}function y(){}var b={};u(b,o,(function(){return this}));var w=Object.getPrototypeOf,E=w&&w(w(_([])));E&&E!==n&&r.call(E,o)&&(b=E);var x=y.prototype=v.prototype=Object.create(b);function k(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(a,o,i,l){var u=s(e[a],e,o);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,a){n(e,r,t,a)}))}return a=a?a.then(o,o):o()}}function S(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,S(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var a=s(r,e.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,h;var o=a.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var a=-1,i=function n(){for(;++a<e.length;)if(r.call(e,a))return n.value=e[a],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:T}}function T(){return{value:t,done:!0}}return g.prototype=y,u(x,"constructor",y),u(y,"constructor",g),g.displayName=u(y,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,l,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},k(C.prototype),u(C.prototype,i,(function(){return this})),e.AsyncIterator=C,e.async=function(t,n,r,a,o){void 0===o&&(o=Promise);var i=new C(c(t,n,r,a),o);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(x),u(x,l,"Generator"),u(x,o,(function(){return this})),u(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=_,N.prototype={constructor:N,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(P),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function a(r,a){return l.type="throw",l.arg=e,n.next=r,a&&(n.method="next",n.arg=t),!!a}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return a("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return a(i.catchLoc,!0);if(this.prev<i.finallyLoc)return a(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return a(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return a(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var o=a;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;P(n)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:_(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,s=null,f=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(f,0))},r=function(e,t){s=setTimeout(e,t)},a=function(){clearTimeout(s)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,v=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,E=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+y;try{v(!0,e)?E.postMessage(null):(h=!1,v=null)}catch(e){throw E.postMessage(null),e}}else h=!1},n=function(e){v=e,h||(h=!0,E.postMessage(null))},r=function(e,n){g=d((function(){e(t.unstable_now())}),n)},a=function(){p(g),g=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<S(a,t)))break e;e[r]=t,e[n]=a,n=r}}function k(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&0>S(i,n))void 0!==u&&0>S(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],P=[],N=1,_=null,T=3,M=!1,R=!1,A=!1;function F(e){for(var t=k(P);null!==t;){if(null===t.callback)C(P);else{if(!(t.startTime<=e))break;C(P),t.sortIndex=t.expirationTime,x(O,t)}t=k(P)}}function j(e){if(A=!1,F(e),!R)if(null!==k(O))R=!0,n(L);else{var t=k(P);null!==t&&r(j,t.startTime-e)}}function L(e,n){R=!1,A&&(A=!1,a()),M=!0;var o=T;try{for(F(n),_=k(O);null!==_&&(!(_.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=_.callback;if("function"==typeof i){_.callback=null,T=_.priorityLevel;var l=i(_.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?_.callback=l:_===k(O)&&C(O),F(n)}else C(O);_=k(O)}if(null!==_)var u=!0;else{var c=k(P);null!==c&&r(j,c.startTime-n),u=!1}return u}finally{_=null,T=o,M=!1}}var I=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||M||(R=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(O)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,o,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:N++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,x(P,e),null===k(O)&&e===k(P)&&(A?a():A=!0,r(j,i-l))):(e.sortIndex=u,x(O,e),R||M||(R=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},6774:e=>{e.exports=function(e,t,n,r){var a=n?n.call(r,e,t):void 0;if(void 0!==a)return!!a;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var o=Object.keys(e),i=Object.keys(t);if(o.length!==i.length)return!1;for(var l=Object.prototype.hasOwnProperty.bind(t),u=0;u<o.length;u++){var c=o[u];if(!l(c))return!1;var s=e[c],f=t[c];if(!1===(a=n?n.call(r,s,f,c):void 0)||void 0===a&&s!==f)return!1}return!0}},1742:e=>{e.exports=function(){var e=document.getSelection();if(!e.rangeCount)return function(){};for(var t=document.activeElement,n=[],r=0;r<e.rangeCount;r++)n.push(e.getRangeAt(r));switch(t.tagName.toUpperCase()){case"INPUT":case"TEXTAREA":t.blur();break;default:t=null}return e.removeAllRanges(),function(){"Caret"===e.type&&e.removeAllRanges(),e.rangeCount||n.forEach((function(t){e.addRange(t)})),t&&t.focus()}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,n),o.loaded=!0,o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(7294),t=n(3935);function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var a,o=a||(a={});o.Pop="POP",o.Push="PUSH",o.Replace="REPLACE";function i(e){e.preventDefault(),e.returnValue=""}function l(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function u(e){var t=e.pathname;t=void 0===t?"/":t;var n=e.search;return n=void 0===n?"":n,e=void 0===(e=e.hash)?"":e,n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),e&&"#"!==e&&(t+="#"===e.charAt(0)?e:"#"+e),t}function c(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function s(e,t){if(!e)throw new Error(t)}const f=(0,e.createContext)(null),d=(0,e.createContext)(null),p=(0,e.createContext)({outlet:null,matches:[]});function m(t){return function(t){let n=(0,e.useContext)(p).outlet;return n?(0,e.createElement)(w.Provider,{value:t},n):n}(t.context)}function h(e){s(!1)}function v(t){let{basename:n="/",children:r=null,location:o,navigationType:i=a.Pop,navigator:l,static:u=!1}=t;y()&&s(!1);let p=R(n),m=(0,e.useMemo)((()=>({basename:p,navigator:l,static:u})),[p,l,u]);"string"==typeof o&&(o=c(o));let{pathname:h="/",search:v="",hash:g="",state:b=null,key:w="default"}=o,E=(0,e.useMemo)((()=>{let e=T(h,p);return null==e?null:{pathname:e,search:v,hash:g,state:b,key:w}}),[p,h,v,g,b,w]);return null==E?null:(0,e.createElement)(f.Provider,{value:m},(0,e.createElement)(d.Provider,{children:r,value:{location:E,navigationType:i}}))}function g(t){let{children:n,location:r}=t;return function(t,n){y()||s(!1);let{matches:r}=(0,e.useContext)(p),a=r[r.length-1],o=a?a.params:{},i=(a&&a.pathname,a?a.pathnameBase:"/");a&&a.route;let l,u=b();if(n){var f;let e="string"==typeof n?c(n):n;"/"===i||(null==(f=e.pathname)?void 0:f.startsWith(i))||s(!1),l=e}else l=u;let d=l.pathname||"/",h=function(e,t,n){void 0===n&&(n="/");let r=T(("string"==typeof t?c(t):t).pathname||"/",n);if(null==r)return null;let a=k(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(a);let o=null;for(let e=0;null==o&&e<a.length;++e)o=P(a[e],r);return o}(t,{pathname:"/"===i?d:d.slice(i.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,a,o)=>(0,e.createElement)(p.Provider,{children:void 0!==a.route.element?a.route.element:(0,e.createElement)(m,null),value:{outlet:r,matches:n.concat(t.slice(0,o+1))}})),null)}(h&&h.map((e=>Object.assign({},e,{params:Object.assign({},o,e.params),pathname:M([i,e.pathname]),pathnameBase:"/"===e.pathnameBase?i:M([i,e.pathnameBase])}))),r)}(x(n),r)}function y(){return null!=(0,e.useContext)(d)}function b(){return y()||s(!1),(0,e.useContext)(d).location}const w=(0,e.createContext)(null);function E(t){let{matches:n}=(0,e.useContext)(p),{pathname:r}=b(),a=JSON.stringify(n.map((e=>e.pathnameBase)));return(0,e.useMemo)((()=>_(t,JSON.parse(a),r)),[t,a,r])}function x(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,x(t.props.children));t.type!==h&&s(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=x(t.props.children)),n.push(r)})),n}function k(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,a)=>{let o={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:a,route:e};o.relativePath.startsWith("/")&&(o.relativePath.startsWith(r)||s(!1),o.relativePath=o.relativePath.slice(r.length));let i=M([r,o.relativePath]),l=n.concat(o);e.children&&e.children.length>0&&(!0===e.index&&s(!1),k(e.children,t,l,i)),(null!=e.path||e.index)&&t.push({path:i,score:O(i,e.index),routesMeta:l})})),t}const C=/^:\w+$/,S=e=>"*"===e;function O(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=-2),t&&(r+=2),n.filter((e=>!S(e))).reduce(((e,t)=>e+(C.test(t)?3:""===t?1:10)),r)}function P(e,t){let{routesMeta:n}=e,r={},a="/",o=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===a?t:t.slice(a.length)||"/",c=N({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!c)return null;Object.assign(r,c.params);let s=i.route;o.push({params:r,pathname:M([a,c.pathname]),pathnameBase:M([a,c.pathnameBase]),route:s}),"/"!==c.pathnameBase&&(a=M([a,c.pathnameBase]))}return o}function N(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],a="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),a+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):a+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(a,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=t.match(n);if(!a)return null;let o=a[0],i=o.replace(/(.)\/+$/,"$1"),l=a.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=o.slice(0,o.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(l[n]||""),e}),{}),pathname:o,pathnameBase:i,pattern:e}}function _(e,t,n){let r,a="string"==typeof e?c(e):e,o=""===e||""===a.pathname?"/":a.pathname;if(null==o)r=n;else{let e=t.length-1;if(o.startsWith("..")){let t=o.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}r=e>=0?t[e]:"/"}let i=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:a=""}="string"==typeof e?c(e):e,o=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:o,search:A(r),hash:F(a)}}(a,r);return o&&"/"!==o&&o.endsWith("/")&&!i.pathname.endsWith("/")&&(i.pathname+="/"),i}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const M=e=>e.join("/").replace(/\/\/+/g,"/"),R=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),A=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",F=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function j(){return j=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},j.apply(this,arguments)}const L=["onClick","reloadDocument","replace","state","target","to"];function I(t){let{basename:n,children:o,window:s}=t,f=(0,e.useRef)();null==f.current&&(f.current=function(e){function t(){var e=d.location,t=p.state||{};return[t.idx,{pathname:e.pathname,search:e.search,hash:e.hash,state:t.usr||null,key:t.key||"default"}]}function n(e){return"string"==typeof e?e:u(e)}function o(e,t){return void 0===t&&(t=null),r({pathname:g.pathname,hash:"",search:""},"string"==typeof e?c(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function s(e){h=e,e=t(),v=e[0],g=e[1],y.call({action:h,location:g})}function f(e){p.go(e)}void 0===e&&(e={});var d=void 0===(e=e.window)?document.defaultView:e,p=d.history,m=null;d.addEventListener("popstate",(function(){if(m)b.call(m),m=null;else{var e=a.Pop,n=t(),r=n[0];if(n=n[1],b.length){if(null!=r){var o=v-r;o&&(m={action:e,location:n,retry:function(){f(-1*o)}},f(o))}}else s(e)}}));var h=a.Pop,v=(e=t())[0],g=e[1],y=l(),b=l();return null==v&&(v=0,p.replaceState(r({},p.state,{idx:v}),"")),{get action(){return h},get location(){return g},createHref:n,push:function e(t,r){var i=a.Push,l=o(t,r);if(!b.length||(b.call({action:i,location:l,retry:function(){e(t,r)}}),0)){var u=[{usr:l.state,key:l.key,idx:v+1},n(l)];l=u[0],u=u[1];try{p.pushState(l,"",u)}catch(e){d.location.assign(u)}s(i)}},replace:function e(t,r){var i=a.Replace,l=o(t,r);b.length&&(b.call({action:i,location:l,retry:function(){e(t,r)}}),1)||(l=[{usr:l.state,key:l.key,idx:v},n(l)],p.replaceState(l[0],"",l[1]),s(i))},go:f,back:function(){f(-1)},forward:function(){f(1)},listen:function(e){return y.push(e)},block:function(e){var t=b.push(e);return 1===b.length&&d.addEventListener("beforeunload",i),function(){t(),b.length||d.removeEventListener("beforeunload",i)}}}}({window:s}));let d=f.current,[p,m]=(0,e.useState)({action:d.action,location:d.location});return(0,e.useLayoutEffect)((()=>d.listen(m)),[d]),(0,e.createElement)(v,{basename:n,children:o,location:p.location,navigationType:p.action,navigator:d})}const z=(0,e.forwardRef)((function(t,n){let{onClick:r,reloadDocument:a,replace:o=!1,state:i,target:l,to:d}=t,m=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(t,L),h=function(t){y()||s(!1);let{basename:n,navigator:r}=(0,e.useContext)(f),{hash:a,pathname:o,search:i}=E(t),l=o;if("/"!==n){let e=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?c(e).pathname:e.pathname}(t),r=null!=e&&e.endsWith("/");l="/"===o?n+(r?"/":""):M([n,o])}return r.createHref({pathname:l,search:i,hash:a})}(d),v=function(t,n){let{target:r,replace:a,state:o}=void 0===n?{}:n,i=function(){y()||s(!1);let{basename:t,navigator:n}=(0,e.useContext)(f),{matches:r}=(0,e.useContext)(p),{pathname:a}=b(),o=JSON.stringify(r.map((e=>e.pathnameBase))),i=(0,e.useRef)(!1);return(0,e.useEffect)((()=>{i.current=!0})),(0,e.useCallback)((function(e,r){if(void 0===r&&(r={}),!i.current)return;if("number"==typeof e)return void n.go(e);let l=_(e,JSON.parse(o),a);"/"!==t&&(l.pathname=M([t,l.pathname])),(r.replace?n.replace:n.push)(l,r.state)}),[t,n,o,a])}(),l=b(),c=E(t);return(0,e.useCallback)((e=>{if(!(0!==e.button||r&&"_self"!==r||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))){e.preventDefault();let n=!!a||u(l)===u(c);i(t,{replace:n,state:o})}}),[l,i,c,a,o,r,t])}(d,{replace:o,state:i,target:l});return(0,e.createElement)("a",j({},m,{href:h,onClick:function(e){r&&r(e),e.defaultPrevented||a||v(e)},ref:n,target:l}))}));function D(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function V(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function H(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?V(Object(n),!0).forEach((function(t){D(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):V(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const U={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M868 160h-92v-40c0-4.4-3.6-8-8-8H256c-4.4 0-8 3.6-8 8v40h-92a44 44 0 00-44 44v148c0 81.7 60 149.6 138.2 162C265.7 630.2 359 721.7 476 734.5v105.2H280c-17.7 0-32 14.3-32 32V904c0 4.4 3.6 8 8 8h512c4.4 0 8-3.6 8-8v-32.3c0-17.7-14.3-32-32-32H548V734.5C665 721.7 758.3 630.2 773.8 514 852 501.6 912 433.7 912 352V204a44 44 0 00-44-44zM184 352V232h64v207.6a91.99 91.99 0 01-64-87.6zm520 128c0 49.1-19.1 95.4-53.9 130.1-34.8 34.8-81 53.9-130.1 53.9h-16c-49.1 0-95.4-19.1-130.1-53.9-34.8-34.8-53.9-81-53.9-130.1V184h384v296zm136-128c0 41-26.9 75.8-64 87.6V232h64v120z"}}]},name:"trophy",theme:"outlined"};function B(e){if(Array.isArray(e))return e}function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function $(e,t){if(e){if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}function q(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function K(e,t){return B(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,l=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){l=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(l)throw a}}return o}}(e,t)||$(e,t)||q()}function Y(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var Q=n(4184),G=n.n(Q);const X=(0,e.createContext)({});function Z(e){return Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Z(e)}function J(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function ee(e){return e<=1?100*Number(e)+"%":e}function te(e){return 1===e.length?"0"+e:String(e)}function ne(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function re(e){return ae(e)/255}function ae(e){return parseInt(e,16)}var oe={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function ie(e){var t={r:0,g:0,b:0},n=1,r=null,a=null,o=null,i=!1,l=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(oe[e])e=oe[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=se.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=se.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=se.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=se.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=se.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=se.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=se.hex8.exec(e))?{r:ae(n[1]),g:ae(n[2]),b:ae(n[3]),a:re(n[4]),format:t?"name":"hex8"}:(n=se.hex6.exec(e))?{r:ae(n[1]),g:ae(n[2]),b:ae(n[3]),format:t?"name":"hex"}:(n=se.hex4.exec(e))?{r:ae(n[1]+n[1]),g:ae(n[2]+n[2]),b:ae(n[3]+n[3]),a:re(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=se.hex3.exec(e))&&{r:ae(n[1]+n[1]),g:ae(n[2]+n[2]),b:ae(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(fe(e.r)&&fe(e.g)&&fe(e.b)?(t=function(e,t,n){return{r:255*J(e,255),g:255*J(t,255),b:255*J(n,255)}}(e.r,e.g,e.b),i=!0,l="%"===String(e.r).substr(-1)?"prgb":"rgb"):fe(e.h)&&fe(e.s)&&fe(e.v)?(r=ee(e.s),a=ee(e.v),t=function(e,t,n){e=6*J(e,360),t=J(t,100),n=J(n,100);var r=Math.floor(e),a=e-r,o=n*(1-t),i=n*(1-a*t),l=n*(1-(1-a)*t),u=r%6;return{r:255*[n,i,o,o,l,n][u],g:255*[l,n,n,i,o,o][u],b:255*[o,o,l,n,n,i][u]}}(e.h,r,a),i=!0,l="hsv"):fe(e.h)&&fe(e.s)&&fe(e.l)&&(r=ee(e.s),o=ee(e.l),t=function(e,t,n){var r,a,o;if(e=J(e,360),t=J(t,100),n=J(n,100),0===t)a=n,o=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,l=2*n-i;r=ne(l,i,e+1/3),a=ne(l,i,e),o=ne(l,i,e-1/3)}return{r:255*r,g:255*a,b:255*o}}(e.h,r,o),i=!0,l="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(n=e.a)),n=function(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}(n),{ok:i,format:e.format||l,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:n}}var le="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)",ue="[\\s|\\(]+("+le+")[,|\\s]+("+le+")[,|\\s]+("+le+")\\s*\\)?",ce="[\\s|\\(]+("+le+")[,|\\s]+("+le+")[,|\\s]+("+le+")[,|\\s]+("+le+")\\s*\\)?",se={CSS_UNIT:new RegExp(le),rgb:new RegExp("rgb"+ue),rgba:new RegExp("rgba"+ce),hsl:new RegExp("hsl"+ue),hsla:new RegExp("hsla"+ce),hsv:new RegExp("hsv"+ue),hsva:new RegExp("hsva"+ce),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function fe(e){return Boolean(se.CSS_UNIT.exec(String(e)))}var de=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function pe(e){var t=function(e,t,n){e=J(e,255),t=J(t,255),n=J(n,255);var r=Math.max(e,t,n),a=Math.min(e,t,n),o=0,i=r,l=r-a,u=0===r?0:l/r;if(r===a)o=0;else{switch(r){case e:o=(t-n)/l+(t<n?6:0);break;case t:o=(n-e)/l+2;break;case n:o=(e-t)/l+4}o/=6}return{h:o,s:u,v:i}}(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function me(e){var t=e.r,n=e.g,r=e.b;return"#".concat(function(e,t,n,r){var a=[te(Math.round(e).toString(16)),te(Math.round(t).toString(16)),te(Math.round(n).toString(16))];return a.join("")}(t,n,r))}function he(e,t,n){var r=n/100;return{r:(t.r-e.r)*r+e.r,g:(t.g-e.g)*r+e.g,b:(t.b-e.b)*r+e.b}}function ve(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-2*t:Math.round(e.h)+2*t:n?Math.round(e.h)+2*t:Math.round(e.h)-2*t)<0?r+=360:r>=360&&(r-=360),r}function ge(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-.16*t:4===t?e.s+.16:e.s+.05*t)>1&&(r=1),n&&5===t&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function ye(e,t,n){var r;return(r=n?e.v+.05*t:e.v-.15*t)>1&&(r=1),Number(r.toFixed(2))}function be(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=ie(e),a=5;a>0;a-=1){var o=pe(r),i=me(ie({h:ve(o,a,!0),s:ge(o,a,!0),v:ye(o,a,!0)}));n.push(i)}n.push(me(r));for(var l=1;l<=4;l+=1){var u=pe(r),c=me(ie({h:ve(u,l),s:ge(u,l),v:ye(u,l)}));n.push(c)}return"dark"===t.theme?de.map((function(e){var r=e.index,a=e.opacity;return me(he(ie(t.backgroundColor||"#141414"),ie(n[r]),100*a))})):n}var we={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1890FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},Ee={},xe={};Object.keys(we).forEach((function(e){Ee[e]=be(we[e]),Ee[e].primary=Ee[e][5],xe[e]=be(we[e],{theme:"dark",backgroundColor:"#141414"}),xe[e].primary=xe[e][5]})),Ee.red,Ee.volcano,Ee.gold,Ee.orange,Ee.yellow,Ee.lime,Ee.green,Ee.cyan,Ee.blue,Ee.geekblue,Ee.purple,Ee.magenta,Ee.grey;var ke={};function Ce(e,t){}const Se=function(e,t){!function(e,t,n){t||ke[n]||(e(!1,n),ke[n]=!0)}(Ce,e,t)};function Oe(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var Pe="rc-util-key";function Ne(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.mark;return t?t.startsWith("data-")?t:"data-".concat(t):Pe}function _e(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function Te(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!Oe())return null;var r,a=document.createElement("style");(null===(t=n.csp)||void 0===t?void 0:t.nonce)&&(a.nonce=null===(r=n.csp)||void 0===r?void 0:r.nonce),a.innerHTML=e;var o=_e(n),i=o.firstChild;return n.prepend&&o.prepend?o.prepend(a):n.prepend&&i?o.insertBefore(a,i):o.appendChild(a),a}var Me=new Map;function Re(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=_e(t);return Array.from(Me.get(n).children).find((function(n){return"STYLE"===n.tagName&&n.getAttribute(Ne(t))===e}))}function Ae(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=_e(n);if(!Me.has(r)){var a=Te("",n),o=a.parentNode;Me.set(r,o),o.removeChild(a)}var i,l,u,c=Re(t,n);if(c)return(null===(i=n.csp)||void 0===i?void 0:i.nonce)&&c.nonce!==(null===(l=n.csp)||void 0===l?void 0:l.nonce)&&(c.nonce=null===(u=n.csp)||void 0===u?void 0:u.nonce),c.innerHTML!==e&&(c.innerHTML=e),c;var s=Te(e,n);return s.setAttribute(Ne(n),t),s}function Fe(e){return"object"===Z(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===Z(e.icon)||"function"==typeof e.icon)}function je(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r=e[n];return"class"===n?(t.className=r,delete t.class):t[n]=r,t}),{})}function Le(t,n,r){return r?e.createElement(t.tag,H(H({key:n},je(t.attrs)),r),(t.children||[]).map((function(e,r){return Le(e,"".concat(n,"-").concat(t.tag,"-").concat(r))}))):e.createElement(t.tag,H({key:n},je(t.attrs)),(t.children||[]).map((function(e,r){return Le(e,"".concat(n,"-").concat(t.tag,"-").concat(r))})))}function Ie(e){return be(e)[0]}function ze(e){return e?Array.isArray(e)?e:[e]:[]}var De="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",Ve=["icon","className","onClick","style","primaryColor","secondaryColor"],He={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},Ue=function(t){var n,r,a=t.icon,o=t.className,i=t.onClick,l=t.style,u=t.primaryColor,c=t.secondaryColor,s=Y(t,Ve),f=He;if(u&&(f={primaryColor:u,secondaryColor:c||Ie(u)}),function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:De,n=(0,e.useContext)(X).csp;(0,e.useEffect)((function(){Ae(t,"@ant-design-icons",{prepend:!0,csp:n})}),[])}(),n=Fe(a),r="icon should be icon definiton, but got ".concat(a),Se(n,"[@ant-design/icons] ".concat(r)),!Fe(a))return null;var d=a;return d&&"function"==typeof d.icon&&(d=H(H({},d),{},{icon:d.icon(f.primaryColor,f.secondaryColor)})),Le(d.icon,"svg-".concat(d.name),H({className:o,onClick:i,style:l,"data-icon":d.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},s))};Ue.displayName="IconReact",Ue.getTwoToneColors=function(){return H({},He)},Ue.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;He.primaryColor=t,He.secondaryColor=n||Ie(t),He.calculated=!!n};const Be=Ue;function We(e){var t=K(ze(e),2),n=t[0],r=t[1];return Be.setTwoToneColors({primaryColor:n,secondaryColor:r})}var $e=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];We("#1890ff");var qe=e.forwardRef((function(t,n){var r,a=t.className,o=t.icon,i=t.spin,l=t.rotate,u=t.tabIndex,c=t.onClick,s=t.twoToneColor,f=Y(t,$e),d=e.useContext(X).prefixCls,p=void 0===d?"anticon":d,m=G()(p,(D(r={},"".concat(p,"-").concat(o.name),!!o.name),D(r,"".concat(p,"-spin"),!!i||"loading"===o.name),r),a),h=u;void 0===h&&c&&(h=-1);var v=l?{msTransform:"rotate(".concat(l,"deg)"),transform:"rotate(".concat(l,"deg)")}:void 0,g=K(ze(s),2),y=g[0],b=g[1];return e.createElement("span",H(H({role:"img","aria-label":o.name},f),{},{ref:n,tabIndex:h,onClick:c,className:m}),e.createElement(Be,{icon:o,primaryColor:y,secondaryColor:b,style:v}))}));qe.displayName="AntdIcon",qe.getTwoToneColor=function(){var e=Be.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},qe.setTwoToneColor=We;const Ke=qe;var Ye=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:U}))};Ye.displayName="TrophyOutlined";const Qe=e.forwardRef(Ye),Ge={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 00.6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0046.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3zM664.8 561.6l36.1 210.3L512 672.7 323.1 772l36.1-210.3-152.8-149L417.6 382 512 190.7 606.4 382l211.2 30.7-152.8 148.9z"}}]},name:"star",theme:"outlined"};var Xe=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Ge}))};Xe.displayName="StarOutlined";const Ze=e.forwardRef(Xe);function Je(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function tt(e,t,n){return t&&et(e.prototype,t),n&&et(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function nt(e,t){return nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},nt(e,t)}function rt(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&nt(e,t)}function at(e){return at=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},at(e)}function ot(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function it(e,t){if(t&&("object"===Z(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return ot(e)}function lt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=at(e);if(t){var a=at(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return it(this,n)}}function ut(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function ct(e){return function(e){if(Array.isArray(e))return W(e)}(e)||ut(e)||$(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var st=n(6774),ft=n.n(st);function dt(t,n){var r=n||{},a=r.defaultValue,o=r.value,i=r.onChange,l=r.postState,u=K(e.useState((function(){return void 0!==o?o:void 0!==a?"function"==typeof a?a():a:"function"==typeof t?t():t})),2),c=u[0],s=u[1],f=void 0!==o?o:c;l&&(f=l(f));var d=e.useRef(i);d.current=i;var p=e.useCallback((function(e){s(e),f!==e&&d.current&&d.current(e,f)}),[f,d]),m=e.useRef(!0);return e.useEffect((function(){m.current?m.current=!1:void 0===o&&s(o)}),[o]),[f,p]}var pt=n(9864);function mt(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=[];return e.Children.forEach(t,(function(e){(null!=e||n.keepEmpty)&&(Array.isArray(e)?r=r.concat(mt(e)):(0,pt.isFragment)(e)&&e.props?r=r.concat(mt(e.props.children,n)):r.push(e))})),r}function ht(e,t){"function"==typeof e?e(t):"object"===Z(e)&&e&&"current"in e&&(e.current=t)}function vt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=t.filter((function(e){return e}));return r.length<=1?r[0]:function(e){t.forEach((function(t){ht(t,e)}))}}function gt(e){var t,n,r=(0,pt.isMemo)(e)?e.type.type:e.type;return!("function"==typeof r&&!(null===(t=r.prototype)||void 0===t?void 0:t.render)||"function"==typeof e&&!(null===(n=e.prototype)||void 0===n?void 0:n.render))}function yt(e){return e instanceof HTMLElement?e:t.findDOMNode(e)}var bt=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var n=-1;return e.some((function(e,r){return e[0]===t&&(n=r,!0)})),n}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var n=e(this.__entries__,t),r=this.__entries__[n];return r&&r[1]},t.prototype.set=function(t,n){var r=e(this.__entries__,t);~r?this.__entries__[r][1]=n:this.__entries__.push([t,n])},t.prototype.delete=function(t){var n=this.__entries__,r=e(n,t);~r&&n.splice(r,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var n=0,r=this.__entries__;n<r.length;n++){var a=r[n];e.call(t,a[1],a[0])}},t}()}(),wt="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Et=void 0!==n.g&&n.g.Math===Math?n.g:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),xt="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Et):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},kt=["top","right","bottom","left","width","height","size","weight"],Ct="undefined"!=typeof MutationObserver,St=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var n=!1,r=!1,a=0;function o(){n&&(n=!1,e()),r&&l()}function i(){xt(o)}function l(){var e=Date.now();if(n){if(e-a<2)return;r=!0}else n=!0,r=!1,setTimeout(i,20);a=e}return l}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,n=t.indexOf(e);~n&&t.splice(n,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){wt&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),Ct?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){wt&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,n=void 0===t?"":t;kt.some((function(e){return!!~n.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),Ot=function(e,t){for(var n=0,r=Object.keys(t);n<r.length;n++){var a=r[n];Object.defineProperty(e,a,{value:t[a],enumerable:!1,writable:!1,configurable:!0})}return e},Pt=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||Et},Nt=At(0,0,0,0);function _t(e){return parseFloat(e)||0}function Tt(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.reduce((function(t,n){return t+_t(e["border-"+n+"-width"])}),0)}var Mt="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof Pt(e).SVGGraphicsElement}:function(e){return e instanceof Pt(e).SVGElement&&"function"==typeof e.getBBox};function Rt(e){return wt?Mt(e)?function(e){var t=e.getBBox();return At(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,n=e.clientHeight;if(!t&&!n)return Nt;var r=Pt(e).getComputedStyle(e),a=function(e){for(var t={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var a=r[n],o=e["padding-"+a];t[a]=_t(o)}return t}(r),o=a.left+a.right,i=a.top+a.bottom,l=_t(r.width),u=_t(r.height);if("border-box"===r.boxSizing&&(Math.round(l+o)!==t&&(l-=Tt(r,"left","right")+o),Math.round(u+i)!==n&&(u-=Tt(r,"top","bottom")+i)),!function(e){return e===Pt(e).document.documentElement}(e)){var c=Math.round(l+o)-t,s=Math.round(u+i)-n;1!==Math.abs(c)&&(l-=c),1!==Math.abs(s)&&(u-=s)}return At(a.left,a.top,l,u)}(e):Nt}function At(e,t,n,r){return{x:e,y:t,width:n,height:r}}var Ft=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=At(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=Rt(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),jt=function(e,t){var n,r,a,o,i,l,u,c=(r=(n=t).x,a=n.y,o=n.width,i=n.height,l="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,u=Object.create(l.prototype),Ot(u,{x:r,y:a,width:o,height:i,top:a,right:r+o,bottom:i+a,left:r}),u);Ot(this,{target:e,contentRect:c})},Lt=function(){function e(e,t,n){if(this.activeObservations_=[],this.observations_=new bt,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=n}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Pt(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new Ft(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Pt(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new jt(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),It="undefined"!=typeof WeakMap?new WeakMap:new bt,zt=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=St.getInstance(),r=new Lt(t,n,this);It.set(this,r)};["observe","unobserve","disconnect"].forEach((function(e){zt.prototype[e]=function(){var t;return(t=It.get(this))[e].apply(t,arguments)}}));const Dt=void 0!==Et.ResizeObserver?Et.ResizeObserver:zt;var Vt=new Map,Ht=new Dt((function(e){e.forEach((function(e){var t,n=e.target;null===(t=Vt.get(n))||void 0===t||t.forEach((function(e){return e(n)}))}))})),Ut=function(e){rt(n,e);var t=lt(n);function n(){return Je(this,n),t.apply(this,arguments)}return tt(n,[{key:"render",value:function(){return this.props.children}}]),n}(e.Component),Bt=e.createContext(null);function Wt(t){var n=t.children,r=t.disabled,a=e.useRef(null),o=e.useRef(null),i=e.useContext(Bt),l="function"==typeof n,u=l?n(a):n,c=e.useRef({width:-1,height:-1,offsetWidth:-1,offsetHeight:-1}),s=!l&&e.isValidElement(u)&&gt(u),f=s?u.ref:null,d=e.useMemo((function(){return vt(f,a)}),[f,a]),p=e.useRef(t);p.current=t;var m=e.useCallback((function(e){var t=p.current,n=t.onResize,r=t.data,a=e.getBoundingClientRect(),o=a.width,l=a.height,u=e.offsetWidth,s=e.offsetHeight,f=Math.floor(o),d=Math.floor(l);if(c.current.width!==f||c.current.height!==d||c.current.offsetWidth!==u||c.current.offsetHeight!==s){var m={width:f,height:d,offsetWidth:u,offsetHeight:s};c.current=m;var h=u===Math.round(o)?o:u,v=s===Math.round(l)?l:s,g=H(H({},m),{},{offsetWidth:h,offsetHeight:v});null==i||i(g,e,r),n&&Promise.resolve().then((function(){n(g,e)}))}}),[]);return e.useEffect((function(){var e,t,n=yt(a.current)||yt(o.current);return n&&!r&&(e=n,t=m,Vt.has(e)||(Vt.set(e,new Set),Ht.observe(e)),Vt.get(e).add(t)),function(){return function(e,t){Vt.has(e)&&(Vt.get(e).delete(t),Vt.get(e).size||(Ht.unobserve(e),Vt.delete(e)))}(n,m)}}),[a.current,r]),e.createElement(Ut,{ref:o},s?e.cloneElement(u,{ref:d}):u)}function $t(t){var n=t.children;return("function"==typeof n?[n]:mt(n)).map((function(n,a){var o=(null==n?void 0:n.key)||"".concat("rc-observer-key","-").concat(a);return e.createElement(Wt,r({},t,{key:o}),n)}))}$t.Collection=function(t){var n=t.children,r=t.onBatchResize,a=e.useRef(0),o=e.useRef([]),i=e.useContext(Bt),l=e.useCallback((function(e,t,n){a.current+=1;var l=a.current;o.current.push({size:e,element:t,data:n}),Promise.resolve().then((function(){l===a.current&&(null==r||r(o.current),o.current=[])})),null==i||i(e,t,n)}),[r,i]);return e.createElement(Bt.Provider,{value:l},n)};const qt=$t,Kt=Oe()?e.useLayoutEffect:e.useEffect;var Yt=["prefixCls","invalidate","item","renderItem","responsive","registerSize","itemKey","className","style","children","display","order","component"],Qt=void 0;function Gt(t,n){var a=t.prefixCls,o=t.invalidate,i=t.item,l=t.renderItem,u=t.responsive,c=t.registerSize,s=t.itemKey,f=t.className,d=t.style,p=t.children,m=t.display,h=t.order,v=t.component,g=void 0===v?"div":v,y=Y(t,Yt),b=u&&!m;function w(e){c(s,e)}e.useEffect((function(){return function(){w(null)}}),[]);var E,x=l&&i!==Qt?l(i):p;o||(E={opacity:b?0:1,height:b?0:Qt,overflowY:b?"hidden":Qt,order:u?h:Qt,pointerEvents:b?"none":Qt,position:b?"absolute":Qt});var k={};b&&(k["aria-hidden"]=!0);var C=e.createElement(g,r({className:G()(!o&&a,f),style:H(H({},E),d)},k,y,{ref:n}),x);return u&&(C=e.createElement(qt,{onResize:function(e){w(e.offsetWidth)}},C)),C}var Xt=e.forwardRef(Gt);Xt.displayName="Item";const Zt=Xt;var Jt=function(e){return+setTimeout(e,16)},en=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(Jt=function(e){return window.requestAnimationFrame(e)},en=function(e){return window.cancelAnimationFrame(e)});var tn=0,nn=new Map;function rn(e){nn.delete(e)}function an(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=tn+=1;function r(t){if(0===t)rn(n),e();else{var a=Jt((function(){r(t-1)}));nn.set(n,a)}}return r(t),n}an.cancel=function(e){var t=nn.get(e);return rn(t),en(t)};var on=["component"],ln=["className"],un=["className"],cn=function(t,n){var a=e.useContext(pn);if(!a){var o=t.component,i=void 0===o?"div":o,l=Y(t,on);return e.createElement(i,r({},l,{ref:n}))}var u=a.className,c=Y(a,ln),s=t.className,f=Y(t,un);return e.createElement(pn.Provider,{value:null},e.createElement(Zt,r({ref:n,className:G()(u,s)},c,f)))},sn=e.forwardRef(cn);sn.displayName="RawItem";const fn=sn;var dn=["prefixCls","data","renderItem","renderRawItem","itemKey","itemWidth","ssr","style","className","maxCount","renderRest","renderRawRest","suffix","component","itemComponent","onVisibleChange"],pn=e.createContext(null),mn="responsive",hn="invalidate";function vn(e){return"+ ".concat(e.length," ...")}function gn(t,n){var a,o,i,l,u,c=t.prefixCls,s=void 0===c?"rc-overflow":c,f=t.data,d=void 0===f?[]:f,p=t.renderItem,m=t.renderRawItem,h=t.itemKey,v=t.itemWidth,g=void 0===v?10:v,y=t.ssr,b=t.style,w=t.className,E=t.maxCount,x=t.renderRest,k=t.renderRawRest,C=t.suffix,S=t.component,O=void 0===S?"div":S,P=t.itemComponent,N=t.onVisibleChange,_=Y(t,dn),T=(a=K((0,e.useState)({}),2)[1],o=(0,e.useRef)([]),i=(0,e.useRef)(!1),l=0,u=0,(0,e.useEffect)((function(){return function(){i.current=!0}}),[]),function(e){var t=l;return l+=1,o.current.length<t+1&&(o.current[t]=e),[o.current[t],function(e){o.current[t]="function"==typeof e?e(o.current[t]):e,an.cancel(u),u=an((function(){i.current||a({})}))}]}),M="full"===y,R=K(T(null),2),A=R[0],F=R[1],j=A||0,L=K(T(new Map),2),I=L[0],z=L[1],D=K(T(0),2),V=D[0],U=D[1],B=K(T(0),2),W=B[0],$=B[1],q=K(T(0),2),Q=q[0],X=q[1],Z=K((0,e.useState)(null),2),J=Z[0],ee=Z[1],te=K((0,e.useState)(null),2),ne=te[0],re=te[1],ae=e.useMemo((function(){return null===ne&&M?Number.MAX_SAFE_INTEGER:ne||0}),[ne,A]),oe=K((0,e.useState)(!1),2),ie=oe[0],le=oe[1],ue="".concat(s,"-item"),ce=Math.max(V,W),se=d.length&&E===mn,fe=E===hn,de=se||"number"==typeof E&&d.length>E,pe=(0,e.useMemo)((function(){var e=d;return se?e=null===A&&M?d:d.slice(0,Math.min(d.length,j/g)):"number"==typeof E&&(e=d.slice(0,E)),e}),[d,g,A,E,se]),me=(0,e.useMemo)((function(){return se?d.slice(ae+1):d.slice(pe.length)}),[d,pe,se,ae]),he=(0,e.useCallback)((function(e,t){var n;return"function"==typeof h?h(e):null!==(n=h&&(null==e?void 0:e[h]))&&void 0!==n?n:t}),[h]),ve=(0,e.useCallback)(p||function(e){return e},[p]);function ge(e,t){re(e),t||(le(e<d.length-1),null==N||N(e))}function ye(e,t){z((function(n){var r=new Map(n);return null===t?r.delete(e):r.set(e,t),r}))}function be(e){return I.get(he(pe[e],e))}Kt((function(){if(j&&ce&&pe){var e=Q,t=pe.length,n=t-1;if(!t)return ge(0),void ee(null);for(var r=0;r<t;r+=1){var a=be(r);if(void 0===a){ge(r-1,!0);break}if(e+=a,0===n&&e<=j||r===n-1&&e+be(n)<=j){ge(n),ee(null);break}if(e+ce>j){ge(r-1),ee(e-a-Q+W);break}}C&&be(0)+Q>j&&ee(null)}}),[j,I,W,Q,he,pe]);var we=ie&&!!me.length,Ee={};null!==J&&se&&(Ee={position:"absolute",left:J,top:0});var xe,ke={prefixCls:ue,responsive:se,component:P,invalidate:fe},Ce=m?function(t,n){var r=he(t,n);return e.createElement(pn.Provider,{key:r,value:H(H({},ke),{},{order:n,item:t,itemKey:r,registerSize:ye,display:n<=ae})},m(t,n))}:function(t,n){var a=he(t,n);return e.createElement(Zt,r({},ke,{order:n,key:a,item:t,renderItem:ve,itemKey:a,registerSize:ye,display:n<=ae}))},Se={order:we?ae:Number.MAX_SAFE_INTEGER,className:"".concat(ue,"-rest"),registerSize:function(e,t){$(t),U(W)},display:we};if(k)k&&(xe=e.createElement(pn.Provider,{value:H(H({},ke),Se)},k(me)));else{var Oe=x||vn;xe=e.createElement(Zt,r({},ke,Se),"function"==typeof Oe?Oe(me):Oe)}var Pe=e.createElement(O,r({className:G()(!fe&&s,w),style:b,ref:n},_),pe.map(Ce),de?xe:null,C&&e.createElement(Zt,r({},ke,{order:ae,className:"".concat(ue,"-suffix"),registerSize:function(e,t){X(t)},display:!0,style:Ee}),C));return se&&(Pe=e.createElement(qt,{onResize:function(e,t){F(t.clientWidth)}},Pe)),Pe}var yn=e.forwardRef(gn);yn.displayName="Overflow",yn.Item=fn,yn.RESPONSIVE=mn,yn.INVALIDATE=hn;const bn=yn;var wn={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=wn.F1&&t<=wn.F12)return!1;switch(t){case wn.ALT:case wn.CAPS_LOCK:case wn.CONTEXT_MENU:case wn.CTRL:case wn.DOWN:case wn.END:case wn.ESC:case wn.HOME:case wn.INSERT:case wn.LEFT:case wn.MAC_FF_META:case wn.META:case wn.NUMLOCK:case wn.NUM_CENTER:case wn.PAGE_DOWN:case wn.PAGE_UP:case wn.PAUSE:case wn.PRINT_SCREEN:case wn.RIGHT:case wn.SHIFT:case wn.UP:case wn.WIN_KEY:case wn.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=wn.ZERO&&e<=wn.NINE)return!0;if(e>=wn.NUM_ZERO&&e<=wn.NUM_MULTIPLY)return!0;if(e>=wn.A&&e<=wn.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case wn.SPACE:case wn.QUESTION_MARK:case wn.NUM_PLUS:case wn.NUM_MINUS:case wn.NUM_PERIOD:case wn.NUM_DIVISION:case wn.SEMICOLON:case wn.DASH:case wn.EQUALS:case wn.COMMA:case wn.PERIOD:case wn.SLASH:case wn.APOSTROPHE:case wn.SINGLE_QUOTE:case wn.OPEN_SQUARE_BRACKET:case wn.BACKSLASH:case wn.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const En=wn;function xn(e,t){var n=H({},e);return Array.isArray(t)&&t.forEach((function(e){delete n[e]})),n}var kn=["children","locked"],Cn=e.createContext(null);function Sn(t){var n,r,a,o,i,l,u=t.children,c=t.locked,s=Y(t,kn),f=e.useContext(Cn),d=(n=[f,s],"value"in(l=e.useRef({})).current&&(o=l.current.condition,i=n,!!(c||o[0]===i[0]&&ft()(o[1],i[1])))||(l.current.value=(r=s,a=H({},f),Object.keys(r).forEach((function(e){var t=r[e];void 0!==t&&(a[e]=t)})),a),l.current.condition=n),l.current.value);return e.createElement(Cn.Provider,{value:d},u)}function On(t,n,r,a){var o=e.useContext(Cn),i=o.activeKey,l=o.onActive,u=o.onInactive,c={active:i===t};return n||(c.onMouseEnter=function(e){null==r||r({key:t,domEvent:e}),l(t)},c.onMouseLeave=function(e){null==a||a({key:t,domEvent:e}),u(t)}),c}var Pn=["item"];function Nn(e){var t=e.item,n=Y(e,Pn);return Object.defineProperty(n,"item",{get:function(){return Se(!1,"`info.item` is deprecated since we will move to function component that not provides React Node instance in future."),t}}),n}function _n(t){var n=t.icon,r=t.props,a=t.children;return("function"==typeof n?e.createElement(n,H({},r)):n)||a||null}function Tn(t){var n=e.useContext(Cn),r=n.mode,a=n.rtl,o=n.inlineIndent;return"inline"!==r?null:a?{paddingRight:t*o}:{paddingLeft:t*o}}var Mn=[],Rn=e.createContext(null);function An(){return e.useContext(Rn)}var Fn=e.createContext(Mn);function jn(t){var n=e.useContext(Fn);return e.useMemo((function(){return void 0!==t?[].concat(ct(n),[t]):n}),[n,t])}var Ln=e.createContext(null),In=e.createContext(null);function zn(e,t){return void 0===e?null:"".concat(e,"-").concat(t)}function Dn(t){return zn(e.useContext(In),t)}const Vn=e.createContext({});var Hn=["title","attribute","elementRef"],Un=["style","className","eventKey","warnKey","disabled","itemIcon","children","role","onMouseEnter","onMouseLeave","onClick","onKeyDown","onFocus"],Bn=["active"],Wn=function(t){rt(a,t);var n=lt(a);function a(){return Je(this,a),n.apply(this,arguments)}return tt(a,[{key:"render",value:function(){var t=this.props,n=t.title,a=t.attribute,o=t.elementRef,i=xn(Y(t,Hn),["eventKey"]);return Se(!a,"`attribute` of Menu.Item is deprecated. Please pass attribute directly."),e.createElement(bn.Item,r({},a,{title:"string"==typeof n?n:void 0},i,{ref:o}))}}]),a}(e.Component),$n=function(t){var n,a=t.style,o=t.className,i=t.eventKey,l=(t.warnKey,t.disabled),u=t.itemIcon,c=t.children,s=t.role,f=t.onMouseEnter,d=t.onMouseLeave,p=t.onClick,m=t.onKeyDown,h=t.onFocus,v=Y(t,Un),g=Dn(i),y=e.useContext(Cn),b=y.prefixCls,w=y.onItemClick,E=y.disabled,x=y.overflowDisabled,k=y.itemIcon,C=y.selectedKeys,S=y.onActive,O=e.useContext(Vn)._internalRenderMenuItem,P="".concat(b,"-item"),N=e.useRef(),_=e.useRef(),T=E||l,M=jn(i),R=function(e){return{key:i,keyPath:ct(M).reverse(),item:N.current,domEvent:e}},A=u||k,F=On(i,T,f,d),j=F.active,L=Y(F,Bn),I=C.includes(i),z=Tn(M.length),V={};"option"===t.role&&(V["aria-selected"]=I);var U=e.createElement(Wn,r({ref:N,elementRef:_,role:null===s?"none":s||"menuitem",tabIndex:l?null:-1,"data-menu-id":x&&g?null:g},v,L,V,{component:"li","aria-disabled":l,style:H(H({},z),a),className:G()(P,(n={},D(n,"".concat(P,"-active"),j),D(n,"".concat(P,"-selected"),I),D(n,"".concat(P,"-disabled"),T),n),o),onClick:function(e){if(!T){var t=R(e);null==p||p(Nn(t)),w(t)}},onKeyDown:function(e){if(null==m||m(e),e.which===En.ENTER){var t=R(e);null==p||p(Nn(t)),w(t)}},onFocus:function(e){S(i),null==h||h(e)}}),c,e.createElement(_n,{props:H(H({},t),{},{isSelected:I}),icon:A}));return O&&(U=O(U,t)),U};const qn=function(t){var n=t.eventKey,r=An(),a=jn(n);return e.useEffect((function(){if(r)return r.registerPath(n,a),function(){r.unregisterPath(n,a)}}),[a]),r?null:e.createElement($n,t)};function Kn(t,n){return mt(t).map((function(t,r){if(e.isValidElement(t)){var a,o,i=t.key,l=null!==(a=null===(o=t.props)||void 0===o?void 0:o.eventKey)&&void 0!==a?a:i;null==l&&(l="tmp_key-".concat([].concat(ct(n),[r]).join("-")));var u={key:l,eventKey:l};return e.cloneElement(t,u)}return t}))}function Yn(t){var n=e.useRef(t);n.current=t;var r=e.useCallback((function(){for(var e,t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];return null===(e=n.current)||void 0===e?void 0:e.call.apply(e,[n].concat(r))}),[]);return t?r:void 0}var Qn=["className","children"],Gn=function(t,n){var a=t.className,o=t.children,i=Y(t,Qn),l=e.useContext(Cn),u=l.prefixCls,c=l.mode,s=l.rtl;return e.createElement("ul",r({className:G()(u,s&&"".concat(u,"-rtl"),"".concat(u,"-sub"),"".concat(u,"-").concat("inline"===c?"inline":"vertical"),a)},i,{"data-menu-list":!0,ref:n}),o)},Xn=e.forwardRef(Gn);Xn.displayName="SubMenuList";const Zn=Xn;function Jn(e,t){return!!e&&e.contains(t)}function er(e,n,r,a){var o=t.unstable_batchedUpdates?function(e){t.unstable_batchedUpdates(r,e)}:r;return e.addEventListener&&e.addEventListener(n,o,a),{remove:function(){e.removeEventListener&&e.removeEventListener(n,o)}}}var tr=(0,e.forwardRef)((function(n,r){var a=n.didUpdate,o=n.getContainer,i=n.children,l=(0,e.useRef)();(0,e.useImperativeHandle)(r,(function(){return{}}));var u=(0,e.useRef)(!1);return!u.current&&Oe()&&(l.current=o(),u.current=!0),(0,e.useEffect)((function(){null==a||a(n)})),(0,e.useEffect)((function(){return function(){var e,t;null===(e=l.current)||void 0===e||null===(t=e.parentNode)||void 0===t||t.removeChild(l.current)}}),[]),l.current?t.createPortal(i,l.current):null}));const nr=tr;function rr(e,t,n){return n?e[0]===t[0]:e[0]===t[0]&&e[1]===t[1]}const ar=function(){if("undefined"==typeof navigator||"undefined"==typeof window)return!1;var e=navigator.userAgent||navigator.vendor||window.opera;return!(!/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)&&!/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(null==e?void 0:e.substr(0,4)))};function or(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var ir,lr,ur,cr=(ir=Oe(),lr="undefined"!=typeof window?window:{},ur={animationend:or("Animation","AnimationEnd"),transitionend:or("Transition","TransitionEnd")},ir&&("AnimationEvent"in lr||delete ur.animationend.animation,"TransitionEvent"in lr||delete ur.transitionend.transition),ur),sr={};if(Oe()){var fr=document.createElement("div");sr=fr.style}var dr={};function pr(e){if(dr[e])return dr[e];var t=cr[e];if(t)for(var n=Object.keys(t),r=n.length,a=0;a<r;a+=1){var o=n[a];if(Object.prototype.hasOwnProperty.call(t,o)&&o in sr)return dr[e]=t[o],dr[e]}return""}var mr=pr("animationend"),hr=pr("transitionend"),vr=!(!mr||!hr),gr=mr||"animationend",yr=hr||"transitionend";function br(e,t){return e?"object"===Z(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}var wr="none",Er="appear",xr="enter",kr="leave",Cr="none",Sr="prepare",Or="start",Pr="active",Nr="end";function _r(t){var n=(0,e.useRef)(!1),r=K((0,e.useState)(t),2),a=r[0],o=r[1];return(0,e.useEffect)((function(){return function(){n.current=!0}}),[]),[a,function(e){n.current||o(e)}]}const Tr=Oe()?e.useLayoutEffect:e.useEffect;var Mr=[Sr,Or,Pr,Nr];function Rr(e){return e===Pr||e===Nr}function Ar(t,n,r,a){var o=a.motionEnter,i=void 0===o||o,l=a.motionAppear,u=void 0===l||l,c=a.motionLeave,s=void 0===c||c,f=a.motionDeadline,d=a.motionLeaveImmediately,p=a.onAppearPrepare,m=a.onEnterPrepare,h=a.onLeavePrepare,v=a.onAppearStart,g=a.onEnterStart,y=a.onLeaveStart,b=a.onAppearActive,w=a.onEnterActive,E=a.onLeaveActive,x=a.onAppearEnd,k=a.onEnterEnd,C=a.onLeaveEnd,S=a.onVisibleChanged,O=K(_r(),2),P=O[0],N=O[1],_=K(_r(wr),2),T=_[0],M=_[1],R=K(_r(null),2),A=R[0],F=R[1],j=(0,e.useRef)(!1),L=(0,e.useRef)(null),I=(0,e.useRef)(!1),z=(0,e.useRef)(null);function V(){return r()||z.current}var U=(0,e.useRef)(!1);function B(e){var t,n=V();e&&!e.deadline&&e.target!==n||(T===Er&&U.current?t=null==x?void 0:x(n,e):T===xr&&U.current?t=null==k?void 0:k(n,e):T===kr&&U.current&&(t=null==C?void 0:C(n,e)),!1===t||I.current||(M(wr),F(null)))}var W=function(t){var n=(0,e.useRef)(),r=(0,e.useRef)(t);r.current=t;var a=e.useCallback((function(e){r.current(e)}),[]);function o(e){e&&(e.removeEventListener(yr,a),e.removeEventListener(gr,a))}return e.useEffect((function(){return function(){o(n.current)}}),[]),[function(e){n.current&&n.current!==e&&o(n.current),e&&e!==n.current&&(e.addEventListener(yr,a),e.addEventListener(gr,a),n.current=e)},o]}(B),$=K(W,1)[0],q=e.useMemo((function(){var e,t,n;switch(T){case Er:return D(e={},Sr,p),D(e,Or,v),D(e,Pr,b),e;case xr:return D(t={},Sr,m),D(t,Or,g),D(t,Pr,w),t;case kr:return D(n={},Sr,h),D(n,Or,y),D(n,Pr,E),n;default:return{}}}),[T]),Y=K(function(t,n){var r=K(_r(Cr),2),a=r[0],o=r[1],i=function(){var t=e.useRef(null);function n(){an.cancel(t.current)}return e.useEffect((function(){return function(){n()}}),[]),[function e(r){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;n();var o=an((function(){a<=1?r({isCanceled:function(){return o!==t.current}}):e(r,a-1)}));t.current=o},n]}(),l=K(i,2),u=l[0],c=l[1];return Tr((function(){if(a!==Cr&&a!==Nr){var e=Mr.indexOf(a),t=Mr[e+1],r=n(a);!1===r?o(t):u((function(e){function n(){e.isCanceled()||o(t)}!0===r?n():Promise.resolve(r).then(n)}))}}),[t,a]),e.useEffect((function(){return function(){c()}}),[]),[function(){o(Sr)},a]}(T,(function(e){if(e===Sr){var t=q.prepare;return!!t&&t(V())}var n;return G in q&&F((null===(n=q[G])||void 0===n?void 0:n.call(q,V(),null))||null),G===Pr&&($(V()),f>0&&(clearTimeout(L.current),L.current=setTimeout((function(){B({deadline:!0})}),f))),!0})),2),Q=Y[0],G=Y[1],X=Rr(G);U.current=X,Tr((function(){N(n);var e,r=j.current;j.current=!0,t&&(!r&&n&&u&&(e=Er),r&&n&&i&&(e=xr),(r&&!n&&s||!r&&d&&!n&&s)&&(e=kr),e&&(M(e),Q()))}),[n]),(0,e.useEffect)((function(){(T===Er&&!u||T===xr&&!i||T===kr&&!s)&&M(wr)}),[u,i,s]),(0,e.useEffect)((function(){return function(){clearTimeout(L.current),I.current=!0}}),[]),(0,e.useEffect)((function(){void 0!==P&&T===wr&&(null==S||S(P))}),[P,T]);var Z=A;return q.prepare&&G===Or&&(Z=H({transition:"none"},Z)),[T,G,Z,null!=P?P:n]}var Fr=function(e){rt(n,e);var t=lt(n);function n(){return Je(this,n),t.apply(this,arguments)}return tt(n,[{key:"render",value:function(){return this.props.children}}]),n}(e.Component);const jr=Fr,Lr=function(t){var n=t;function r(e){return!(!e.motionName||!n)}"object"===Z(t)&&(n=t.transitionSupport);var a=e.forwardRef((function(t,n){var a=t.visible,o=void 0===a||a,i=t.removeOnLeave,l=void 0===i||i,u=t.forceRender,c=t.children,s=t.motionName,f=t.leavedClassName,d=t.eventProps,p=r(t),m=(0,e.useRef)(),h=(0,e.useRef)(),v=K(Ar(p,o,(function(){try{return m.current instanceof HTMLElement?m.current:yt(h.current)}catch(e){return null}}),t),4),g=v[0],y=v[1],b=v[2],w=v[3],E=e.useRef(w);w&&(E.current=!0);var x,k=e.useCallback((function(e){m.current=e,ht(n,e)}),[]),C=H(H({},d),{},{visible:o});if(c)if(g!==wr&&r(t)){var S,O;y===Sr?O="prepare":Rr(y)?O="active":y===Or&&(O="start"),x=c(H(H({},C),{},{className:G()(br(s,g),(S={},D(S,br(s,"".concat(g,"-").concat(O)),O),D(S,s,"string"==typeof s),S)),style:b}),k)}else x=w?c(H({},C),k):!l&&E.current?c(H(H({},C),{},{className:f}),k):u?c(H(H({},C),{},{style:{display:"none"}}),k):null;else x=null;return e.createElement(jr,{ref:h},x)}));return a.displayName="CSSMotion",a}(vr);var Ir="add",zr="keep",Dr="remove",Vr="removed";function Hr(e){var t;return H(H({},t=e&&"object"===Z(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function Ur(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(Hr)}function Br(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,a=t.length,o=Ur(e),i=Ur(t);o.forEach((function(e){for(var t=!1,o=r;o<a;o+=1){var l=i[o];if(l.key===e.key){r<o&&(n=n.concat(i.slice(r,o).map((function(e){return H(H({},e),{},{status:Ir})}))),r=o),n.push(H(H({},l),{},{status:zr})),r+=1,t=!0;break}}t||n.push(H(H({},e),{},{status:Dr}))})),r<a&&(n=n.concat(i.slice(r).map((function(e){return H(H({},e),{},{status:Ir})}))));var l={};n.forEach((function(e){var t=e.key;l[t]=(l[t]||0)+1}));var u=Object.keys(l).filter((function(e){return l[e]>1}));return u.forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==Dr}))).forEach((function(t){t.key===e&&(t.status=zr)}))})),n}var Wr=["component","children","onVisibleChanged"],$r=["status"],qr=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];!function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Lr,a=function(t){rt(o,t);var a=lt(o);function o(){var e;Je(this,o);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return(e=a.call.apply(a,[this].concat(n))).state={keyEntities:[]},e.removeKey=function(t){e.setState((function(e){return{keyEntities:e.keyEntities.map((function(e){return e.key!==t?e:H(H({},e),{},{status:Vr})}))}}))},e}return tt(o,[{key:"render",value:function(){var t=this,a=this.state.keyEntities,o=this.props,i=o.component,l=o.children,u=o.onVisibleChanged,c=Y(o,Wr),s=i||e.Fragment,f={};return qr.forEach((function(e){f[e]=c[e],delete c[e]})),delete c.keys,e.createElement(s,c,a.map((function(a){var o=a.status,i=Y(a,$r),c=o===Ir||o===zr;return e.createElement(n,r({},f,{key:i.key,visible:c,eventProps:i,onVisibleChanged:function(e){null==u||u(e,{key:i.key}),e||t.removeKey(i.key)}}),l)})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,a=Ur(n);return{keyEntities:Br(r,a).filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==Vr||e.status!==Dr}))}}}]),o}(e.Component);a.defaultProps={component:"div"}}(vr);const Kr=Lr;function Yr(e){var t=e.prefixCls,n=e.motion,r=e.animation,a=e.transitionName;return n||(r?{motionName:"".concat(t,"-").concat(r)}:a?{motionName:a}:null)}function Qr(t){var n=t.prefixCls,a=t.visible,o=t.zIndex,i=t.mask,l=t.maskMotion,u=t.maskAnimation,c=t.maskTransitionName;if(!i)return null;var s={};return(l||c||u)&&(s=H({motionAppear:!0},Yr({motion:l,prefixCls:n,transitionName:c,animation:u}))),e.createElement(Kr,r({},s,{visible:a,removeOnLeave:!0}),(function(t){var r=t.className;return e.createElement("div",{style:{zIndex:o},className:G()("".concat(n,"-mask"),r)})}))}const Gr=function(e){if(!e)return!1;if(e.offsetParent)return!0;if(e.getBBox){var t=e.getBBox();if(t.width||t.height)return!0}if(e.getBoundingClientRect){var n=e.getBoundingClientRect();if(n.width||n.height)return!0}return!1};function Xr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Xr(Object(n),!0).forEach((function(t){ea(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Xr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Jr(e){return Jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Jr(e)}function ea(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ta,na={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-",O:"-o-"};function ra(){if(void 0!==ta)return ta;ta="";var e=document.createElement("p").style;for(var t in na)t+"Transform"in e&&(ta=t);return ta}function aa(){return ra()?"".concat(ra(),"TransitionProperty"):"transitionProperty"}function oa(){return ra()?"".concat(ra(),"Transform"):"transform"}function ia(e,t){var n=aa();n&&(e.style[n]=t,"transitionProperty"!==n&&(e.style.transitionProperty=t))}function la(e,t){var n=oa();n&&(e.style[n]=t,"transform"!==n&&(e.style.transform=t))}var ua,ca=/matrix\((.*)\)/,sa=/matrix3d\((.*)\)/;function fa(e){var t=e.style.display;e.style.display="none",e.offsetHeight,e.style.display=t}function da(e,t,n){var r=n;if("object"!==Jr(t))return void 0!==r?("number"==typeof r&&(r="".concat(r,"px")),void(e.style[t]=r)):ua(e,t);for(var a in t)t.hasOwnProperty(a)&&da(e,a,t[a])}function pa(e,t){var n=e["page".concat(t?"Y":"X","Offset")],r="scroll".concat(t?"Top":"Left");if("number"!=typeof n){var a=e.document;"number"!=typeof(n=a.documentElement[r])&&(n=a.body[r])}return n}function ma(e){return pa(e)}function ha(e){return pa(e,!0)}function va(e){var t=function(e){var t,n,r,a=e.ownerDocument,o=a.body,i=a&&a.documentElement;return n=(t=e.getBoundingClientRect()).left,r=t.top,{left:n-=i.clientLeft||o.clientLeft||0,top:r-=i.clientTop||o.clientTop||0}}(e),n=e.ownerDocument,r=n.defaultView||n.parentWindow;return t.left+=ma(r),t.top+=ha(r),t}function ga(e){return null!=e&&e==e.window}function ya(e){return ga(e)?e.document:9===e.nodeType?e:e.ownerDocument}var ba=new RegExp("^(".concat(/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,")(?!px)[a-z%]+$"),"i"),wa=/^(top|right|bottom|left)$/;function Ea(e,t){return"left"===e?t.useCssRight?"right":e:t.useCssBottom?"bottom":e}function xa(e){return"left"===e?"right":"right"===e?"left":"top"===e?"bottom":"bottom"===e?"top":void 0}function ka(e,t,n){"static"===da(e,"position")&&(e.style.position="relative");var r=-999,a=-999,o=Ea("left",n),i=Ea("top",n),l=xa(o),u=xa(i);"left"!==o&&(r=999),"top"!==i&&(a=999);var c,s="",f=va(e);("left"in t||"top"in t)&&(s=(c=e).style.transitionProperty||c.style[aa()]||"",ia(e,"none")),"left"in t&&(e.style[l]="",e.style[o]="".concat(r,"px")),"top"in t&&(e.style[u]="",e.style[i]="".concat(a,"px")),fa(e);var d=va(e),p={};for(var m in t)if(t.hasOwnProperty(m)){var h=Ea(m,n),v="left"===m?r:a,g=f[m]-d[m];p[h]=h===m?v+g:v-g}da(e,p),fa(e),("left"in t||"top"in t)&&ia(e,s);var y={};for(var b in t)if(t.hasOwnProperty(b)){var w=Ea(b,n),E=t[b]-f[b];y[w]=b===w?p[w]+E:p[w]-E}da(e,y)}function Ca(e,t){for(var n=0;n<e.length;n++)t(e[n])}function Sa(e){return"border-box"===ua(e,"boxSizing")}"undefined"!=typeof window&&(ua=window.getComputedStyle?function(e,t,n){var r=n,a="",o=ya(e);return(r=r||o.defaultView.getComputedStyle(e,null))&&(a=r.getPropertyValue(t)||r[t]),a}:function(e,t){var n=e.currentStyle&&e.currentStyle[t];if(ba.test(n)&&!wa.test(t)){var r=e.style,a=r.left,o=e.runtimeStyle.left;e.runtimeStyle.left=e.currentStyle.left,r.left="fontSize"===t?"1em":n||0,n=r.pixelLeft+"px",r.left=a,e.runtimeStyle.left=o}return""===n?"auto":n});var Oa=["margin","border","padding"];function Pa(e,t,n){var r,a={},o=e.style;for(r in t)t.hasOwnProperty(r)&&(a[r]=o[r],o[r]=t[r]);for(r in n.call(e),t)t.hasOwnProperty(r)&&(o[r]=a[r])}function Na(e,t,n){var r,a,o,i=0;for(a=0;a<t.length;a++)if(r=t[a])for(o=0;o<n.length;o++){var l;l="border"===r?"".concat(r).concat(n[o],"Width"):r+n[o],i+=parseFloat(ua(e,l))||0}return i}var _a={getParent:function(e){var t=e;do{t=11===t.nodeType&&t.host?t.host:t.parentNode}while(t&&1!==t.nodeType&&9!==t.nodeType);return t}};function Ta(e,t,n){var r=n;if(ga(e))return"width"===t?_a.viewportWidth(e):_a.viewportHeight(e);if(9===e.nodeType)return"width"===t?_a.docWidth(e):_a.docHeight(e);var a="width"===t?["Left","Right"]:["Top","Bottom"],o="width"===t?e.getBoundingClientRect().width:e.getBoundingClientRect().height,i=Sa(e),l=0;(null==o||o<=0)&&(o=void 0,(null==(l=ua(e,t))||Number(l)<0)&&(l=e.style[t]||0),l=parseFloat(l)||0),void 0===r&&(r=i?1:-1);var u=void 0!==o||i,c=o||l;return-1===r?u?c-Na(e,["border","padding"],a):l:u?1===r?c:c+(2===r?-Na(e,["border"],a):Na(e,["margin"],a)):l+Na(e,Oa.slice(r),a)}Ca(["Width","Height"],(function(e){_a["doc".concat(e)]=function(t){var n=t.document;return Math.max(n.documentElement["scroll".concat(e)],n.body["scroll".concat(e)],_a["viewport".concat(e)](n))},_a["viewport".concat(e)]=function(t){var n="client".concat(e),r=t.document,a=r.body,o=r.documentElement[n];return"CSS1Compat"===r.compatMode&&o||a&&a[n]||o}}));var Ma={position:"absolute",visibility:"hidden",display:"block"};function Ra(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r,a=t[0];return 0!==a.offsetWidth?r=Ta.apply(void 0,t):Pa(a,Ma,(function(){r=Ta.apply(void 0,t)})),r}function Aa(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}Ca(["width","height"],(function(e){var t=e.charAt(0).toUpperCase()+e.slice(1);_a["outer".concat(t)]=function(t,n){return t&&Ra(t,e,n?0:1)};var n="width"===e?["Left","Right"]:["Top","Bottom"];_a[e]=function(t,r){var a=r;return void 0!==a?t?(Sa(t)&&(a+=Na(t,["padding","border"],n)),da(t,e,a)):void 0:t&&Ra(t,e,-1)}}));var Fa={getWindow:function(e){if(e&&e.document&&e.setTimeout)return e;var t=e.ownerDocument||e;return t.defaultView||t.parentWindow},getDocument:ya,offset:function(e,t,n){if(void 0===t)return va(e);!function(e,t,n){if(n.ignoreShake){var r=va(e),a=r.left.toFixed(0),o=r.top.toFixed(0),i=t.left.toFixed(0),l=t.top.toFixed(0);if(a===i&&o===l)return}n.useCssRight||n.useCssBottom?ka(e,t,n):n.useCssTransform&&oa()in document.body.style?function(e,t){var n=va(e),r=function(e){var t=window.getComputedStyle(e,null),n=t.getPropertyValue("transform")||t.getPropertyValue(oa());if(n&&"none"!==n){var r=n.replace(/[^0-9\-.,]/g,"").split(",");return{x:parseFloat(r[12]||r[4],0),y:parseFloat(r[13]||r[5],0)}}return{x:0,y:0}}(e),a={x:r.x,y:r.y};"left"in t&&(a.x=r.x+t.left-n.left),"top"in t&&(a.y=r.y+t.top-n.top),function(e,t){var n=window.getComputedStyle(e,null),r=n.getPropertyValue("transform")||n.getPropertyValue(oa());if(r&&"none"!==r){var a,o=r.match(ca);o?((a=(o=o[1]).split(",").map((function(e){return parseFloat(e,10)})))[4]=t.x,a[5]=t.y,la(e,"matrix(".concat(a.join(","),")"))):((a=r.match(sa)[1].split(",").map((function(e){return parseFloat(e,10)})))[12]=t.x,a[13]=t.y,la(e,"matrix3d(".concat(a.join(","),")")))}else la(e,"translateX(".concat(t.x,"px) translateY(").concat(t.y,"px) translateZ(0)"))}(e,a)}(e,t):ka(e,t,n)}(e,t,n||{})},isWindow:ga,each:Ca,css:da,clone:function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);if(e.overflow)for(t in e)e.hasOwnProperty(t)&&(n.overflow[t]=e.overflow[t]);return n},mix:Aa,getWindowScrollLeft:function(e){return ma(e)},getWindowScrollTop:function(e){return ha(e)},merge:function(){for(var e={},t=0;t<arguments.length;t++)Fa.mix(e,t<0||arguments.length<=t?void 0:arguments[t]);return e},viewportWidth:0,viewportHeight:0};Aa(Fa,_a);var ja=Fa.getParent;function La(e){if(Fa.isWindow(e)||9===e.nodeType)return null;var t,n=Fa.getDocument(e).body,r=Fa.css(e,"position");if("fixed"!==r&&"absolute"!==r)return"html"===e.nodeName.toLowerCase()?null:ja(e);for(t=ja(e);t&&t!==n&&9!==t.nodeType;t=ja(t))if("static"!==(r=Fa.css(t,"position")))return t;return null}var Ia=Fa.getParent;function za(e,t){for(var n={left:0,right:1/0,top:0,bottom:1/0},r=La(e),a=Fa.getDocument(e),o=a.defaultView||a.parentWindow,i=a.body,l=a.documentElement;r;){if(-1!==navigator.userAgent.indexOf("MSIE")&&0===r.clientWidth||r===i||r===l||"visible"===Fa.css(r,"overflow")){if(r===i||r===l)break}else{var u=Fa.offset(r);u.left+=r.clientLeft,u.top+=r.clientTop,n.top=Math.max(n.top,u.top),n.right=Math.min(n.right,u.left+r.clientWidth),n.bottom=Math.min(n.bottom,u.top+r.clientHeight),n.left=Math.max(n.left,u.left)}r=La(r)}var c=null;Fa.isWindow(e)||9===e.nodeType||(c=e.style.position,"absolute"===Fa.css(e,"position")&&(e.style.position="fixed"));var s=Fa.getWindowScrollLeft(o),f=Fa.getWindowScrollTop(o),d=Fa.viewportWidth(o),p=Fa.viewportHeight(o),m=l.scrollWidth,h=l.scrollHeight,v=window.getComputedStyle(i);if("hidden"===v.overflowX&&(m=o.innerWidth),"hidden"===v.overflowY&&(h=o.innerHeight),e.style&&(e.style.position=c),t||function(e){if(Fa.isWindow(e)||9===e.nodeType)return!1;var t=Fa.getDocument(e),n=t.body,r=null;for(r=Ia(e);r&&r!==n&&r!==t;r=Ia(r))if("fixed"===Fa.css(r,"position"))return!0;return!1}(e))n.left=Math.max(n.left,s),n.top=Math.max(n.top,f),n.right=Math.min(n.right,s+d),n.bottom=Math.min(n.bottom,f+p);else{var g=Math.max(m,s+d);n.right=Math.min(n.right,g);var y=Math.max(h,f+p);n.bottom=Math.min(n.bottom,y)}return n.top>=0&&n.left>=0&&n.bottom>n.top&&n.right>n.left?n:null}function Da(e){var t,n,r;if(Fa.isWindow(e)||9===e.nodeType){var a=Fa.getWindow(e);t={left:Fa.getWindowScrollLeft(a),top:Fa.getWindowScrollTop(a)},n=Fa.viewportWidth(a),r=Fa.viewportHeight(a)}else t=Fa.offset(e),n=Fa.outerWidth(e),r=Fa.outerHeight(e);return t.width=n,t.height=r,t}function Va(e,t){var n=t.charAt(0),r=t.charAt(1),a=e.width,o=e.height,i=e.left,l=e.top;return"c"===n?l+=o/2:"b"===n&&(l+=o),"c"===r?i+=a/2:"r"===r&&(i+=a),{left:i,top:l}}function Ha(e,t,n,r,a){var o=Va(t,n[1]),i=Va(e,n[0]),l=[i.left-o.left,i.top-o.top];return{left:Math.round(e.left-l[0]+r[0]-a[0]),top:Math.round(e.top-l[1]+r[1]-a[1])}}function Ua(e,t,n){return e.left<n.left||e.left+t.width>n.right}function Ba(e,t,n){return e.top<n.top||e.top+t.height>n.bottom}function Wa(e,t,n){var r=[];return Fa.each(e,(function(e){r.push(e.replace(t,(function(e){return n[e]})))})),r}function $a(e,t){return e[t]=-e[t],e}function qa(e,t){return(/%$/.test(e)?parseInt(e.substring(0,e.length-1),10)/100*t:parseInt(e,10))||0}function Ka(e,t){e[0]=qa(e[0],t.width),e[1]=qa(e[1],t.height)}function Ya(e,t,n,r){var a=n.points,o=n.offset||[0,0],i=n.targetOffset||[0,0],l=n.overflow,u=n.source||e;o=[].concat(o),i=[].concat(i);var c={},s=0,f=za(u,!(!(l=l||{})||!l.alwaysByViewport)),d=Da(u);Ka(o,d),Ka(i,t);var p=Ha(d,t,a,o,i),m=Fa.merge(d,p);if(f&&(l.adjustX||l.adjustY)&&r){if(l.adjustX&&Ua(p,d,f)){var h=Wa(a,/[lr]/gi,{l:"r",r:"l"}),v=$a(o,0),g=$a(i,0);(function(e,t,n){return e.left>n.right||e.left+t.width<n.left})(Ha(d,t,h,v,g),d,f)||(s=1,a=h,o=v,i=g)}if(l.adjustY&&Ba(p,d,f)){var y=Wa(a,/[tb]/gi,{t:"b",b:"t"}),b=$a(o,1),w=$a(i,1);(function(e,t,n){return e.top>n.bottom||e.top+t.height<n.top})(Ha(d,t,y,b,w),d,f)||(s=1,a=y,o=b,i=w)}s&&(p=Ha(d,t,a,o,i),Fa.mix(m,p));var E=Ua(p,d,f),x=Ba(p,d,f);if(E||x){var k=a;E&&(k=Wa(a,/[lr]/gi,{l:"r",r:"l"})),x&&(k=Wa(a,/[tb]/gi,{t:"b",b:"t"})),a=k,o=n.offset||[0,0],i=n.targetOffset||[0,0]}c.adjustX=l.adjustX&&E,c.adjustY=l.adjustY&&x,(c.adjustX||c.adjustY)&&(m=function(e,t,n,r){var a=Fa.clone(e),o={width:t.width,height:t.height};return r.adjustX&&a.left<n.left&&(a.left=n.left),r.resizeWidth&&a.left>=n.left&&a.left+o.width>n.right&&(o.width-=a.left+o.width-n.right),r.adjustX&&a.left+o.width>n.right&&(a.left=Math.max(n.right-o.width,n.left)),r.adjustY&&a.top<n.top&&(a.top=n.top),r.resizeHeight&&a.top>=n.top&&a.top+o.height>n.bottom&&(o.height-=a.top+o.height-n.bottom),r.adjustY&&a.top+o.height>n.bottom&&(a.top=Math.max(n.bottom-o.height,n.top)),Fa.mix(a,o)}(p,d,f,c))}return m.width!==d.width&&Fa.css(u,"width",Fa.width(u)+m.width-d.width),m.height!==d.height&&Fa.css(u,"height",Fa.height(u)+m.height-d.height),Fa.offset(u,{left:m.left,top:m.top},{useCssRight:n.useCssRight,useCssBottom:n.useCssBottom,useCssTransform:n.useCssTransform,ignoreShake:n.ignoreShake}),{points:a,offset:o,targetOffset:i,overflow:c}}function Qa(e,t,n){var r=n.target||t,a=Da(r),o=!function(e,t){var n=za(e,t),r=Da(e);return!n||r.left+r.width<=n.left||r.top+r.height<=n.top||r.left>=n.right||r.top>=n.bottom}(r,n.overflow&&n.overflow.alwaysByViewport);return Ya(e,a,n,o)}Qa.__getOffsetParent=La,Qa.__getVisibleRectForElement=za;var Ga=n(8446),Xa=n.n(Ga);function Za(e,t){var n=null,r=null,a=new Dt((function(e){var a=K(e,1)[0].target;if(document.documentElement.contains(a)){var o=a.getBoundingClientRect(),i=o.width,l=o.height,u=Math.floor(i),c=Math.floor(l);n===u&&r===c||Promise.resolve().then((function(){t({width:u,height:c})})),n=u,r=c}}));return e&&a.observe(e),function(){a.disconnect()}}function Ja(e){return"function"!=typeof e?null:e()}function eo(e){return"object"===Z(e)&&e?e:null}var to=function(t,n){var r=t.children,a=t.disabled,o=t.target,i=t.align,l=t.onAlign,u=t.monitorWindowResize,c=t.monitorBufferTime,s=void 0===c?0:c,f=e.useRef({}),d=e.useRef(),p=e.Children.only(r),m=e.useRef({});m.current.disabled=a,m.current.target=o,m.current.align=i,m.current.onAlign=l;var h=function(t,n){var r=e.useRef(!1),a=e.useRef(null);function o(){window.clearTimeout(a.current)}return[function e(t){if(r.current&&!0!==t)o(),a.current=window.setTimeout((function(){r.current=!1,e()}),n);else{if(!1===function(){var e=m.current,t=e.disabled,n=e.target,r=e.align,a=e.onAlign;if(!t&&n){var o,i=d.current,l=Ja(n),u=eo(n);f.current.element=l,f.current.point=u,f.current.align=r;var c=document.activeElement;return l&&Gr(l)?o=Qa(i,l,r):u&&(o=function(e,t,n){var r,a,o=Fa.getDocument(e),i=o.defaultView||o.parentWindow,l=Fa.getWindowScrollLeft(i),u=Fa.getWindowScrollTop(i),c=Fa.viewportWidth(i),s=Fa.viewportHeight(i),f={left:r="pageX"in t?t.pageX:l+t.clientX,top:a="pageY"in t?t.pageY:u+t.clientY,width:0,height:0},d=r>=0&&r<=l+c&&a>=0&&a<=u+s,p=[n.points[0],"cc"];return Ya(e,f,Zr(Zr({},n),{},{points:p}),d)}(i,u,r)),function(e,t){e!==document.activeElement&&Jn(t,e)&&"function"==typeof e.focus&&e.focus()}(c,i),a&&o&&a(i,o),!0}return!1}())return;r.current=!0,o(),a.current=window.setTimeout((function(){r.current=!1}),n)}},function(){r.current=!1,o()}]}(0,s),v=K(h,2),g=v[0],y=v[1],b=e.useRef({cancel:function(){}}),w=e.useRef({cancel:function(){}});e.useEffect((function(){var e,t,n=Ja(o),r=eo(o);d.current!==w.current.element&&(w.current.cancel(),w.current.element=d.current,w.current.cancel=Za(d.current,g)),f.current.element===n&&((e=f.current.point)===(t=r)||e&&t&&("pageX"in t&&"pageY"in t?e.pageX===t.pageX&&e.pageY===t.pageY:"clientX"in t&&"clientY"in t&&e.clientX===t.clientX&&e.clientY===t.clientY))&&Xa()(f.current.align,i)||(g(),b.current.element!==n&&(b.current.cancel(),b.current.element=n,b.current.cancel=Za(n,g)))})),e.useEffect((function(){a?y():g()}),[a]);var E=e.useRef(null);return e.useEffect((function(){u?E.current||(E.current=er(window,"resize",g)):E.current&&(E.current.remove(),E.current=null)}),[u]),e.useEffect((function(){return function(){b.current.cancel(),w.current.cancel(),E.current&&E.current.remove(),y()}}),[]),e.useImperativeHandle(n,(function(){return{forceAlign:function(){return g(!0)}}})),e.isValidElement(p)&&(p=e.cloneElement(p,{ref:vt(p.ref,d)})),p},no=e.forwardRef(to);no.displayName="Align";const ro=no;var ao=n(7757),oo=n.n(ao);function io(e,t,n,r,a,o,i){try{var l=e[o](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,a)}function lo(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var o=e.apply(t,n);function i(e){io(o,r,a,i,l,"next",e)}function l(e){io(o,r,a,i,l,"throw",e)}i(void 0)}))}}var uo=["measure","align",null,"motion"],co=e.forwardRef((function(t,n){var a=t.visible,o=t.prefixCls,i=t.className,l=t.style,u=t.children,c=t.zIndex,s=t.stretch,f=t.destroyPopupOnHide,d=t.forceRender,p=t.align,m=t.point,h=t.getRootDomNode,v=t.getClassNameFromAlign,g=t.onAlign,y=t.onMouseEnter,b=t.onMouseLeave,w=t.onMouseDown,E=t.onTouchStart,x=(0,e.useRef)(),k=(0,e.useRef)(),C=K((0,e.useState)(),2),S=C[0],O=C[1],P=function(t){var n=K(e.useState({width:0,height:0}),2),r=n[0],a=n[1];return[e.useMemo((function(){var e={};if(t){var n=r.width,a=r.height;-1!==t.indexOf("height")&&a?e.height=a:-1!==t.indexOf("minHeight")&&a&&(e.minHeight=a),-1!==t.indexOf("width")&&n?e.width=n:-1!==t.indexOf("minWidth")&&n&&(e.minWidth=n)}return e}),[t,r]),function(e){a({width:e.offsetWidth,height:e.offsetHeight})}]}(s),N=K(P,2),_=N[0],T=N[1],M=function(t,n){var r=K((0,e.useState)(null),2),a=r[0],o=r[1],i=(0,e.useRef)(),l=(0,e.useRef)(!1);function u(e){l.current||o(e)}function c(){an.cancel(i.current)}return(0,e.useEffect)((function(){u("measure")}),[t]),(0,e.useEffect)((function(){"measure"===a&&(s&&T(h())),a&&(i.current=an(lo(oo().mark((function e(){var t,n;return oo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=uo.indexOf(a),(n=uo[t+1])&&-1!==t&&u(n);case 3:case"end":return e.stop()}}),e)})))))}),[a]),(0,e.useEffect)((function(){return function(){l.current=!0,c()}}),[]),[a,function(e){c(),i.current=an((function(){u((function(e){switch(a){case"align":return"motion";case"motion":return"stable"}return e})),null==e||e()}))}]}(a),R=K(M,2),A=R[0],F=R[1],j=(0,e.useRef)();function L(){var e;null===(e=x.current)||void 0===e||e.forceAlign()}function I(e,t){var n=v(t);S!==n&&O(n),"align"===A&&(S!==n?Promise.resolve().then((function(){L()})):F((function(){var e;null===(e=j.current)||void 0===e||e.call(j)})),null==g||g(e,t))}var z=H({},Yr(t));function D(){return new Promise((function(e){j.current=e}))}["onAppearEnd","onEnterEnd","onLeaveEnd"].forEach((function(e){var t=z[e];z[e]=function(e,n){return F(),null==t?void 0:t(e,n)}})),e.useEffect((function(){z.motionName||"motion"!==A||F()}),[z.motionName,A]),e.useImperativeHandle(n,(function(){return{forceAlign:L,getElement:function(){return k.current}}}));var V=H(H({},_),{},{zIndex:c,opacity:"motion"!==A&&"stable"!==A&&a?0:void 0,pointerEvents:"stable"===A?void 0:"none"},l),U=!0;!(null==p?void 0:p.points)||"align"!==A&&"stable"!==A||(U=!1);var B=u;return e.Children.count(u)>1&&(B=e.createElement("div",{className:"".concat(o,"-content")},u)),e.createElement(Kr,r({visible:a,ref:k,leavedClassName:"".concat(o,"-hidden")},z,{onAppearPrepare:D,onEnterPrepare:D,removeOnLeave:f,forceRender:d}),(function(t,n){var r=t.className,a=t.style,l=G()(o,i,S,r);return e.createElement(ro,{target:m||h,key:"popup",ref:x,monitorWindowResize:!0,disabled:U,align:p,onAlign:I},e.createElement("div",{ref:n,className:l,onMouseEnter:y,onMouseLeave:b,onMouseDownCapture:w,onTouchStartCapture:E,style:H(H({},a),V)},B))}))}));co.displayName="PopupInner";const so=co;var fo=e.forwardRef((function(t,n){var a=t.prefixCls,o=t.visible,i=t.zIndex,l=t.children,u=t.mobile,c=(u=void 0===u?{}:u).popupClassName,s=u.popupStyle,f=u.popupMotion,d=void 0===f?{}:f,p=u.popupRender,m=e.useRef();e.useImperativeHandle(n,(function(){return{forceAlign:function(){},getElement:function(){return m.current}}}));var h=H({zIndex:i},s),v=l;return e.Children.count(l)>1&&(v=e.createElement("div",{className:"".concat(a,"-content")},l)),p&&(v=p(v)),e.createElement(Kr,r({visible:o,ref:m,removeOnLeave:!0},d),(function(t,n){var r=t.className,o=t.style,i=G()(a,c,r);return e.createElement("div",{ref:n,className:i,style:H(H({},o),h)},v)}))}));fo.displayName="MobilePopupInner";const po=fo;var mo=["visible","mobile"],ho=e.forwardRef((function(t,n){var a=t.visible,o=t.mobile,i=Y(t,mo),l=K((0,e.useState)(a),2),u=l[0],c=l[1],s=K((0,e.useState)(!1),2),f=s[0],d=s[1],p=H(H({},i),{},{visible:u});(0,e.useEffect)((function(){c(a),a&&o&&d(ar())}),[a,o]);var m=f?e.createElement(po,r({},p,{mobile:o,ref:n})):e.createElement(so,r({},p,{ref:n}));return e.createElement("div",null,e.createElement(Qr,p),m)}));ho.displayName="Popup";const vo=ho,go=e.createContext(null);function yo(){}var bo=["onClick","onMouseDown","onTouchStart","onMouseEnter","onMouseLeave","onFocus","onBlur","onContextMenu"];const wo=(Eo=nr,xo=function(n){rt(o,n);var a=lt(o);function o(n){var i,l;return Je(this,o),(i=a.call(this,n)).popupRef=e.createRef(),i.triggerRef=e.createRef(),i.attachId=void 0,i.clickOutsideHandler=void 0,i.touchOutsideHandler=void 0,i.contextMenuOutsideHandler1=void 0,i.contextMenuOutsideHandler2=void 0,i.mouseDownTimeout=void 0,i.focusTime=void 0,i.preClickTime=void 0,i.preTouchTime=void 0,i.delayTimer=void 0,i.hasPopupMouseDown=void 0,i.onMouseEnter=function(e){var t=i.props.mouseEnterDelay;i.fireEvents("onMouseEnter",e),i.delaySetPopupVisible(!0,t,t?null:e)},i.onMouseMove=function(e){i.fireEvents("onMouseMove",e),i.setPoint(e)},i.onMouseLeave=function(e){i.fireEvents("onMouseLeave",e),i.delaySetPopupVisible(!1,i.props.mouseLeaveDelay)},i.onPopupMouseEnter=function(){i.clearDelayTimer()},i.onPopupMouseLeave=function(e){var t;e.relatedTarget&&!e.relatedTarget.setTimeout&&Jn(null===(t=i.popupRef.current)||void 0===t?void 0:t.getElement(),e.relatedTarget)||i.delaySetPopupVisible(!1,i.props.mouseLeaveDelay)},i.onFocus=function(e){i.fireEvents("onFocus",e),i.clearDelayTimer(),i.isFocusToShow()&&(i.focusTime=Date.now(),i.delaySetPopupVisible(!0,i.props.focusDelay))},i.onMouseDown=function(e){i.fireEvents("onMouseDown",e),i.preClickTime=Date.now()},i.onTouchStart=function(e){i.fireEvents("onTouchStart",e),i.preTouchTime=Date.now()},i.onBlur=function(e){i.fireEvents("onBlur",e),i.clearDelayTimer(),i.isBlurToHide()&&i.delaySetPopupVisible(!1,i.props.blurDelay)},i.onContextMenu=function(e){e.preventDefault(),i.fireEvents("onContextMenu",e),i.setPopupVisible(!0,e)},i.onContextMenuClose=function(){i.isContextMenuToShow()&&i.close()},i.onClick=function(e){if(i.fireEvents("onClick",e),i.focusTime){var t;if(i.preClickTime&&i.preTouchTime?t=Math.min(i.preClickTime,i.preTouchTime):i.preClickTime?t=i.preClickTime:i.preTouchTime&&(t=i.preTouchTime),Math.abs(t-i.focusTime)<20)return;i.focusTime=0}i.preClickTime=0,i.preTouchTime=0,i.isClickToShow()&&(i.isClickToHide()||i.isBlurToHide())&&e&&e.preventDefault&&e.preventDefault();var n=!i.state.popupVisible;(i.isClickToHide()&&!n||n&&i.isClickToShow())&&i.setPopupVisible(!i.state.popupVisible,e)},i.onPopupMouseDown=function(){var e;i.hasPopupMouseDown=!0,clearTimeout(i.mouseDownTimeout),i.mouseDownTimeout=window.setTimeout((function(){i.hasPopupMouseDown=!1}),0),i.context&&(e=i.context).onPopupMouseDown.apply(e,arguments)},i.onDocumentClick=function(e){if(!i.props.mask||i.props.maskClosable){var t=e.target,n=i.getRootDomNode(),r=i.getPopupDomNode();Jn(n,t)&&!i.isContextMenuOnly()||Jn(r,t)||i.hasPopupMouseDown||i.close()}},i.getRootDomNode=function(){var e=i.props.getTriggerDOMNode;if(e)return e(i.triggerRef.current);try{var n=yt(i.triggerRef.current);if(n)return n}catch(e){}return t.findDOMNode(ot(i))},i.getPopupClassNameFromAlign=function(e){var t=[],n=i.props,r=n.popupPlacement,a=n.builtinPlacements,o=n.prefixCls,l=n.alignPoint,u=n.getPopupClassNameFromAlign;return r&&a&&t.push(function(e,t,n,r){for(var a=n.points,o=Object.keys(e),i=0;i<o.length;i+=1){var l=o[i];if(rr(e[l].points,a,r))return"".concat(t,"-placement-").concat(l)}return""}(a,o,e,l)),u&&t.push(u(e)),t.join(" ")},i.getComponent=function(){var t=i.props,n=t.prefixCls,a=t.destroyPopupOnHide,o=t.popupClassName,l=t.onPopupAlign,u=t.popupMotion,c=t.popupAnimation,s=t.popupTransitionName,f=t.popupStyle,d=t.mask,p=t.maskAnimation,m=t.maskTransitionName,h=t.maskMotion,v=t.zIndex,g=t.popup,y=t.stretch,b=t.alignPoint,w=t.mobile,E=t.forceRender,x=i.state,k=x.popupVisible,C=x.point,S=i.getPopupAlign(),O={};return i.isMouseEnterToShow()&&(O.onMouseEnter=i.onPopupMouseEnter),i.isMouseLeaveToHide()&&(O.onMouseLeave=i.onPopupMouseLeave),O.onMouseDown=i.onPopupMouseDown,O.onTouchStart=i.onPopupMouseDown,e.createElement(vo,r({prefixCls:n,destroyPopupOnHide:a,visible:k,point:b&&C,className:o,align:S,onAlign:l,animation:c,getClassNameFromAlign:i.getPopupClassNameFromAlign},O,{stretch:y,getRootDomNode:i.getRootDomNode,style:f,mask:d,zIndex:v,transitionName:s,maskAnimation:p,maskTransitionName:m,maskMotion:h,ref:i.popupRef,motion:u,mobile:w,forceRender:E}),"function"==typeof g?g():g)},i.attachParent=function(e){an.cancel(i.attachId);var t,n=i.props,r=n.getPopupContainer,a=n.getDocument,o=i.getRootDomNode();r?(o||0===r.length)&&(t=r(o)):t=a(i.getRootDomNode()).body,t?t.appendChild(e):i.attachId=an((function(){i.attachParent(e)}))},i.getContainer=function(){var e=(0,i.props.getDocument)(i.getRootDomNode()).createElement("div");return e.style.position="absolute",e.style.top="0",e.style.left="0",e.style.width="100%",i.attachParent(e),e},i.setPoint=function(e){i.props.alignPoint&&e&&i.setState({point:{pageX:e.pageX,pageY:e.pageY}})},i.handlePortalUpdate=function(){i.state.prevPopupVisible!==i.state.popupVisible&&i.props.afterPopupVisibleChange(i.state.popupVisible)},i.triggerContextValue={onPopupMouseDown:i.onPopupMouseDown},l="popupVisible"in n?!!n.popupVisible:!!n.defaultPopupVisible,i.state={prevPopupVisible:l,popupVisible:l},bo.forEach((function(e){i["fire".concat(e)]=function(t){i.fireEvents(e,t)}})),i}return tt(o,[{key:"componentDidMount",value:function(){this.componentDidUpdate()}},{key:"componentDidUpdate",value:function(){var e,t=this.props;if(this.state.popupVisible)return this.clickOutsideHandler||!this.isClickToHide()&&!this.isContextMenuToShow()||(e=t.getDocument(this.getRootDomNode()),this.clickOutsideHandler=er(e,"mousedown",this.onDocumentClick)),this.touchOutsideHandler||(e=e||t.getDocument(this.getRootDomNode()),this.touchOutsideHandler=er(e,"touchstart",this.onDocumentClick)),!this.contextMenuOutsideHandler1&&this.isContextMenuToShow()&&(e=e||t.getDocument(this.getRootDomNode()),this.contextMenuOutsideHandler1=er(e,"scroll",this.onContextMenuClose)),void(!this.contextMenuOutsideHandler2&&this.isContextMenuToShow()&&(this.contextMenuOutsideHandler2=er(window,"blur",this.onContextMenuClose)));this.clearOutsideHandler()}},{key:"componentWillUnmount",value:function(){this.clearDelayTimer(),this.clearOutsideHandler(),clearTimeout(this.mouseDownTimeout),an.cancel(this.attachId)}},{key:"getPopupDomNode",value:function(){var e;return(null===(e=this.popupRef.current)||void 0===e?void 0:e.getElement())||null}},{key:"getPopupAlign",value:function(){var e=this.props,t=e.popupPlacement,n=e.popupAlign,r=e.builtinPlacements;return t&&r?function(e,t,n){return H(H({},e[t]||{}),n)}(r,t,n):n}},{key:"setPopupVisible",value:function(e,t){var n=this.props.alignPoint,r=this.state.popupVisible;this.clearDelayTimer(),r!==e&&("popupVisible"in this.props||this.setState({popupVisible:e,prevPopupVisible:r}),this.props.onPopupVisibleChange(e)),n&&t&&e&&this.setPoint(t)}},{key:"delaySetPopupVisible",value:function(e,t,n){var r=this,a=1e3*t;if(this.clearDelayTimer(),a){var o=n?{pageX:n.pageX,pageY:n.pageY}:null;this.delayTimer=window.setTimeout((function(){r.setPopupVisible(e,o),r.clearDelayTimer()}),a)}else this.setPopupVisible(e,n)}},{key:"clearDelayTimer",value:function(){this.delayTimer&&(clearTimeout(this.delayTimer),this.delayTimer=null)}},{key:"clearOutsideHandler",value:function(){this.clickOutsideHandler&&(this.clickOutsideHandler.remove(),this.clickOutsideHandler=null),this.contextMenuOutsideHandler1&&(this.contextMenuOutsideHandler1.remove(),this.contextMenuOutsideHandler1=null),this.contextMenuOutsideHandler2&&(this.contextMenuOutsideHandler2.remove(),this.contextMenuOutsideHandler2=null),this.touchOutsideHandler&&(this.touchOutsideHandler.remove(),this.touchOutsideHandler=null)}},{key:"createTwoChains",value:function(e){var t=this.props.children.props,n=this.props;return t[e]&&n[e]?this["fire".concat(e)]:t[e]||n[e]}},{key:"isClickToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isContextMenuOnly",value:function(){var e=this.props.action;return"contextMenu"===e||1===e.length&&"contextMenu"===e[0]}},{key:"isContextMenuToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("contextMenu")||-1!==n.indexOf("contextMenu")}},{key:"isClickToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("click")||-1!==n.indexOf("click")}},{key:"isMouseEnterToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseEnter")}},{key:"isMouseLeaveToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("hover")||-1!==n.indexOf("mouseLeave")}},{key:"isFocusToShow",value:function(){var e=this.props,t=e.action,n=e.showAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("focus")}},{key:"isBlurToHide",value:function(){var e=this.props,t=e.action,n=e.hideAction;return-1!==t.indexOf("focus")||-1!==n.indexOf("blur")}},{key:"forcePopupAlign",value:function(){var e;this.state.popupVisible&&(null===(e=this.popupRef.current)||void 0===e||e.forceAlign())}},{key:"fireEvents",value:function(e,t){var n=this.props.children.props[e];n&&n(t);var r=this.props[e];r&&r(t)}},{key:"close",value:function(){this.setPopupVisible(!1)}},{key:"render",value:function(){var t=this.state.popupVisible,n=this.props,r=n.children,a=n.forceRender,o=n.alignPoint,i=n.className,l=n.autoDestroy,u=e.Children.only(r),c={key:"trigger"};this.isContextMenuToShow()?c.onContextMenu=this.onContextMenu:c.onContextMenu=this.createTwoChains("onContextMenu"),this.isClickToHide()||this.isClickToShow()?(c.onClick=this.onClick,c.onMouseDown=this.onMouseDown,c.onTouchStart=this.onTouchStart):(c.onClick=this.createTwoChains("onClick"),c.onMouseDown=this.createTwoChains("onMouseDown"),c.onTouchStart=this.createTwoChains("onTouchStart")),this.isMouseEnterToShow()?(c.onMouseEnter=this.onMouseEnter,o&&(c.onMouseMove=this.onMouseMove)):c.onMouseEnter=this.createTwoChains("onMouseEnter"),this.isMouseLeaveToHide()?c.onMouseLeave=this.onMouseLeave:c.onMouseLeave=this.createTwoChains("onMouseLeave"),this.isFocusToShow()||this.isBlurToHide()?(c.onFocus=this.onFocus,c.onBlur=this.onBlur):(c.onFocus=this.createTwoChains("onFocus"),c.onBlur=this.createTwoChains("onBlur"));var s=G()(u&&u.props&&u.props.className,i);s&&(c.className=s);var f=H({},c);gt(u)&&(f.ref=vt(this.triggerRef,u.ref));var d,p=e.cloneElement(u,f);return(t||this.popupRef.current||a)&&(d=e.createElement(Eo,{key:"portal",getContainer:this.getContainer,didUpdate:this.handlePortalUpdate},this.getComponent())),!t&&l&&(d=null),e.createElement(go.Provider,{value:this.triggerContextValue},p,d)}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.popupVisible,r={};return void 0!==n&&t.popupVisible!==n&&(r.popupVisible=n,r.prevPopupVisible=t.popupVisible),r}}]),o}(e.Component),xo.contextType=go,xo.defaultProps={prefixCls:"rc-trigger-popup",getPopupClassNameFromAlign:function(){return""},getDocument:function(e){return e?e.ownerDocument:window.document},onPopupVisibleChange:yo,afterPopupVisibleChange:yo,onPopupAlign:yo,popupClassName:"",mouseEnterDelay:0,mouseLeaveDelay:.1,focusDelay:0,blurDelay:.15,popupStyle:{},destroyPopupOnHide:!1,popupAlign:{},defaultPopupVisible:!1,mask:!1,maskClosable:!0,action:[],showAction:[],hideAction:[],autoDestroy:!1},xo);var Eo,xo,ko={adjustX:1,adjustY:1},Co={topLeft:{points:["bl","tl"],overflow:ko,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:ko,offset:[0,7]},leftTop:{points:["tr","tl"],overflow:ko,offset:[-4,0]},rightTop:{points:["tl","tr"],overflow:ko,offset:[4,0]}},So={topLeft:{points:["bl","tl"],overflow:ko,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:ko,offset:[0,7]},rightTop:{points:["tr","tl"],overflow:ko,offset:[-4,0]},leftTop:{points:["tl","tr"],overflow:ko,offset:[4,0]}};function Oo(e,t,n){return t||(n?n[e]||n.other:void 0)}var Po={horizontal:"bottomLeft",vertical:"rightTop","vertical-left":"rightTop","vertical-right":"leftTop"};function No(t){var n=t.prefixCls,r=t.visible,a=t.children,o=t.popup,i=t.popupClassName,l=t.popupOffset,u=t.disabled,c=t.mode,s=t.onVisibleChange,f=e.useContext(Cn),d=f.getPopupContainer,p=f.rtl,m=f.subMenuOpenDelay,h=f.subMenuCloseDelay,v=f.builtinPlacements,g=f.triggerSubMenuAction,y=f.forceSubMenuRender,b=f.motion,w=f.defaultMotions,E=K(e.useState(!1),2),x=E[0],k=E[1],C=H(H({},p?So:Co),v),S=Po[c],O=H(H({},Oo(c,b,w)),{},{leavedClassName:"".concat(n,"-hidden"),removeOnLeave:!1,motionAppear:!0}),P=e.useRef();return e.useEffect((function(){return P.current=an((function(){k(r)})),function(){an.cancel(P.current)}}),[r]),e.createElement(wo,{prefixCls:n,popupClassName:G()("".concat(n,"-popup"),D({},"".concat(n,"-rtl"),p),i),stretch:"horizontal"===c?"minWidth":null,getPopupContainer:d,builtinPlacements:C,popupPlacement:S,popupVisible:x,popup:o,popupAlign:l&&{offset:l},action:u?[]:[g],mouseEnterDelay:m,mouseLeaveDelay:h,onPopupVisibleChange:s,forceRender:y,popupMotion:O},a)}function _o(t){var n=t.id,a=t.open,o=t.keyPath,i=t.children,l="inline",u=e.useContext(Cn),c=u.prefixCls,s=u.forceSubMenuRender,f=u.motion,d=u.defaultMotions,p=u.mode,m=e.useRef(!1);m.current=p===l;var h=K(e.useState(!m.current),2),v=h[0],g=h[1],y=!!m.current&&a;e.useEffect((function(){m.current&&g(!1)}),[p]);var b=H({},Oo(l,f,d));o.length>1&&(b.motionAppear=!1);var w=b.onVisibleChanged;return b.onVisibleChanged=function(e){return m.current||e||g(!0),null==w?void 0:w(e)},v?null:e.createElement(Sn,{mode:l,locked:!m.current},e.createElement(Kr,r({visible:y},b,{forceRender:s,removeOnLeave:!1,leavedClassName:"".concat(c,"-hidden")}),(function(t){var r=t.className,a=t.style;return e.createElement(Zn,{id:n,className:r,style:a},i)})))}var To=["style","className","title","eventKey","warnKey","disabled","internalPopupClose","children","itemIcon","expandIcon","popupClassName","popupOffset","onClick","onMouseEnter","onMouseLeave","onTitleClick","onTitleMouseEnter","onTitleMouseLeave"],Mo=["active"],Ro=function(t){var n,a=t.style,o=t.className,i=t.title,l=t.eventKey,u=(t.warnKey,t.disabled),c=t.internalPopupClose,s=t.children,f=t.itemIcon,d=t.expandIcon,p=t.popupClassName,m=t.popupOffset,h=t.onClick,v=t.onMouseEnter,g=t.onMouseLeave,y=t.onTitleClick,b=t.onTitleMouseEnter,w=t.onTitleMouseLeave,E=Y(t,To),x=Dn(l),k=e.useContext(Cn),C=k.prefixCls,S=k.mode,O=k.openKeys,P=k.disabled,N=k.overflowDisabled,_=k.activeKey,T=k.selectedKeys,M=k.itemIcon,R=k.expandIcon,A=k.onItemClick,F=k.onOpenChange,j=k.onActive,L=e.useContext(Vn)._internalRenderSubMenuItem,I=e.useContext(Ln).isSubPathKey,z=jn(),V="".concat(C,"-submenu"),U=P||u,B=e.useRef(),W=e.useRef(),$=f||M,q=d||R,Q=O.includes(l),X=!N&&Q,Z=I(T,l),J=On(l,U,b,w),ee=J.active,te=Y(J,Mo),ne=K(e.useState(!1),2),re=ne[0],ae=ne[1],oe=function(e){U||ae(e)},ie=e.useMemo((function(){return ee||"inline"!==S&&(re||I([_],l))}),[S,ee,_,re,l,I]),le=Tn(z.length),ue=Yn((function(e){null==h||h(Nn(e)),A(e)})),ce=x&&"".concat(x,"-popup"),se=e.createElement("div",r({role:"menuitem",style:le,className:"".concat(V,"-title"),tabIndex:U?null:-1,ref:B,title:"string"==typeof i?i:null,"data-menu-id":N&&x?null:x,"aria-expanded":X,"aria-haspopup":!0,"aria-controls":ce,"aria-disabled":U,onClick:function(e){U||(null==y||y({key:l,domEvent:e}),"inline"===S&&F(l,!Q))},onFocus:function(){j(l)}},te),i,e.createElement(_n,{icon:"horizontal"!==S?q:null,props:H(H({},t),{},{isOpen:X,isSubMenu:!0})},e.createElement("i",{className:"".concat(V,"-arrow")}))),fe=e.useRef(S);if("inline"!==S&&(fe.current=z.length>1?"vertical":S),!N){var de=fe.current;se=e.createElement(No,{mode:de,prefixCls:V,visible:!c&&X&&"inline"!==S,popupClassName:p,popupOffset:m,popup:e.createElement(Sn,{mode:"horizontal"===de?"vertical":de},e.createElement(Zn,{id:ce,ref:W},s)),disabled:U,onVisibleChange:function(e){"inline"!==S&&F(l,e)}},se)}var pe=e.createElement(bn.Item,r({role:"none"},E,{component:"li",style:a,className:G()(V,"".concat(V,"-").concat(S),o,(n={},D(n,"".concat(V,"-open"),X),D(n,"".concat(V,"-active"),ie),D(n,"".concat(V,"-selected"),Z),D(n,"".concat(V,"-disabled"),U),n)),onMouseEnter:function(e){oe(!0),null==v||v({key:l,domEvent:e})},onMouseLeave:function(e){oe(!1),null==g||g({key:l,domEvent:e})}}),se,!N&&e.createElement(_o,{id:ce,open:X,keyPath:z},s));return L&&(pe=L(pe,t)),e.createElement(Sn,{onItemClick:ue,mode:"horizontal"===S?"vertical":S,itemIcon:$,expandIcon:q},pe)};function Ao(t){var n,r=t.eventKey,a=t.children,o=jn(r),i=Kn(a,o),l=An();return e.useEffect((function(){if(l)return l.registerPath(r,o),function(){l.unregisterPath(r,o)}}),[o]),n=l?i:e.createElement(Ro,t,i),e.createElement(Fn.Provider,{value:o},n)}function Fo(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(Gr(e)){var n=e.nodeName.toLowerCase(),r=["input","select","textarea","button"].includes(n)||e.isContentEditable||"a"===n&&!!e.getAttribute("href"),a=e.getAttribute("tabindex"),o=Number(a),i=null;return a&&!Number.isNaN(o)?i=o:r&&null===i&&(i=0),r&&e.disabled&&(i=null),null!==i&&(i>=0||t&&i<0)}return!1}var jo=En.LEFT,Lo=En.RIGHT,Io=En.UP,zo=En.DOWN,Do=En.ENTER,Vo=En.ESC,Ho=En.HOME,Uo=En.END,Bo=[Io,zo,jo,Lo];function Wo(e,t){return function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=ct(e.querySelectorAll("*")).filter((function(e){return Fo(e,t)}));return Fo(e,t)&&n.unshift(e),n}(e,!0).filter((function(e){return t.has(e)}))}function $o(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if(!e)return null;var a=Wo(e,t),o=a.length,i=a.findIndex((function(e){return n===e}));return r<0?-1===i?i=o-1:i-=1:r>0&&(i+=1),a[i=(i+o)%o]}var qo=Math.random().toFixed(5).toString().slice(2),Ko=0,Yo="__RC_UTIL_PATH_SPLIT__",Qo=function(e){return e.join(Yo)},Go="rc-menu-more";var Xo=["prefixCls","style","className","tabIndex","children","direction","id","mode","inlineCollapsed","disabled","disabledOverflow","subMenuOpenDelay","subMenuCloseDelay","forceSubMenuRender","defaultOpenKeys","openKeys","activeKey","defaultActiveFirst","selectable","multiple","defaultSelectedKeys","selectedKeys","onSelect","onDeselect","inlineIndent","motion","defaultMotions","triggerSubMenuAction","builtinPlacements","itemIcon","expandIcon","overflowedIndicator","overflowedIndicatorPopupClassName","getPopupContainer","onClick","onOpenChange","onKeyDown","openAnimation","openTransitionName","_internalRenderMenuItem","_internalRenderSubMenuItem"],Zo=[];var Jo=["className","title","eventKey","children"],ei=["children"],ti=function(t){var n=t.className,a=t.title,o=(t.eventKey,t.children),i=Y(t,Jo),l=e.useContext(Cn).prefixCls,u="".concat(l,"-item-group");return e.createElement("li",r({},i,{onClick:function(e){return e.stopPropagation()},className:G()(u,n)}),e.createElement("div",{className:"".concat(u,"-title"),title:"string"==typeof a?a:void 0},a),e.createElement("ul",{className:"".concat(u,"-list")},o))};function ni(t){var n=t.children,r=Y(t,ei),a=Kn(n,jn(r.eventKey));return An()?a:e.createElement(ti,xn(r,["warnKey"]),a)}function ri(t){var n=t.className,r=t.style,a=e.useContext(Cn).prefixCls;return An()?null:e.createElement("li",{className:G()("".concat(a,"-item-divider"),n),style:r})}var ai=jn,oi=function(t){var n,a,o=t.prefixCls,i=void 0===o?"rc-menu":o,l=t.style,u=t.className,c=t.tabIndex,s=void 0===c?0:c,f=t.children,d=t.direction,p=t.id,m=t.mode,h=void 0===m?"vertical":m,v=t.inlineCollapsed,g=t.disabled,y=t.disabledOverflow,b=t.subMenuOpenDelay,w=void 0===b?.1:b,E=t.subMenuCloseDelay,x=void 0===E?.1:E,k=t.forceSubMenuRender,C=t.defaultOpenKeys,S=t.openKeys,O=t.activeKey,P=t.defaultActiveFirst,N=t.selectable,_=void 0===N||N,T=t.multiple,M=void 0!==T&&T,R=t.defaultSelectedKeys,A=t.selectedKeys,F=t.onSelect,j=t.onDeselect,L=t.inlineIndent,I=void 0===L?24:L,z=t.motion,V=t.defaultMotions,U=t.triggerSubMenuAction,B=void 0===U?"hover":U,W=t.builtinPlacements,$=t.itemIcon,q=t.expandIcon,Q=t.overflowedIndicator,X=void 0===Q?"...":Q,Z=t.overflowedIndicatorPopupClassName,J=t.getPopupContainer,ee=t.onClick,te=t.onOpenChange,ne=t.onKeyDown,re=(t.openAnimation,t.openTransitionName,t._internalRenderMenuItem),ae=t._internalRenderSubMenuItem,oe=Y(t,Xo),ie=Kn(f,Zo),le=K(e.useState(!1),2),ue=le[0],ce=le[1],se=e.useRef(),fe=function(t){var n=K(dt(t,{value:t}),2),r=n[0],a=n[1];return e.useEffect((function(){Ko+=1;var e="".concat(qo,"-").concat(Ko);a("rc-menu-uuid-".concat(e))}),[]),r}(p),de="rtl"===d,pe=K(e.useMemo((function(){return"inline"!==h&&"vertical"!==h||!v?[h,!1]:["vertical",v]}),[h,v]),2),me=pe[0],he=pe[1],ve=K(e.useState(0),2),ge=ve[0],ye=ve[1],be=ge>=ie.length-1||"horizontal"!==me||y,we=K(dt(C,{value:S,postState:function(e){return e||Zo}}),2),Ee=we[0],xe=we[1],ke=function(e){xe(e),null==te||te(e)},Ce=K(e.useState(Ee),2),Se=Ce[0],Oe=Ce[1],Pe="inline"===me,Ne=e.useRef(!1);e.useEffect((function(){Pe&&Oe(Ee)}),[Ee]),e.useEffect((function(){Ne.current?Pe?xe(Se):ke(Zo):Ne.current=!0}),[Pe]);var _e=function(){var t=K(e.useState({}),2)[1],n=(0,e.useRef)(new Map),r=(0,e.useRef)(new Map),a=K(e.useState([]),2),o=a[0],i=a[1],l=(0,e.useRef)(0),u=(0,e.useRef)(!1),c=(0,e.useCallback)((function(e,a){var o=Qo(a);r.current.set(o,e),n.current.set(e,o),l.current+=1;var i,c=l.current;i=function(){c===l.current&&(u.current||t({}))},Promise.resolve().then(i)}),[]),s=(0,e.useCallback)((function(e,t){var a=Qo(t);r.current.delete(a),n.current.delete(e)}),[]),f=(0,e.useCallback)((function(e){i(e)}),[]),d=(0,e.useCallback)((function(e,t){var r=(n.current.get(e)||"").split(Yo);return t&&o.includes(r[0])&&r.unshift(Go),r}),[o]),p=(0,e.useCallback)((function(e,t){return e.some((function(e){return d(e,!0).includes(t)}))}),[d]),m=(0,e.useCallback)((function(e){var t="".concat(n.current.get(e)).concat(Yo),a=new Set;return ct(r.current.keys()).forEach((function(e){e.startsWith(t)&&a.add(r.current.get(e))})),a}),[]);return e.useEffect((function(){return function(){u.current=!0}}),[]),{registerPath:c,unregisterPath:s,refreshOverflowKeys:f,isSubPathKey:p,getKeyPath:d,getKeys:function(){var e=ct(n.current.keys());return o.length&&e.push(Go),e},getSubPathKeys:m}}(),Te=_e.registerPath,Me=_e.unregisterPath,Re=_e.refreshOverflowKeys,Ae=_e.isSubPathKey,Fe=_e.getKeyPath,je=_e.getKeys,Le=_e.getSubPathKeys,Ie=e.useMemo((function(){return{registerPath:Te,unregisterPath:Me}}),[Te,Me]),ze=e.useMemo((function(){return{isSubPathKey:Ae}}),[Ae]);e.useEffect((function(){Re(be?Zo:ie.slice(ge+1).map((function(e){return e.key})))}),[ge,be]);var De=K(dt(O||P&&(null===(n=ie[0])||void 0===n?void 0:n.key),{value:O}),2),Ve=De[0],He=De[1],Ue=Yn((function(e){He(e)})),Be=Yn((function(){He(void 0)})),We=K(dt(R||[],{value:A,postState:function(e){return Array.isArray(e)?e:null==e?Zo:[e]}}),2),$e=We[0],qe=We[1],Ke=Yn((function(e){null==ee||ee(Nn(e)),function(e){if(_){var t,n=e.key,r=$e.includes(n);t=M?r?$e.filter((function(e){return e!==n})):[].concat(ct($e),[n]):[n],qe(t);var a=H(H({},e),{},{selectedKeys:t});r?null==j||j(a):null==F||F(a)}!M&&Ee.length&&"inline"!==me&&ke(Zo)}(e)})),Ye=Yn((function(e,t){var n=Ee.filter((function(t){return t!==e}));if(t)n.push(e);else if("inline"!==me){var r=Le(e);n=n.filter((function(e){return!r.has(e)}))}ft()(Ee,n)||ke(n)})),Qe=Yn(J),Ge=function(t,n,r,a,o,i,l,u,c,s){var f=e.useRef(),d=e.useRef();d.current=n;var p=function(){an.cancel(f.current)};return e.useEffect((function(){return function(){p()}}),[]),function(e){var m=e.which;if([].concat(Bo,[Do,Vo,Ho,Uo]).includes(m)){var h,v,g,y=function(){return h=new Set,v=new Map,g=new Map,i().forEach((function(e){var t=document.querySelector("[data-menu-id='".concat(zn(a,e),"']"));t&&(h.add(t),g.set(t,e),v.set(e,t))})),h};y();var b=function(e,t){for(var n=e||document.activeElement;n;){if(t.has(n))return n;n=n.parentElement}return null}(v.get(n),h),w=g.get(b),E=function(e,t,n,r){var a,o,i,l,u="prev",c="next",s="children",f="parent";if("inline"===e&&r===Do)return{inlineTrigger:!0};var d=(D(a={},Io,u),D(a,zo,c),a),p=(D(o={},jo,n?c:u),D(o,Lo,n?u:c),D(o,zo,s),D(o,Do,s),o),m=(D(i={},Io,u),D(i,zo,c),D(i,Do,s),D(i,Vo,f),D(i,jo,n?s:f),D(i,Lo,n?f:s),i);switch(null===(l={inline:d,horizontal:p,vertical:m,inlineSub:d,horizontalSub:m,verticalSub:m}["".concat(e).concat(t?"":"Sub")])||void 0===l?void 0:l[r]){case u:return{offset:-1,sibling:!0};case c:return{offset:1,sibling:!0};case f:return{offset:-1,sibling:!1};case s:return{offset:1,sibling:!1};default:return null}}(t,1===l(w,!0).length,r,m);if(!E&&m!==Ho&&m!==Uo)return;(Bo.includes(m)||[Ho,Uo].includes(m))&&e.preventDefault();var x=function(e){if(e){var t=e,n=e.querySelector("a");(null==n?void 0:n.getAttribute("href"))&&(t=n);var r=g.get(e);u(r),p(),f.current=an((function(){d.current===r&&t.focus()}))}};if([Ho,Uo].includes(m)||E.sibling||!b){var k,C,S=Wo(k=b&&"inline"!==t?function(e){for(var t=e;t;){if(t.getAttribute("data-menu-list"))return t;t=t.parentElement}return null}(b):o.current,h);C=m===Ho?S[0]:m===Uo?S[S.length-1]:$o(k,h,b,E.offset),x(C)}else if(E.inlineTrigger)c(w);else if(E.offset>0)c(w,!0),p(),f.current=an((function(){y();var e=b.getAttribute("aria-controls"),t=$o(document.getElementById(e),h);x(t)}),5);else if(E.offset<0){var O=l(w,!0),P=O[O.length-2],N=v.get(P);c(P,!1),x(N)}}null==s||s(e)}}(me,Ve,de,fe,se,je,Fe,He,(function(e,t){var n=null!=t?t:!Ee.includes(e);Ye(e,n)}),ne);e.useEffect((function(){ce(!0)}),[]);var Xe=e.useMemo((function(){return{_internalRenderMenuItem:re,_internalRenderSubMenuItem:ae}}),[re,ae]),Ze="horizontal"!==me||y?ie:ie.map((function(t,n){return e.createElement(Sn,{key:t.key,overflowDisabled:n>ge},t)})),Je=e.createElement(bn,r({id:p,ref:se,prefixCls:"".concat(i,"-overflow"),component:"ul",itemComponent:qn,className:G()(i,"".concat(i,"-root"),"".concat(i,"-").concat(me),u,(a={},D(a,"".concat(i,"-inline-collapsed"),he),D(a,"".concat(i,"-rtl"),de),a)),dir:d,style:l,role:"menu",tabIndex:s,data:Ze,renderRawItem:function(e){return e},renderRawRest:function(t){var n=t.length,r=n?ie.slice(-n):null;return e.createElement(Ao,{eventKey:Go,title:X,disabled:be,internalPopupClose:0===n,popupClassName:Z},r)},maxCount:"horizontal"!==me||y?bn.INVALIDATE:bn.RESPONSIVE,ssr:"full","data-menu-list":!0,onVisibleChange:function(e){ye(e)},onKeyDown:Ge},oe));return e.createElement(Vn.Provider,{value:Xe},e.createElement(In.Provider,{value:fe},e.createElement(Sn,{prefixCls:i,mode:me,openKeys:Ee,rtl:de,disabled:g,motion:ue?z:null,defaultMotions:ue?V:null,activeKey:Ve,onActive:Ue,onInactive:Be,selectedKeys:$e,inlineIndent:I,subMenuOpenDelay:w,subMenuCloseDelay:x,forceSubMenuRender:k,builtinPlacements:W,triggerSubMenuAction:B,getPopupContainer:Qe,itemIcon:$,expandIcon:q,onItemClick:Ke,onOpenChange:Ye},e.createElement(Ln.Provider,{value:ze},Je),e.createElement("div",{style:{display:"none"},"aria-hidden":!0},e.createElement(Rn.Provider,{value:Ie},ie)))))};oi.Item=qn,oi.SubMenu=Ao,oi.ItemGroup=ni,oi.Divider=ri;const ii=oi,li={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z"}}]},name:"ellipsis",theme:"outlined"};var ui=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:li}))};ui.displayName="EllipsisOutlined";const ci=e.forwardRef(ui);var si=Number.isNaN||function(e){return"number"==typeof e&&e!=e};function fi(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(!((r=e[n])===(a=t[n])||si(r)&&si(a)))return!1;var r,a;return!0}const di=(0,e.createContext)({prefixCls:"",firstLevel:!0,inlineCollapsed:!1});var pi=e.isValidElement;function mi(t,n){return function(t,n,r){return pi(t)?e.cloneElement(t,"function"==typeof r?r(t.props||{}):r):n}(t,t,n)}var hi={adjustX:1,adjustY:1},vi=[0,0],gi={left:{points:["cr","cl"],overflow:hi,offset:[-4,0],targetOffset:vi},right:{points:["cl","cr"],overflow:hi,offset:[4,0],targetOffset:vi},top:{points:["bc","tc"],overflow:hi,offset:[0,-4],targetOffset:vi},bottom:{points:["tc","bc"],overflow:hi,offset:[0,4],targetOffset:vi},topLeft:{points:["bl","tl"],overflow:hi,offset:[0,-4],targetOffset:vi},leftTop:{points:["tr","tl"],overflow:hi,offset:[-4,0],targetOffset:vi},topRight:{points:["br","tr"],overflow:hi,offset:[0,-4],targetOffset:vi},rightTop:{points:["tl","tr"],overflow:hi,offset:[4,0],targetOffset:vi},bottomRight:{points:["tr","br"],overflow:hi,offset:[0,4],targetOffset:vi},rightBottom:{points:["bl","br"],overflow:hi,offset:[4,0],targetOffset:vi},bottomLeft:{points:["tl","bl"],overflow:hi,offset:[0,4],targetOffset:vi},leftBottom:{points:["br","bl"],overflow:hi,offset:[-4,0],targetOffset:vi}};const yi=function(t){var n=t.overlay,r=t.prefixCls,a=t.id,o=t.overlayInnerStyle;return e.createElement("div",{className:"".concat(r,"-inner"),id:a,role:"tooltip",style:o},"function"==typeof n?n():n)};var bi=function(t,n){var a=t.overlayClassName,o=t.trigger,i=void 0===o?["hover"]:o,l=t.mouseEnterDelay,u=void 0===l?0:l,c=t.mouseLeaveDelay,s=void 0===c?.1:c,f=t.overlayStyle,d=t.prefixCls,p=void 0===d?"rc-tooltip":d,m=t.children,h=t.onVisibleChange,v=t.afterVisibleChange,g=t.transitionName,y=t.animation,b=t.motion,w=t.placement,E=void 0===w?"right":w,x=t.align,k=void 0===x?{}:x,C=t.destroyTooltipOnHide,S=void 0!==C&&C,O=t.defaultVisible,P=t.getTooltipContainer,N=t.overlayInnerStyle,_=Y(t,["overlayClassName","trigger","mouseEnterDelay","mouseLeaveDelay","overlayStyle","prefixCls","children","onVisibleChange","afterVisibleChange","transitionName","animation","motion","placement","align","destroyTooltipOnHide","defaultVisible","getTooltipContainer","overlayInnerStyle"]),T=(0,e.useRef)(null);(0,e.useImperativeHandle)(n,(function(){return T.current}));var M=H({},_);"visible"in t&&(M.popupVisible=t.visible);var R=!1,A=!1;if("boolean"==typeof S)R=S;else if(S&&"object"===Z(S)){var F=S.keepParent;R=!0===F,A=!1===F}return e.createElement(wo,r({popupClassName:a,prefixCls:p,popup:function(){var n=t.arrowContent,r=void 0===n?null:n,a=t.overlay,o=t.id;return[e.createElement("div",{className:"".concat(p,"-arrow"),key:"arrow"},r),e.createElement(yi,{key:"content",prefixCls:p,id:o,overlay:a,overlayInnerStyle:N})]},action:i,builtinPlacements:gi,popupPlacement:E,ref:T,popupAlign:k,getPopupContainer:P,onPopupVisibleChange:h,afterPopupVisibleChange:v,popupTransitionName:g,popupAnimation:y,popupMotion:b,defaultPopupVisible:O,destroyPopupOnHide:R,autoDestroy:A,mouseLeaveDelay:s,popupStyle:f,mouseEnterDelay:u},M),m)};const wi=(0,e.forwardRef)(bi);var Ei={adjustX:1,adjustY:1},xi={adjustX:0,adjustY:0},ki=[0,0];function Ci(e){return"boolean"==typeof e?e?Ei:xi:r(r({},xi),e)}function Si(e){var t=e.arrowWidth,n=void 0===t?4:t,a=e.horizontalArrowShift,o=void 0===a?16:a,i=e.verticalArrowShift,l=void 0===i?8:i,u=e.autoAdjustOverflow,c=e.arrowPointAtCenter,s={left:{points:["cr","cl"],offset:[-4,0]},right:{points:["cl","cr"],offset:[4,0]},top:{points:["bc","tc"],offset:[0,-4]},bottom:{points:["tc","bc"],offset:[0,4]},topLeft:{points:["bl","tc"],offset:[-(o+n),-4]},leftTop:{points:["tr","cl"],offset:[-4,-(l+n)]},topRight:{points:["br","tc"],offset:[o+n,-4]},rightTop:{points:["tl","cr"],offset:[4,-(l+n)]},bottomRight:{points:["tr","bc"],offset:[o+n,4]},rightBottom:{points:["bl","cr"],offset:[4,l+n]},bottomLeft:{points:["tl","bc"],offset:[-(o+n),4]},leftBottom:{points:["br","cl"],offset:[-4,l+n]}};return Object.keys(s).forEach((function(e){s[e]=c?r(r({},s[e]),{overflow:Ci(u),targetOffset:ki}):r(r({},gi[e]),{overflow:Ci(u)}),s[e].ignoreShake=!0})),s}const Oi={placeholder:"Select time",rangePlaceholder:["Start time","End time"]};var Pi={lang:r({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},{locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"Ok",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}),timePickerLocale:r({},Oi)},Ni="${label} is not a valid ${type}";const _i={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"},DatePicker:Pi,TimePicker:Oi,Calendar:Pi,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No Data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},PageHeader:{back:"Back"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:Ni,method:Ni,array:Ni,object:Ni,number:Ni,date:Ni,boolean:Ni,integer:Ni,float:Ni,regexp:Ni,email:Ni,url:Ni,hex:Ni},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"}},Ti=(0,e.createContext)(void 0);var Mi=function(e){rt(n,e);var t=lt(n);function n(){return Je(this,n),t.apply(this,arguments)}return tt(n,[{key:"getLocale",value:function(){var e=this.props,t=e.componentName,n=e.defaultLocale||_i[null!=t?t:"global"],a=this.context,o=t&&a?a[t]:{};return r(r({},n instanceof Function?n():n),o||{})}},{key:"getLocaleCode",value:function(){var e=this.context,t=e&&e.locale;return e&&e.exist&&!t?_i.locale:t}},{key:"render",value:function(){return this.props.children(this.getLocale(),this.getLocaleCode(),this.context)}}]),n}(e.Component);Mi.defaultProps={componentName:"global"},Mi.contextType=Ti;const Ri=function(){var t=(0,e.useContext(zi).getPrefixCls)("empty-img-default");return e.createElement("svg",{className:t,width:"184",height:"152",viewBox:"0 0 184 152",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{fill:"none",fillRule:"evenodd"},e.createElement("g",{transform:"translate(24 31.67)"},e.createElement("ellipse",{className:"".concat(t,"-ellipse"),cx:"67.797",cy:"106.89",rx:"67.797",ry:"12.668"}),e.createElement("path",{className:"".concat(t,"-path-1"),d:"M122.034 69.674L98.109 40.229c-1.148-1.386-2.826-2.225-4.593-2.225h-51.44c-1.766 0-3.444.839-4.592 2.225L13.56 69.674v15.383h108.475V69.674z"}),e.createElement("path",{className:"".concat(t,"-path-2"),d:"M101.537 86.214L80.63 61.102c-1.001-1.207-2.507-1.867-4.048-1.867H31.724c-1.54 0-3.047.66-4.048 1.867L6.769 86.214v13.792h94.768V86.214z",transform:"translate(13.56)"}),e.createElement("path",{className:"".concat(t,"-path-3"),d:"M33.83 0h67.933a4 4 0 0 1 4 4v93.344a4 4 0 0 1-4 4H33.83a4 4 0 0 1-4-4V4a4 4 0 0 1 4-4z"}),e.createElement("path",{className:"".concat(t,"-path-4"),d:"M42.678 9.953h50.237a2 2 0 0 1 2 2V36.91a2 2 0 0 1-2 2H42.678a2 2 0 0 1-2-2V11.953a2 2 0 0 1 2-2zM42.94 49.767h49.713a2.262 2.262 0 1 1 0 4.524H42.94a2.262 2.262 0 0 1 0-4.524zM42.94 61.53h49.713a2.262 2.262 0 1 1 0 4.525H42.94a2.262 2.262 0 0 1 0-4.525zM121.813 105.032c-.775 3.071-3.497 5.36-6.735 5.36H20.515c-3.238 0-5.96-2.29-6.734-5.36a7.309 7.309 0 0 1-.222-1.79V69.675h26.318c2.907 0 5.25 2.448 5.25 5.42v.04c0 2.971 2.37 5.37 5.277 5.37h34.785c2.907 0 5.277-2.421 5.277-5.393V75.1c0-2.972 2.343-5.426 5.25-5.426h26.318v33.569c0 .617-.077 1.216-.221 1.789z"})),e.createElement("path",{className:"".concat(t,"-path-5"),d:"M149.121 33.292l-6.83 2.65a1 1 0 0 1-1.317-1.23l1.937-6.207c-2.589-2.944-4.109-6.534-4.109-10.408C138.802 8.102 148.92 0 161.402 0 173.881 0 184 8.102 184 18.097c0 9.995-10.118 18.097-22.599 18.097-4.528 0-8.744-1.066-12.28-2.902z"}),e.createElement("g",{className:"".concat(t,"-g"),transform:"translate(149.65 15.383)"},e.createElement("ellipse",{cx:"20.654",cy:"3.167",rx:"2.849",ry:"2.815"}),e.createElement("path",{d:"M5.698 5.63H0L2.898.704zM9.259.704h4.985V5.63H9.259z"}))))},Ai=function(){var t=(0,e.useContext(zi).getPrefixCls)("empty-img-simple");return e.createElement("svg",{className:t,width:"64",height:"41",viewBox:"0 0 64 41",xmlns:"http://www.w3.org/2000/svg"},e.createElement("g",{transform:"translate(0 1)",fill:"none",fillRule:"evenodd"},e.createElement("ellipse",{className:"".concat(t,"-ellipse"),cx:"32",cy:"33",rx:"32",ry:"7"}),e.createElement("g",{className:"".concat(t,"-g"),fillRule:"nonzero"},e.createElement("path",{d:"M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"}),e.createElement("path",{d:"M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",className:"".concat(t,"-path")}))))};var Fi=e.createElement(Ri,null),ji=e.createElement(Ai,null),Li=function(t){var n=t.className,a=t.prefixCls,o=t.image,i=void 0===o?Fi:o,l=t.description,u=t.children,c=t.imageStyle,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["className","prefixCls","image","description","children","imageStyle"]),f=e.useContext(zi),d=f.getPrefixCls,p=f.direction;return e.createElement(Mi,{componentName:"Empty"},(function(t){var o,f,m=d("empty",a),h=void 0!==l?l:t.description,v="string"==typeof h?h:"empty";return f="string"==typeof i?e.createElement("img",{alt:v,src:i}):i,e.createElement("div",r({className:G()(m,(o={},D(o,"".concat(m,"-normal"),i===ji),D(o,"".concat(m,"-rtl"),"rtl"===p),o),n)},s),e.createElement("div",{className:"".concat(m,"-image"),style:c},f),h&&e.createElement("div",{className:"".concat(m,"-description")},h),u&&e.createElement("div",{className:"".concat(m,"-footer")},u))}))};Li.PRESENTED_IMAGE_DEFAULT=Fi,Li.PRESENTED_IMAGE_SIMPLE=ji;const Ii=Li;var zi=e.createContext({getPrefixCls:function(e,t){return t||(e?"ant-".concat(e):"ant")},renderEmpty:function(t){return e.createElement(Di,null,(function(n){var r=(0,n.getPrefixCls)("empty");switch(t){case"Table":case"List":return e.createElement(Ii,{image:Ii.PRESENTED_IMAGE_SIMPLE});case"Select":case"TreeSelect":case"Cascader":case"Transfer":case"Mentions":return e.createElement(Ii,{image:Ii.PRESENTED_IMAGE_SIMPLE,className:"".concat(r,"-small")});default:return e.createElement(Ii,null)}}))}}),Di=zi.Consumer,Vi=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t},Hi=Vi("success","processing","error","default","warning"),Ui=Vi("pink","red","yellow","orange","cyan","green","blue","purple","geekblue","magenta","volcano","gold","lime"),Bi=function(){return{height:0,opacity:0}},Wi=function(e){return{height:e.scrollHeight,opacity:1}},$i=function(e,t){return!0===(null==t?void 0:t.deadline)||"height"===t.propertyName},qi={motionName:"ant-motion-collapse",onAppearStart:Bi,onEnterStart:Bi,onAppearActive:Wi,onEnterActive:Wi,onLeaveStart:function(e){return{height:e?e.offsetHeight:0}},onLeaveActive:Bi,onAppearEnd:$i,onEnterEnd:$i,onLeaveEnd:$i,motionDeadline:500},Ki=(Vi("bottomLeft","bottomRight","topLeft","topRight"),function(e,t,n){return void 0!==n?n:"".concat(e,"-").concat(t)});const Yi=qi;var Qi=new RegExp("^(".concat(Ui.join("|"),")(-inverse)?$"));var Gi=e.forwardRef((function(t,n){var a,o=e.useContext(zi),i=o.getPopupContainer,l=o.getPrefixCls,u=o.direction,c=K(dt(!1,{value:t.visible,defaultValue:t.defaultVisible}),2),s=c[0],f=c[1],d=function(){var e=t.title,n=t.overlay;return!e&&!n&&0!==e},p=function(){var e=t.builtinPlacements,n=t.arrowPointAtCenter,r=t.autoAdjustOverflow;return e||Si({arrowPointAtCenter:n,autoAdjustOverflow:r})},m=t.getPopupContainer,h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["getPopupContainer"]),v=t.prefixCls,g=t.openClassName,y=t.getTooltipContainer,b=t.overlayClassName,w=t.color,E=t.overlayInnerStyle,x=t.children,k=l("tooltip",v),C=l(),S=s;!("visible"in t)&&d()&&(S=!1);var O,P,N,_=function(t,n){var a=t.type;if((!0===a.__ANT_BUTTON||"button"===t.type)&&t.props.disabled||!0===a.__ANT_SWITCH&&(t.props.disabled||t.props.loading)){var o=function(e,t){var n={},a=r({},e);return["position","left","right","top","bottom","float","display","zIndex"].forEach((function(t){e&&t in e&&(n[t]=e[t],delete a[t])})),{picked:n,omitted:a}}(t.props.style),i=o.picked,l=o.omitted,u=r(r({display:"inline-block"},i),{cursor:"not-allowed",width:t.props.block?"100%":null}),c=mi(t,{style:r(r({},l),{pointerEvents:"none"}),className:null});return e.createElement("span",{style:u,className:G()(t.props.className,"".concat(n,"-disabled-compatible-wrapper"))},c)}return t}(pi(x)?x:e.createElement("span",null,x),k),T=_.props,M=G()(T.className,D({},g||"".concat(k,"-open"),!0)),R=G()(b,(D(a={},"".concat(k,"-rtl"),"rtl"===u),D(a,"".concat(k,"-").concat(w),w&&Qi.test(w)),a)),A=E;return w&&!Qi.test(w)&&(A=r(r({},E),{background:w}),O={"--antd-arrow-background-color":w}),e.createElement(wi,r({},h,{prefixCls:k,overlayClassName:R,getTooltipContainer:m||y||i,ref:n,builtinPlacements:p(),overlay:(P=t.title,N=t.overlay,0===P?P:N||P||""),visible:S,onVisibleChange:function(e){var n;f(!d()&&e),d()||null===(n=t.onVisibleChange)||void 0===n||n.call(t,e)},onPopupAlign:function(e,t){var n=p(),r=Object.keys(n).find((function(e){return n[e].points[0]===t.points[0]&&n[e].points[1]===t.points[1]}));if(r){var a=e.getBoundingClientRect(),o={top:"50%",left:"50%"};r.indexOf("top")>=0||r.indexOf("Bottom")>=0?o.top="".concat(a.height-t.offset[1],"px"):(r.indexOf("Top")>=0||r.indexOf("bottom")>=0)&&(o.top="".concat(-t.offset[1],"px")),r.indexOf("left")>=0||r.indexOf("Right")>=0?o.left="".concat(a.width-t.offset[0],"px"):(r.indexOf("right")>=0||r.indexOf("Left")>=0)&&(o.left="".concat(-t.offset[0],"px")),e.style.transformOrigin="".concat(o.left," ").concat(o.top)}},overlayInnerStyle:A,arrowContent:e.createElement("span",{className:"".concat(k,"-arrow-content"),style:O}),motion:{motionName:Ki(C,"zoom-big-fast",t.transitionName),motionDeadline:1e3}}),S?mi(_,{className:M}):_)}));Gi.displayName="Tooltip",Gi.defaultProps={placement:"top",mouseEnterDelay:.1,mouseLeaveDelay:.1,arrowPointAtCenter:!1,autoAdjustOverflow:!0};const Xi=Gi,Zi={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M912 192H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 284H328c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h584c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM104 228a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0zm0 284a56 56 0 10112 0 56 56 0 10-112 0z"}}]},name:"bars",theme:"outlined"};var Ji=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Zi}))};Ji.displayName="BarsOutlined";const el=e.forwardRef(Ji),tl={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z"}}]},name:"right",theme:"outlined"};var nl=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:tl}))};nl.displayName="RightOutlined";const rl=e.forwardRef(nl),al={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z"}}]},name:"left",theme:"outlined"};var ol=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:al}))};ol.displayName="LeftOutlined";const il=e.forwardRef(ol);var ll=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n},ul=e.createContext({siderHook:{addSider:function(){return null},removeSider:function(){return null}}});function cl(t){var n=t.suffixCls,a=t.tagName,o=t.displayName;return function(t){var i=function(o){var i=e.useContext(zi).getPrefixCls,l=o.prefixCls,u=i(n,l);return e.createElement(t,r({prefixCls:u,tagName:a},o))};return i.displayName=o,i}}var sl=function(t){var n=t.prefixCls,a=t.className,o=t.children,i=t.tagName,l=ll(t,["prefixCls","className","children","tagName"]),u=G()(n,a);return e.createElement(i,r({className:u},l),o)};cl({suffixCls:"layout",tagName:"section",displayName:"Layout"})((function(t){var n,a=e.useContext(zi).direction,o=K(e.useState([]),2),i=o[0],l=o[1],u=t.prefixCls,c=t.className,s=t.children,f=t.hasSider,d=t.tagName,p=ll(t,["prefixCls","className","children","hasSider","tagName"]),m=G()(u,(D(n={},"".concat(u,"-has-sider"),"boolean"==typeof f?f:i.length>0),D(n,"".concat(u,"-rtl"),"rtl"===a),n),c),h=e.useMemo((function(){return{siderHook:{addSider:function(e){l((function(t){return[].concat(ct(t),[e])}))},removeSider:function(e){l((function(t){return t.filter((function(t){return t!==e}))}))}}}}),[]);return e.createElement(ul.Provider,{value:h},e.createElement(d,r({className:m},p),s))})),cl({suffixCls:"layout-header",tagName:"header",displayName:"Header"})(sl),cl({suffixCls:"layout-footer",tagName:"footer",displayName:"Footer"})(sl),cl({suffixCls:"layout-content",tagName:"main",displayName:"Content"})(sl);var fl,dl={xs:"479.98px",sm:"575.98px",md:"767.98px",lg:"991.98px",xl:"1199.98px",xxl:"1599.98px"},pl=e.createContext({}),ml=(fl=0,function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return fl+=1,"".concat(e).concat(fl)}),hl=e.forwardRef((function(t,n){var a=t.prefixCls,o=t.className,i=t.trigger,l=t.children,u=t.defaultCollapsed,c=void 0!==u&&u,s=t.theme,f=void 0===s?"dark":s,d=t.style,p=void 0===d?{}:d,m=t.collapsible,h=void 0!==m&&m,v=t.reverseArrow,g=void 0!==v&&v,y=t.width,b=void 0===y?200:y,w=t.collapsedWidth,E=void 0===w?80:w,x=t.zeroWidthTriggerStyle,k=t.breakpoint,C=t.onCollapse,S=t.onBreakpoint,O=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","trigger","children","defaultCollapsed","theme","style","collapsible","reverseArrow","width","collapsedWidth","zeroWidthTriggerStyle","breakpoint","onCollapse","onBreakpoint"]),P=(0,e.useContext)(ul).siderHook,N=K((0,e.useState)("collapsed"in O?O.collapsed:c),2),_=N[0],T=N[1],M=K((0,e.useState)(!1),2),R=M[0],A=M[1];(0,e.useEffect)((function(){"collapsed"in O&&T(O.collapsed)}),[O.collapsed]);var F=function(e,t){"collapsed"in O||T(e),null==C||C(e,t)},j=(0,e.useRef)();j.current=function(e){A(e.matches),null==S||S(e.matches),_!==e.matches&&F(e.matches,"responsive")},(0,e.useEffect)((function(){function e(e){return j.current(e)}var t;if("undefined"!=typeof window){var n=window.matchMedia;if(n&&k&&k in dl){t=n("(max-width: ".concat(dl[k],")"));try{t.addEventListener("change",e)}catch(n){t.addListener(e)}e(t)}}return function(){try{null==t||t.removeEventListener("change",e)}catch(n){null==t||t.removeListener(e)}}}),[k]),(0,e.useEffect)((function(){var e=ml("ant-sider-");return P.addSider(e),function(){return P.removeSider(e)}}),[]);var L,I,z,V,H,U,B,W,$,q,Y,Q=function(){F(!_,"clickTrigger")},X=(0,e.useContext)(zi).getPrefixCls,Z=e.useMemo((function(){return{siderCollapsed:_}}),[_]);return e.createElement(pl.Provider,{value:Z},(I=X("layout-sider",a),z=xn(O,["collapsed"]),Y=V=_?E:b,H=!isNaN(parseFloat(Y))&&isFinite(Y)?"".concat(V,"px"):String(V),U=0===parseFloat(String(E||0))?e.createElement("span",{onClick:Q,className:G()("".concat(I,"-zero-width-trigger"),"".concat(I,"-zero-width-trigger-").concat(g?"right":"left")),style:x},i||e.createElement(el,null)):null,B={expanded:g?e.createElement(rl,null):e.createElement(il,null),collapsed:g?e.createElement(il,null):e.createElement(rl,null)}[_?"collapsed":"expanded"],W=null!==i?U||e.createElement("div",{className:"".concat(I,"-trigger"),onClick:Q,style:{width:H}},i||B):null,$=r(r({},p),{flex:"0 0 ".concat(H),maxWidth:H,minWidth:H,width:H}),q=G()(I,"".concat(I,"-").concat(f),(D(L={},"".concat(I,"-collapsed"),!!_),D(L,"".concat(I,"-has-trigger"),h&&null!==i&&!U),D(L,"".concat(I,"-below"),!!R),D(L,"".concat(I,"-zero-width"),0===parseFloat(H)),L),o),e.createElement("aside",r({className:q},z,{style:$,ref:n}),e.createElement("div",{className:"".concat(I,"-children")},l),h||R&&U?W:null)))}));hl.displayName="Sider";var vl=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n},gl=function(t){rt(a,t);var n=lt(a);function a(){var t;return Je(this,a),(t=n.apply(this,arguments)).renderItem=function(n){var a,o,i=n.siderCollapsed,l=t.context,u=l.prefixCls,c=l.firstLevel,s=l.inlineCollapsed,f=l.direction,d=l.disableMenuItemTitleTooltip,p=t.props,m=p.className,h=p.children,v=t.props,g=v.title,y=v.icon,b=v.danger,w=vl(v,["title","icon","danger"]),E=g;void 0===g?E=c?h:"":!1===g&&(E="");var x={title:E};i||s||(x.title=null,x.visible=!1);var k=mt(h).length,C=e.createElement(qn,r({},w,{className:G()((a={},D(a,"".concat(u,"-item-danger"),b),D(a,"".concat(u,"-item-only-child"),1===(y?k+1:k)),a),m),title:"string"==typeof g?g:void 0}),mi(y,{className:G()(pi(y)?null===(o=y.props)||void 0===o?void 0:o.className:"","".concat(u,"-item-icon"))}),t.renderItemChildren(s));return d||(C=e.createElement(Xi,r({},x,{placement:"rtl"===f?"left":"right",overlayClassName:"".concat(u,"-inline-collapsed-tooltip")}),C)),C},t}return tt(a,[{key:"renderItemChildren",value:function(t){var n=this.context,r=n.prefixCls,a=n.firstLevel,o=this.props,i=o.icon,l=o.children,u=e.createElement("span",{className:"".concat(r,"-title-content")},l);return(!i||pi(l)&&"span"===l.type)&&l&&t&&a&&"string"==typeof l?e.createElement("div",{className:"".concat(r,"-inline-collapsed-noicon")},l.charAt(0)):u}},{key:"render",value:function(){return e.createElement(pl.Consumer,null,this.renderItem)}}]),a}(e.Component);gl.contextType=di;const yl=function(e,t,n){Se(e,"[antd: ".concat(t,"] ").concat(n))};var bl=function(t){rt(a,t);var n=lt(a);function a(t){var o;return Je(this,a),(o=n.call(this,t)).getMemoizedContextValue=function(e,t){void 0===t&&(t=fi);var n=null;function r(){for(var r=[],a=0;a<arguments.length;a++)r[a]=arguments[a];if(n&&n.lastThis===this&&t(r,n.lastArgs))return n.lastResult;var o=e.apply(this,r);return n={lastResult:o,lastArgs:r,lastThis:this},o}return r.clear=function(){n=null},r}((function(e,t,n,r,a){return{prefixCls:e,inlineCollapsed:t||!1,antdMenuTheme:n,direction:r,firstLevel:!0,disableMenuItemTitleTooltip:a}})),o.renderMenu=function(t){var n=t.getPopupContainer,a=t.getPrefixCls,i=t.direction,l=a(),u=o.props,c=u.prefixCls,s=u.className,f=u.theme,d=u.expandIcon,p=u._internalDisableMenuItemTitleTooltip,m=xn(function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(u,["prefixCls","className","theme","expandIcon","_internalDisableMenuItemTitleTooltip"]),["siderCollapsed","collapsedWidth"]),h=o.getInlineCollapsed(),v={horizontal:{motionName:"".concat(l,"-slide-up")},inline:Yi,other:{motionName:"".concat(l,"-zoom-big")}},g=a("menu",c),y=G()("".concat(g,"-").concat(f),s),b=o.getMemoizedContextValue(g,h,f,i,p);return e.createElement(di.Provider,{value:b},e.createElement(ii,r({getPopupContainer:n,overflowedIndicator:e.createElement(ci,null),overflowedIndicatorPopupClassName:"".concat(g,"-").concat(f)},m,{inlineCollapsed:h,className:y,prefixCls:g,direction:i,defaultMotions:v,expandIcon:mi(d,{className:"".concat(g,"-submenu-expand-icon")})})))},yl(!("inlineCollapsed"in t&&"inline"!==t.mode),"Menu","`inlineCollapsed` should only be used when `mode` is inline."),yl(!(void 0!==t.siderCollapsed&&"inlineCollapsed"in t),"Menu","`inlineCollapsed` not control Menu under Sider. Should set `collapsed` on Sider instead."),o}return tt(a,[{key:"getInlineCollapsed",value:function(){var e=this.props,t=e.inlineCollapsed,n=e.siderCollapsed;return void 0!==n?n:t}},{key:"render",value:function(){return e.createElement(Di,null,this.renderMenu)}}]),a}(e.Component);bl.defaultProps={theme:"light"};var wl=function(t){rt(a,t);var n=lt(a);function a(){return Je(this,a),n.apply(this,arguments)}return tt(a,[{key:"render",value:function(){var t=this;return e.createElement(pl.Consumer,null,(function(n){return e.createElement(bl,r({},t.props,n))}))}}]),a}(e.Component);wl.Divider=function(t){var n=t.prefixCls,a=t.className,o=t.dashed,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","dashed"]),l=(0,e.useContext(zi).getPrefixCls)("menu",n),u=G()(D({},"".concat(l,"-item-divider-dashed"),!!o),a);return e.createElement(ri,r({className:u},i))},wl.Item=gl,wl.SubMenu=function(t){var n,a,o=t.popupClassName,i=t.icon,l=t.title,u=t.theme,c=e.useContext(di),s=c.prefixCls,f=c.inlineCollapsed,d=c.antdMenuTheme,p=ai();if(i){var m=pi(l)&&"span"===l.type;a=e.createElement(e.Fragment,null,mi(i,{className:G()(pi(i)?null===(n=i.props)||void 0===n?void 0:n.className:"","".concat(s,"-item-icon"))}),m?l:e.createElement("span",{className:"".concat(s,"-title-content")},l))}else a=f&&!p.length&&l&&"string"==typeof l?e.createElement("div",{className:"".concat(s,"-inline-collapsed-noicon")},l.charAt(0)):e.createElement("span",{className:"".concat(s,"-title-content")},l);var h=e.useMemo((function(){return r(r({},c),{firstLevel:!1})}),[c]);return e.createElement(di.Provider,{value:h},e.createElement(Ao,r({},xn(t,["icon"]),{title:a,popupClassName:G()(s,"".concat(s,"-").concat(u||d),o)})))},wl.ItemGroup=ni;const El=wl;var xl;!function(e){e.horizontal="horizontal",e.vertical="vertical",e.inline="inline"}(xl||(xl={}));var kl=El.SubMenu;function Cl(){return e.createElement("div",{className:"navigationBar--IiQfj"},e.createElement(El,{mode:xl.horizontal},e.createElement(kl,{key:"games",icon:e.createElement(Qe,null),title:"Games"},e.createElement(El.Item,{key:"basic-typing-game"},e.createElement(z,{to:"/game"},"Basic Typing Game"))),e.createElement(El.Item,{key:"canvas",icon:e.createElement(Ze,null)},e.createElement(z,{to:"/canvas"},"Canvas"))))}var Sl,Ol=(Sl=function(e,t){return Sl=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Sl(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Sl(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});const Pl=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Ol(n,t),n.prototype.render=function(){return e.createElement("div",null,e.createElement(Cl,null),"Home"," ",e.createElement(z,{to:"/game"},"game"))},n}(e.Component),Nl=Symbol(),_l=e=>!!e[Nl],Tl=e=>{var t,n;null==(n=(t=e[Nl]).c)||n.call(t)},Ml=(e,t)=>{const n=e[Nl].o,r=t[Nl].o;return n===r||e===r||_l(n)&&Ml(n,t)},Rl=e=>{const t={o:e,c:null},n=new Promise((n=>{t.c=()=>{t.c=null,n()},e.then(t.c,t.c)}));return n[Nl]=t,n};var Al=Object.defineProperty,Fl=Object.defineProperties,jl=Object.getOwnPropertyDescriptors,Ll=Object.getOwnPropertySymbols,Il=Object.prototype.hasOwnProperty,zl=Object.prototype.propertyIsEnumerable,Dl=(e,t,n)=>t in e?Al(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;const Vl=e=>"init"in e,Hl=e=>{const t=new WeakMap,n=new WeakMap,r=new Map;let a,o;if(a=new Set,o=new Set,e)for(const[n,r]of e){const e={v:r,r:0,d:new Map};Object.freeze(e),Vl(n)||console.warn("Found initial value for derived atom which can cause unexpected behavior",n),t.set(n,e)}const i=new WeakMap,l=new WeakMap,u=e=>{let t=l.get(e);return t||(t=new Map,l.set(e,t)),t},c=(e,n)=>{if(e){const t=u(e);let r=t.get(n);return r||(r=c(e.p,n),r&&("p"in r&&r.p.then((()=>t.delete(n))),t.set(n,r))),r}return t.get(n)},s=(e,n,a)=>{if(Object.freeze(a),e)u(e).set(n,a);else{const e=t.get(n);t.set(n,a),r.has(n)||r.set(n,e)}},f=(e,t=new Map,n)=>{if(!n)return t;const r=new Map;let a=!1;return n.forEach((n=>{var o;const i=(null==(o=c(e,n))?void 0:o.r)||0;r.set(n,i),t.get(n)!==i&&(a=!0)})),t.size!==r.size||a?r:t},d=(e,t,n,r,a)=>{const o=c(e,t);if(o){if(a&&(!("p"in o)||!Ml(o.p,a)))return o;"p"in o&&Tl(o.p)}const i={v:n,r:(null==o?void 0:o.r)||0,d:f(e,null==o?void 0:o.d,r)};return o&&"v"in o&&Object.is(o.v,n)?i.d===o.d||i.d.size===o.d.size&&Array.from(i.d.keys()).every((e=>o.d.has(e)))||Promise.resolve().then((()=>{C(e)})):(++i.r,i.d.has(t)&&(i.d=new Map(i.d).set(t,i.r))),s(e,t,i),i},p=(e,t,n,r,a)=>{const o=c(e,t);if(o){if(a&&(!("p"in o)||!Ml(o.p,a)))return o;"p"in o&&Tl(o.p)}const i={e:n,r:(null==o?void 0:o.r)||0,d:f(e,null==o?void 0:o.d,r)};return s(e,t,i),i},m=(e,t,n,r)=>{const a=c(e,t);if(a&&"p"in a){if(Ml(a.p,n))return a;Tl(a.p)}((e,t,n)=>{let r=i.get(t);r||(r=new Map,i.set(t,r)),n.then((()=>{r.get(e)===n&&(r.delete(e),r.size||i.delete(t))})),r.set(e,n)})(e,t,n);const o={p:n,r:(null==a?void 0:a.r)||0,d:f(e,null==a?void 0:a.d,r)};return s(e,t,o),o},h=(e,t,n,r)=>{if(n instanceof Promise){const a=Rl(n.then((n=>{d(e,t,n,r,a),C(e)})).catch((n=>{if(n instanceof Promise)return _l(n)?n.then((()=>{v(e,t,!0)})):n;p(e,t,n,r,a),C(e)})));return m(e,t,a,r)}return d(e,t,n,r)},v=(e,t,r)=>{if(!r){const r=c(e,t);if(r){if(r.r!==r.i&&"p"in r&&r.p[Nl].c)return r;if(r.d.forEach(((r,a)=>{if(a!==t)if(n.has(a)){const t=c(e,a);t&&t.r===t.i&&v(e,a)}else v(e,a)})),Array.from(r.d).every((([t,n])=>{const r=c(e,t);return r&&"v"in r&&r.r===n})))return r}}const a=new Set;try{const n=t.read((n=>{a.add(n);const r=n===t?c(e,n):v(e,n);if(r){if("e"in r)throw r.e;if("p"in r)throw r.p;return r.v}if(Vl(n))return n.init;throw new Error("no atom init")}));return h(e,t,n,a)}catch(n){if(n instanceof Promise){const r=Rl(n);return m(e,t,r,a)}return p(e,t,n,a)}},g=(e,t)=>!t.l.size&&(!t.t.size||1===t.t.size&&t.t.has(e)),y=(e,t)=>{const r=n.get(t);null==r||r.t.forEach((n=>{n!==t&&(((e,t)=>{const n=c(e,t);if(n){const o=(r=((e,t)=>{for(var n in t||(t={}))Il.call(t,n)&&Dl(e,n,t[n]);if(Ll)for(var n of Ll(t))zl.call(t,n)&&Dl(e,n,t[n]);return e})({},n),a={i:n.r},Fl(r,jl(a)));s(e,t,o)}else console.warn("[Bug] could not invalidate non existing atom",t);var r,a})(e,n),y(e,n))}))},b=(e,t,n)=>{let r=!0;const a=(t,n)=>{const r=v(e,t);if("e"in r)throw r.e;if("p"in r){if(null==n?void 0:n.unstable_promise)return r.p.then((()=>a(t,n)));throw console.info("Reading pending atom state in write operation. We throw a promise for now.",t),r.p}if("v"in r)return r.v;throw console.warn("[Bug] no value found while reading atom in write operation. This is probably a bug.",t),new Error("no value found")},o=t.write(a,((n,a)=>{let o;if(n===t){if(!Vl(n))throw new Error("atom not writable");const t=(e=>{const t=new Set,n=i.get(e);return n&&(i.delete(e),n.forEach(((e,n)=>{Tl(e),t.add(n)}))),t})(n);t.forEach((t=>{t!==e&&h(t,n,a)})),h(e,n,a),y(e,n)}else o=b(e,n,a);return r||C(e),o}),n);return r=!1,e=void 0,o},w=(e,t,n)=>{const r=b(n,e,t);return C(n),r},E=(e,t)=>{const r={t:new Set(t&&[t]),l:new Set};if(n.set(e,r),o.add(e),v(void 0,e).d.forEach(((t,r)=>{const a=n.get(r);a?a.t.add(e):r!==e&&E(r,e)})),(e=>!!e.write)(e)&&e.onMount){const t=t=>w(e,t),n=e.onMount(t);n&&(r.u=n)}return r},x=e=>{var t;const r=null==(t=n.get(e))?void 0:t.u;r&&r(),n.delete(e),o.delete(e);const a=c(void 0,e);a?a.d.forEach(((t,r)=>{if(r!==e){const t=n.get(r);t&&(t.t.delete(e),g(r,t)&&x(r))}})):console.warn("[Bug] could not find atom state to unmount",e)},k=(e,t,r)=>{const a=new Set(t.d.keys());null==r||r.forEach(((t,r)=>{if(a.has(r))return void a.delete(r);const o=n.get(r);o&&(o.t.delete(e),g(r,o)&&x(r))})),a.forEach((t=>{const r=n.get(t);r?r.t.add(e):n.has(e)&&E(t,e)}))},C=e=>{if(e)u(e).forEach(((r,a)=>{if(r!==t.get(a)){const t=n.get(a);null==t||t.l.forEach((t=>t(e)))}}));else{for(;r.size;){const e=Array.from(r);r.clear(),e.forEach((([e,t])=>{const r=c(void 0,e);r&&r.d!==(null==t?void 0:t.d)&&k(e,r,null==t?void 0:t.d);const a=n.get(e);null==a||a.l.forEach((e=>e()))}))}a.forEach((e=>e()))}};return{r:(e,t)=>v(t,e),w,c:(e,n)=>{n&&(e=>{u(e).forEach(((e,n)=>{const r=t.get(n);(e.r>((null==r?void 0:r.r)||0)||"v"in e&&e.r===(null==r?void 0:r.r)&&e.d!==(null==r?void 0:r.d))&&(t.set(n,e),e.d!==(null==r?void 0:r.d)&&k(n,e,null==r?void 0:r.d))}))})(n),C(void 0)},s:(e,t)=>{const r=(e=>{let t=n.get(e);return t||(t=E(e)),t})(e).l;return r.add(t),()=>{r.delete(t),(e=>{const t=n.get(e);t&&g(e,t)&&x(e)})(e)}},h:(e,t)=>{for(const[n,r]of e)Vl(n)&&(h(t,n,r),y(t,n));C(t)},n:e=>(a.add(e),()=>{a.delete(e)}),l:()=>o.values(),a:e=>t.get(e),m:e=>n.get(e)}},Ul=new Map,Bl=t=>{return Ul.has(t)||Ul.set(t,(0,e.createContext)({s:r?r(n).SECRET_INTERNAL_store:Hl(n)})),Ul.get(t);var n,r};Object.defineProperty,Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols,Object.prototype.hasOwnProperty,Object.prototype.propertyIsEnumerable;let Wl=0;function $l(e,t){const n="atom"+ ++Wl,r={toString:()=>n};return"function"==typeof e?r.read=e:(r.init=e,r.read=e=>e(r),r.write=(e,t,n)=>t(r,"function"==typeof n?n(e(r)):n)),t&&(r.write=t),r}function ql(t,n){const r=Bl(n),{s:a}=(0,e.useContext)(r),o=(0,e.useCallback)((e=>{const n=a.r(t,e);if("e"in n)throw n.e;if("p"in n)throw n.p;if("v"in n)return n.v;throw new Error("no atom value")}),[a,t]),[[i,l,u],c]=(0,e.useReducer)((0,e.useCallback)(((e,n)=>{const r=o(n);return Object.is(e[1],r)&&e[2]===t?e:[n,r,t]}),[o,t]),void 0,(()=>{const e=void 0;return[e,o(e),t]}));return u!==t&&c(void 0),(0,e.useEffect)((()=>{const e=a.s(t,c);return c(void 0),e}),[a,t]),(0,e.useEffect)((()=>{a.c(t,i)})),(0,e.useDebugValue)(l),l}function Kl(t,n){const r=Bl(n),{s:a,w:o}=(0,e.useContext)(r);return(0,e.useCallback)((e=>{const n=n=>a.w(t,e,n);return o?o(n):n()}),[a,o,t])}function Yl(e,t){return"scope"in e&&(console.warn("atom.scope is deprecated. Please do useAtom(atom, scope) instead."),t=e.scope),[ql(e,t),Kl(e,t)]}var Ql=$l(0),Gl=$l(0),Xl=$l(""),Zl=$l(""),Jl=$l([]);function eu(){var t=Yl(Ql)[0],n=Yl(Gl)[0];return e.createElement(e.Fragment,null,e.createElement("div",null,"Level:"," ",n),e.createElement("div",null,"Score:"," ",t))}var tu,nu=n(8324),ru=n.n(nu);!function(e){e[e.default=0]="default",e[e.correct=1]="correct",e[e.wrong=2]="wrong",e[e.fixed=3]="fixed"}(tu||(tu={}));var au=function(e){return Array(e).fill(0)};function ou(){var t=Yl(Xl),n=t[0],r=t[1],a=Yl(Jl),o=a[0],i=a[1];return(0,e.useEffect)((function(){r(ru()())}),[]),(0,e.useEffect)((function(){i(au(n.length))}),[n]),e.createElement("div",{className:"randWord--GIMfR"},n.split("").map((function(t,n){var r="";return o[n]===tu.correct?r="correct--yznGe":o[n]===tu.wrong?r="wrong--vMGxU":o[n]===tu.fixed&&(r="fixed--vo2Fd"),e.createElement("span",{key:n,className:r},t)})))}function iu(e){return!(!e.addonBefore&&!e.addonAfter)}function lu(e){return!!(e.prefix||e.suffix||e.allowClear)}function uu(e,t,n,r){if(n){var a=t;if("click"===t.type){var o=e.cloneNode(!0);return a=Object.create(t,{target:{value:o},currentTarget:{value:o}}),o.value="",void n(a)}if(void 0!==r)return a=Object.create(t,{target:{value:e},currentTarget:{value:e}}),e.value=r,void n(a);n(a)}}function cu(e){return null==e?"":String(e)}const su=function(t){var n=t.inputElement,r=t.prefixCls,a=t.prefix,o=t.suffix,i=t.addonBefore,l=t.addonAfter,u=t.className,c=t.style,s=t.affixWrapperClassName,f=t.groupClassName,d=t.wrapperClassName,p=t.disabled,m=t.readOnly,h=t.focused,v=t.triggerFocus,g=t.allowClear,y=t.value,b=t.handleReset,w=t.hidden,E=(0,e.useRef)(null),x=(0,e.cloneElement)(n,{value:y,hidden:w});if(lu(t)){var k,C="".concat(r,"-affix-wrapper"),S=G()(C,(D(k={},"".concat(C,"-disabled"),p),D(k,"".concat(C,"-focused"),h),D(k,"".concat(C,"-readonly"),m),D(k,"".concat(C,"-input-with-clear-btn"),o&&g&&y),k),!iu(t)&&u,s),O=(o||g)&&e.createElement("span",{className:"".concat(r,"-suffix")},function(){var t;if(!g)return null;var n=!p&&!m&&y,a="".concat(r,"-clear-icon"),i="object"===Z(g)&&(null==g?void 0:g.clearIcon)?g.clearIcon:"âœ–";return e.createElement("span",{onClick:b,onMouseDown:function(e){return e.preventDefault()},className:G()(a,(t={},D(t,"".concat(a,"-hidden"),!n),D(t,"".concat(a,"-has-suffix"),!!o),t)),role:"button",tabIndex:-1},i)}(),o);x=e.createElement("span",{className:S,style:c,hidden:!iu(t)&&w,onMouseUp:function(e){var t;(null===(t=E.current)||void 0===t?void 0:t.contains(e.target))&&(null==v||v())},ref:E},a&&e.createElement("span",{className:"".concat(r,"-prefix")},a),(0,e.cloneElement)(n,{style:null,value:y,hidden:null}),O)}if(iu(t)){var P="".concat(r,"-group"),N="".concat(P,"-addon"),_=G()("".concat(r,"-wrapper"),P,d),T=G()("".concat(r,"-group-wrapper"),u,f);return e.createElement("span",{className:T,style:c,hidden:w},e.createElement("span",{className:_},i&&e.createElement("span",{className:N},i),(0,e.cloneElement)(x,{style:null,hidden:null}),l&&e.createElement("span",{className:N},l)))}return x};var fu=["autoComplete","onChange","onFocus","onBlur","onPressEnter","onKeyDown","prefixCls","disabled","htmlSize","className","maxLength","suffix","showCount","type","inputClassName"],du=(0,e.forwardRef)((function(t,n){var r=t.autoComplete,a=t.onChange,o=t.onFocus,i=t.onBlur,l=t.onPressEnter,u=t.onKeyDown,c=t.prefixCls,s=void 0===c?"rc-input":c,f=t.disabled,d=t.htmlSize,p=t.className,m=t.maxLength,h=t.suffix,v=t.showCount,g=t.type,y=void 0===g?"text":g,b=t.inputClassName,w=Y(t,fu),E=K(dt(t.defaultValue,{value:t.value}),2),x=E[0],k=E[1],C=K((0,e.useState)(!1),2),S=C[0],O=C[1],P=(0,e.useRef)(null),N=function(e){P.current&&function(e,t){if(e){e.focus(t);var n=(t||{}).cursor;if(n){var r=e.value.length;switch(n){case"start":e.setSelectionRange(0,0);break;case"end":e.setSelectionRange(r,r);break;default:e.setSelectionRange(0,r)}}}}(P.current,e)};(0,e.useImperativeHandle)(n,(function(){return{focus:N,blur:function(){var e;null===(e=P.current)||void 0===e||e.blur()},setSelectionRange:function(e,t,n){var r;null===(r=P.current)||void 0===r||r.setSelectionRange(e,t,n)},select:function(){var e;null===(e=P.current)||void 0===e||e.select()},input:P.current}})),(0,e.useEffect)((function(){O((function(e){return(!e||!f)&&e}))}),[f]);var _;return e.createElement(su,H(H({},w),{},{prefixCls:s,className:p,inputElement:(_=xn(t,["prefixCls","onPressEnter","addonBefore","addonAfter","prefix","suffix","allowClear","defaultValue","showCount","affixWrapperClassName","groupClassName","inputClassName","wrapperClassName","htmlSize"]),e.createElement("input",H(H({autoComplete:r},_),{},{onChange:function(e){k(e.target.value),P.current&&uu(P.current,e,a)},onFocus:function(e){O(!0),null==o||o(e)},onBlur:function(e){O(!1),null==i||i(e)},onKeyDown:function(e){l&&"Enter"===e.key&&l(e),null==u||u(e)},className:G()(s,D({},"".concat(s,"-disabled"),f),b,!iu(t)&&!lu(t)&&p),ref:P,size:d,type:y}))),handleReset:function(e){k(""),N(),P.current&&uu(P.current,e,a)},value:cu(x),focused:S,triggerFocus:N,suffix:function(){var t=Number(m)>0;if(h||v){var n=ct(cu(x)).length,r="object"===Z(v)?v.formatter({count:n,maxLength:m}):"".concat(n).concat(t?" / ".concat(m):"");return e.createElement(e.Fragment,null,!!v&&e.createElement("span",{className:G()("".concat(s,"-show-count-suffix"),D({},"".concat(s,"-show-count-has-suffix"),!!h))},r),h)}return null}(),disabled:f}))}));const pu=du,mu={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"}}]},name:"close-circle",theme:"filled"};var hu=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:mu}))};hu.displayName="CloseCircleFilled";const vu=e.forwardRef(hu);const gu=e.createContext(void 0),yu={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};var bu=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:yu}))};bu.displayName="CheckCircleFilled";const wu=e.forwardRef(bu),Eu={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"};var xu=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Eu}))};xu.displayName="ExclamationCircleFilled";const ku=e.forwardRef(xu),Cu={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"}}]},name:"loading",theme:"outlined"};var Su=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Cu}))};Su.displayName="LoadingOutlined";const Ou=e.forwardRef(Su);Vi("warning","error","");var Pu={success:wu,warning:ku,error:vu,validating:Ou},Nu=function(t,n){var r=n&&Pu[n];return r?e.createElement("span",{className:"".concat(t,"-feedback-icon")},e.createElement(r,null)):null};function _u(e,t,n){var r;return G()((D(r={},"".concat(e,"-status-success"),"success"===t),D(r,"".concat(e,"-status-warning"),"warning"===t),D(r,"".concat(e,"-status-error"),"error"===t),D(r,"".concat(e,"-status-validating"),"validating"===t),D(r,"".concat(e,"-has-feedback"),n),r))}var Tu=function(e,t){return t||e},Mu="RC_FORM_INTERNAL_HOOKS",Ru=function(){Se(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const Au=e.createContext({getFieldValue:Ru,getFieldsValue:Ru,getFieldError:Ru,getFieldWarning:Ru,getFieldsError:Ru,isFieldsTouched:Ru,isFieldTouched:Ru,isFieldValidating:Ru,isFieldsValidating:Ru,resetFields:Ru,setFields:Ru,setFieldsValue:Ru,validateFields:Ru,submit:Ru,getInternalHooks:function(){return Ru(),{dispatch:Ru,initEntityValue:Ru,registerField:Ru,useSubscribe:Ru,setInitialValues:Ru,setCallbacks:Ru,getFields:Ru,setValidateMessages:Ru,setPreserve:Ru,getInitialValue:Ru}}});function Fu(e){return null==e?[]:Array.isArray(e)?e:[e]}function ju(){return ju=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ju.apply(this,arguments)}function Lu(e){return Lu=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},Lu(e)}function Iu(e,t){return Iu=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},Iu(e,t)}function zu(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function Du(e,t,n){return Du=zu()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var a=new(Function.bind.apply(e,r));return n&&Iu(a,n.prototype),a},Du.apply(null,arguments)}function Vu(e){var t="function"==typeof Map?new Map:void 0;return Vu=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return Du(e,arguments,Lu(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Iu(r,e)},Vu(e)}var Hu=/%[sdj%]/g;function Uu(e){if(!e||!e.length)return null;var t={};return e.forEach((function(e){var n=e.field;t[n]=t[n]||[],t[n].push(e)})),t}function Bu(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var a=0,o=n.length;if("function"==typeof e)return e.apply(null,n);if("string"==typeof e){var i=e.replace(Hu,(function(e){if("%%"===e)return"%";if(a>=o)return e;switch(e){case"%s":return String(n[a++]);case"%d":return Number(n[a++]);case"%j":try{return JSON.stringify(n[a++])}catch(e){return"[Circular]"}break;default:return e}}));return i}return e}function Wu(e,t){return null==e||!("array"!==t||!Array.isArray(e)||e.length)||!(!function(e){return"string"===e||"url"===e||"hex"===e||"email"===e||"date"===e||"pattern"===e}(t)||"string"!=typeof e||e)}function $u(e,t,n){var r=0,a=e.length;!function o(i){if(i&&i.length)n(i);else{var l=r;r+=1,l<a?t(e[l],o):n([])}}([])}"undefined"!=typeof process&&process.env;var qu=function(e){var t,n;function r(t,n){var r;return(r=e.call(this,"Async Validation Error")||this).errors=t,r.fields=n,r}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,Iu(t,n),r}(Vu(Error));function Ku(e,t){return function(n){var r,a;return r=e.fullFields?function(e,t){for(var n=e,r=0;r<t.length;r++){if(null==n)return n;n=n[t[r]]}return n}(t,e.fullFields):t[n.field||e.fullField],(a=n)&&void 0!==a.message?(n.field=n.field||e.fullField,n.fieldValue=r,n):{message:"function"==typeof n?n():n,fieldValue:r,field:n.field||e.fullField}}}function Yu(e,t){if(t)for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];"object"==typeof r&&"object"==typeof e[n]?e[n]=ju({},e[n],r):e[n]=r}return e}var Qu=function(e,t,n,r,a,o){!e.required||n.hasOwnProperty(e.field)&&!Wu(t,o||e.type)||r.push(Bu(a.messages.required,e.fullField))},Gu={email:/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,url:new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$","i"),hex:/^#?([a-f0-9]{6}|[a-f0-9]{3})$/i},Xu={integer:function(e){return Xu.number(e)&&parseInt(e,10)===e},float:function(e){return Xu.number(e)&&!Xu.integer(e)},array:function(e){return Array.isArray(e)},regexp:function(e){if(e instanceof RegExp)return!0;try{return!!new RegExp(e)}catch(e){return!1}},date:function(e){return"function"==typeof e.getTime&&"function"==typeof e.getMonth&&"function"==typeof e.getYear&&!isNaN(e.getTime())},number:function(e){return!isNaN(e)&&"number"==typeof e},object:function(e){return"object"==typeof e&&!Xu.array(e)},method:function(e){return"function"==typeof e},email:function(e){return"string"==typeof e&&e.length<=320&&!!e.match(Gu.email)},url:function(e){return"string"==typeof e&&e.length<=2048&&!!e.match(Gu.url)},hex:function(e){return"string"==typeof e&&!!e.match(Gu.hex)}},Zu=Qu,Ju=function(e,t,n,r,a){(/^\s+$/.test(t)||""===t)&&r.push(Bu(a.messages.whitespace,e.fullField))},ec=function(e,t,n,r,a){if(e.required&&void 0===t)Qu(e,t,n,r,a);else{var o=e.type;["integer","float","array","regexp","object","method","email","number","date","url","hex"].indexOf(o)>-1?Xu[o](t)||r.push(Bu(a.messages.types[o],e.fullField,e.type)):o&&typeof t!==e.type&&r.push(Bu(a.messages.types[o],e.fullField,e.type))}},tc=function(e,t,n,r,a){var o="number"==typeof e.len,i="number"==typeof e.min,l="number"==typeof e.max,u=t,c=null,s="number"==typeof t,f="string"==typeof t,d=Array.isArray(t);if(s?c="number":f?c="string":d&&(c="array"),!c)return!1;d&&(u=t.length),f&&(u=t.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"_").length),o?u!==e.len&&r.push(Bu(a.messages[c].len,e.fullField,e.len)):i&&!l&&u<e.min?r.push(Bu(a.messages[c].min,e.fullField,e.min)):l&&!i&&u>e.max?r.push(Bu(a.messages[c].max,e.fullField,e.max)):i&&l&&(u<e.min||u>e.max)&&r.push(Bu(a.messages[c].range,e.fullField,e.min,e.max))},nc=function(e,t,n,r,a){e.enum=Array.isArray(e.enum)?e.enum:[],-1===e.enum.indexOf(t)&&r.push(Bu(a.messages.enum,e.fullField,e.enum.join(", ")))},rc=function(e,t,n,r,a){e.pattern&&(e.pattern instanceof RegExp?(e.pattern.lastIndex=0,e.pattern.test(t)||r.push(Bu(a.messages.pattern.mismatch,e.fullField,t,e.pattern))):"string"==typeof e.pattern&&(new RegExp(e.pattern).test(t)||r.push(Bu(a.messages.pattern.mismatch,e.fullField,t,e.pattern))))},ac=function(e,t,n,r,a){var o=e.type,i=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t,o)&&!e.required)return n();Zu(e,t,r,i,a,o),Wu(t,o)||ec(e,t,r,i,a)}n(i)},oc={string:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t,"string")&&!e.required)return n();Zu(e,t,r,o,a,"string"),Wu(t,"string")||(ec(e,t,r,o,a),tc(e,t,r,o,a),rc(e,t,r,o,a),!0===e.whitespace&&Ju(e,t,r,o,a))}n(o)},method:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&ec(e,t,r,o,a)}n(o)},number:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(""===t&&(t=void 0),Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&(ec(e,t,r,o,a),tc(e,t,r,o,a))}n(o)},boolean:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&ec(e,t,r,o,a)}n(o)},regexp:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),Wu(t)||ec(e,t,r,o,a)}n(o)},integer:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&(ec(e,t,r,o,a),tc(e,t,r,o,a))}n(o)},float:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&(ec(e,t,r,o,a),tc(e,t,r,o,a))}n(o)},array:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(null==t&&!e.required)return n();Zu(e,t,r,o,a,"array"),null!=t&&(ec(e,t,r,o,a),tc(e,t,r,o,a))}n(o)},object:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&ec(e,t,r,o,a)}n(o)},enum:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a),void 0!==t&&nc(e,t,r,o,a)}n(o)},pattern:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t,"string")&&!e.required)return n();Zu(e,t,r,o,a),Wu(t,"string")||rc(e,t,r,o,a)}n(o)},date:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t,"date")&&!e.required)return n();var i;Zu(e,t,r,o,a),Wu(t,"date")||(i=t instanceof Date?t:new Date(t),ec(e,i,r,o,a),i&&tc(e,i.getTime(),r,o,a))}n(o)},url:ac,hex:ac,email:ac,required:function(e,t,n,r,a){var o=[],i=Array.isArray(t)?"array":typeof t;Zu(e,t,r,o,a,i),n(o)},any:function(e,t,n,r,a){var o=[];if(e.required||!e.required&&r.hasOwnProperty(e.field)){if(Wu(t)&&!e.required)return n();Zu(e,t,r,o,a)}n(o)}};function ic(){return{default:"Validation error on field %s",required:"%s is required",enum:"%s must be one of %s",whitespace:"%s cannot be empty",date:{format:"%s date %s is invalid for format %s",parse:"%s date could not be parsed, %s is invalid ",invalid:"%s date %s is invalid"},types:{string:"%s is not a %s",method:"%s is not a %s (function)",array:"%s is not an %s",object:"%s is not an %s",number:"%s is not a %s",date:"%s is not a %s",boolean:"%s is not a %s",integer:"%s is not an %s",float:"%s is not a %s",regexp:"%s is not a valid %s",email:"%s is not a valid %s",url:"%s is not a valid %s",hex:"%s is not a valid %s"},string:{len:"%s must be exactly %s characters",min:"%s must be at least %s characters",max:"%s cannot be longer than %s characters",range:"%s must be between %s and %s characters"},number:{len:"%s must equal %s",min:"%s cannot be less than %s",max:"%s cannot be greater than %s",range:"%s must be between %s and %s"},array:{len:"%s must be exactly %s in length",min:"%s cannot be less than %s in length",max:"%s cannot be greater than %s in length",range:"%s must be between %s and %s in length"},pattern:{mismatch:"%s value %s does not match pattern %s"},clone:function(){var e=JSON.parse(JSON.stringify(this));return e.clone=this.clone,e}}}var lc=ic(),uc=function(){function e(e){this.rules=null,this._messages=lc,this.define(e)}var t=e.prototype;return t.define=function(e){var t=this;if(!e)throw new Error("Cannot configure a schema with no rules");if("object"!=typeof e||Array.isArray(e))throw new Error("Rules must be an object");this.rules={},Object.keys(e).forEach((function(n){var r=e[n];t.rules[n]=Array.isArray(r)?r:[r]}))},t.messages=function(e){return e&&(this._messages=Yu(ic(),e)),this._messages},t.validate=function(t,n,r){var a=this;void 0===n&&(n={}),void 0===r&&(r=function(){});var o=t,i=n,l=r;if("function"==typeof i&&(l=i,i={}),!this.rules||0===Object.keys(this.rules).length)return l&&l(null,o),Promise.resolve(o);if(i.messages){var u=this.messages();u===lc&&(u=ic()),Yu(u,i.messages),i.messages=u}else i.messages=this.messages();var c={};(i.keys||Object.keys(this.rules)).forEach((function(e){var n=a.rules[e],r=o[e];n.forEach((function(n){var i=n;"function"==typeof i.transform&&(o===t&&(o=ju({},o)),r=o[e]=i.transform(r)),(i="function"==typeof i?{validator:i}:ju({},i)).validator=a.getValidationMethod(i),i.validator&&(i.field=e,i.fullField=i.fullField||e,i.type=a.getType(i),c[e]=c[e]||[],c[e].push({rule:i,value:r,source:o,field:e}))}))}));var s={};return function(e,t,n,r,a){if(t.first){var o=new Promise((function(t,o){var i=function(e){var t=[];return Object.keys(e).forEach((function(n){t.push.apply(t,e[n]||[])})),t}(e);$u(i,n,(function(e){return r(e),e.length?o(new qu(e,Uu(e))):t(a)}))}));return o.catch((function(e){return e})),o}var i=!0===t.firstFields?Object.keys(e):t.firstFields||[],l=Object.keys(e),u=l.length,c=0,s=[],f=new Promise((function(t,o){var f=function(e){if(s.push.apply(s,e),++c===u)return r(s),s.length?o(new qu(s,Uu(s))):t(a)};l.length||(r(s),t(a)),l.forEach((function(t){var r=e[t];-1!==i.indexOf(t)?$u(r,n,f):function(e,t,n){var r=[],a=0,o=e.length;function i(e){r.push.apply(r,e||[]),++a===o&&n(r)}e.forEach((function(e){t(e,i)}))}(r,n,f)}))}));return f.catch((function(e){return e})),f}(c,i,(function(t,n){var r,a=t.rule,l=!("object"!==a.type&&"array"!==a.type||"object"!=typeof a.fields&&"object"!=typeof a.defaultField);function u(e,t){return ju({},t,{fullField:a.fullField+"."+e,fullFields:a.fullFields?[].concat(a.fullFields,[e]):[e]})}function c(r){void 0===r&&(r=[]);var c=Array.isArray(r)?r:[r];!i.suppressWarning&&c.length&&e.warning("async-validator:",c),c.length&&void 0!==a.message&&(c=[].concat(a.message));var f=c.map(Ku(a,o));if(i.first&&f.length)return s[a.field]=1,n(f);if(l){if(a.required&&!t.value)return void 0!==a.message?f=[].concat(a.message).map(Ku(a,o)):i.error&&(f=[i.error(a,Bu(i.messages.required,a.field))]),n(f);var d={};a.defaultField&&Object.keys(t.value).map((function(e){d[e]=a.defaultField})),d=ju({},d,t.rule.fields);var p={};Object.keys(d).forEach((function(e){var t=d[e],n=Array.isArray(t)?t:[t];p[e]=n.map(u.bind(null,e))}));var m=new e(p);m.messages(i.messages),t.rule.options&&(t.rule.options.messages=i.messages,t.rule.options.error=i.error),m.validate(t.value,t.rule.options||i,(function(e){var t=[];f&&f.length&&t.push.apply(t,f),e&&e.length&&t.push.apply(t,e),n(t.length?t:null)}))}else n(f)}l=l&&(a.required||!a.required&&t.value),a.field=t.field,a.asyncValidator?r=a.asyncValidator(a,t.value,c,t.source,i):a.validator&&(!0===(r=a.validator(a,t.value,c,t.source,i))?c():!1===r?c("function"==typeof a.message?a.message(a.fullField||a.field):a.message||(a.fullField||a.field)+" fails"):r instanceof Array?c(r):r instanceof Error&&c(r.message)),r&&r.then&&r.then((function(){return c()}),(function(e){return c(e)}))}),(function(e){!function(e){for(var t,n,r=[],a={},i=0;i<e.length;i++)t=e[i],n=void 0,Array.isArray(t)?r=(n=r).concat.apply(n,t):r.push(t);r.length?(a=Uu(r),l(r,a)):l(null,o)}(e)}),o)},t.getType=function(e){if(void 0===e.type&&e.pattern instanceof RegExp&&(e.type="pattern"),"function"!=typeof e.validator&&e.type&&!oc.hasOwnProperty(e.type))throw new Error(Bu("Unknown rule type %s",e.type));return e.type||"string"},t.getValidationMethod=function(e){if("function"==typeof e.validator)return e.validator;var t=Object.keys(e),n=t.indexOf("message");return-1!==n&&t.splice(n,1),1===t.length&&"required"===t[0]?oc.required:oc[this.getType(e)]||void 0},e}();uc.register=function(e,t){if("function"!=typeof t)throw new Error("Cannot register a validator by type, validator is not a function");oc[e]=t},uc.warning=function(){},uc.messages=lc,uc.validators=oc;var cc="'${name}' is not a valid ${type}",sc={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:cc,method:cc,array:cc,object:cc,number:cc,date:cc,boolean:cc,integer:cc,float:cc,regexp:cc,email:cc,url:cc,hex:cc},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}};function fc(e,t){for(var n=e,r=0;r<t.length;r+=1){if(null==n)return;n=n[t[r]]}return n}function dc(e,t,n,r){if(!t.length)return n;var a,o,i=B(a=t)||ut(a)||$(a)||q(),l=i[0],u=i.slice(1);return o=e||"number"!=typeof l?Array.isArray(e)?ct(e):H({},e):[],r&&void 0===n&&1===u.length?delete o[l][u[0]]:o[l]=dc(o[l],u,n,r),o}function pc(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&r&&void 0===n&&!fc(e,t.slice(0,-1))?e:dc(e,t,n,r)}function mc(e){return Fu(e)}function hc(e,t){return fc(e,t)}function vc(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=pc(e,t,n,r);return a}function gc(e,t){var n={};return t.forEach((function(t){var r=hc(e,t);n=vc(n,t,r)})),n}function yc(e,t){return e&&e.some((function(e){return xc(e,t)}))}function bc(e){return"object"===Z(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function wc(e,t){var n=Array.isArray(e)?ct(e):H({},e);return t?(Object.keys(t).forEach((function(e){var r=n[e],a=t[e],o=bc(r)&&bc(a);n[e]=o?wc(r,a||{}):a})),n):n}function Ec(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(e,t){return wc(e,t)}),e)}function xc(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function kc(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&"object"===Z(t.target)&&e in t.target?t.target[e]:t}function Cc(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var a=e[t],o=t-n;return o>0?[].concat(ct(e.slice(0,n)),[a],ct(e.slice(n,t)),ct(e.slice(t+1,r))):o<0?[].concat(ct(e.slice(0,t)),ct(e.slice(t+1,n+1)),[a],ct(e.slice(n+1,r))):e}var Sc=uc;function Oc(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}function Pc(e,t,n,r,a){return Nc.apply(this,arguments)}function Nc(){return Nc=lo(oo().mark((function t(n,r,a,o,i){var l,u,c,s,f,d,p,m;return oo().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return delete(l=H({},a)).ruleIndex,u=null,l&&"array"===l.type&&l.defaultField&&(u=l.defaultField,delete l.defaultField),c=new Sc(D({},n,[l])),s=Ec({},sc,o.validateMessages),c.messages(s),f=[],t.prev=8,t.next=11,Promise.resolve(c.validate(D({},n,r),H({},o)));case 11:t.next=16;break;case 13:t.prev=13,t.t0=t.catch(8),t.t0.errors?f=t.t0.errors.map((function(t,n){var r=t.message;return e.isValidElement(r)?e.cloneElement(r,{key:"error_".concat(n)}):r})):(console.error(t.t0),f=[s.default]);case 16:if(f.length||!u){t.next=21;break}return t.next=19,Promise.all(r.map((function(e,t){return Pc("".concat(n,".").concat(t),e,u,o,i)})));case 19:return d=t.sent,t.abrupt("return",d.reduce((function(e,t){return[].concat(ct(e),ct(t))}),[]));case 21:return p=H(H({},a),{},{name:n,enum:(a.enum||[]).join(", ")},i),m=f.map((function(e){return"string"==typeof e?Oc(e,p):e})),t.abrupt("return",m);case 24:case"end":return t.stop()}}),t,null,[[8,13]])}))),Nc.apply(this,arguments)}function _c(){return(_c=lo(oo().mark((function e(t){return oo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,ct(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function Tc(){return(Tc=lo(oo().mark((function e(t){var n;return oo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.errors.length&&e([r]),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var Mc=["name"],Rc=[];function Ac(e,t,n,r,a,o){return"function"==typeof e?e(t,n,"source"in o?{source:o.source}:{}):r!==a}var Fc=function(t){rt(r,t);var n=lt(r);function r(t){var a;return Je(this,r),(a=n.call(this,t)).state={resetCount:0},a.cancelRegisterFunc=null,a.mounted=!1,a.touched=!1,a.dirty=!1,a.validatePromise=null,a.prevValidating=void 0,a.errors=Rc,a.warnings=Rc,a.cancelRegister=function(){var e=a.props,t=e.preserve,n=e.isListField,r=e.name;a.cancelRegisterFunc&&a.cancelRegisterFunc(n,t,mc(r)),a.cancelRegisterFunc=null},a.getNamePath=function(){var e=a.props,t=e.name,n=e.fieldContext.prefixName;return void 0!==t?[].concat(ct(void 0===n?[]:n),ct(t)):[]},a.getRules=function(){var e=a.props,t=e.rules,n=void 0===t?[]:t,r=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(r):e}))},a.refresh=function(){a.mounted&&a.setState((function(e){return{resetCount:e.resetCount+1}}))},a.triggerMetaEvent=function(e){var t=a.props.onMetaChange;null==t||t(H(H({},a.getMeta()),{},{destroy:e}))},a.onStoreChange=function(e,t,n){var r=a.props,o=r.shouldUpdate,i=r.dependencies,l=void 0===i?[]:i,u=r.onReset,c=n.store,s=a.getNamePath(),f=a.getValue(e),d=a.getValue(c),p=t&&yc(t,s);switch("valueUpdate"===n.type&&"external"===n.source&&f!==d&&(a.touched=!0,a.dirty=!0,a.validatePromise=null,a.errors=Rc,a.warnings=Rc,a.triggerMetaEvent()),n.type){case"reset":if(!t||p)return a.touched=!1,a.dirty=!1,a.validatePromise=null,a.errors=Rc,a.warnings=Rc,a.triggerMetaEvent(),null==u||u(),void a.refresh();break;case"remove":if(o)return void a.reRender();break;case"setField":if(p){var m=n.data;return"touched"in m&&(a.touched=m.touched),"validating"in m&&!("originRCField"in m)&&(a.validatePromise=m.validating?Promise.resolve([]):null),"errors"in m&&(a.errors=m.errors||Rc),"warnings"in m&&(a.warnings=m.warnings||Rc),a.dirty=!0,a.triggerMetaEvent(),void a.reRender()}if(o&&!s.length&&Ac(o,e,c,f,d,n))return void a.reRender();break;case"dependenciesUpdate":if(l.map(mc).some((function(e){return yc(n.relatedFields,e)})))return void a.reRender();break;default:if(p||(!l.length||s.length||o)&&Ac(o,e,c,f,d,n))return void a.reRender()}!0===o&&a.reRender()},a.validateRules=function(e){var t=a.getNamePath(),n=a.getValue(),r=Promise.resolve().then((function(){if(!a.mounted)return[];var o=a.props,i=o.validateFirst,l=void 0!==i&&i,u=o.messageVariables,c=(e||{}).triggerName,s=a.getRules();c&&(s=s.filter((function(e){var t=e.validateTrigger;return!t||Fu(t).includes(c)})));var f=function(e,t,n,r,a,o){var i,l=e.join("."),u=n.map((function(e,t){var n=e.validator,r=H(H({},e),{},{ruleIndex:t});return n&&(r.validator=function(e,t,r){var a=!1,o=n(e,t,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){Se(!a,"Your validator function has already return a promise. `callback` will be ignored."),a||r.apply(void 0,t)}))}));a=o&&"function"==typeof o.then&&"function"==typeof o.catch,Se(a,"`callback` is deprecated. Please return a promise instead."),a&&o.then((function(){r()})).catch((function(e){r(e||" ")}))}),r})).sort((function(e,t){var n=e.warningOnly,r=e.ruleIndex,a=t.warningOnly,o=t.ruleIndex;return!!n==!!a?r-o:n?1:-1}));if(!0===a)i=new Promise(function(){var e=lo(oo().mark((function e(n,a){var i,c,s;return oo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=0;case 1:if(!(i<u.length)){e.next=12;break}return c=u[i],e.next=5,Pc(l,t,c,r,o);case 5:if(!(s=e.sent).length){e.next=9;break}return a([{errors:s,rule:c}]),e.abrupt("return");case 9:i+=1,e.next=1;break;case 12:n([]);case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var c=u.map((function(e){return Pc(l,t,e,r,o).then((function(t){return{errors:t,rule:e}}))}));i=(a?function(e){return Tc.apply(this,arguments)}(c):function(e){return _c.apply(this,arguments)}(c)).then((function(e){return Promise.reject(e)}))}return i.catch((function(e){return e})),i}(t,n,s,e,l,u);return f.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Rc;if(a.validatePromise===r){a.validatePromise=null;var t=[],n=[];e.forEach((function(e){var r=e.rule.warningOnly,a=e.errors,o=void 0===a?Rc:a;r?n.push.apply(n,ct(o)):t.push.apply(t,ct(o))})),a.errors=t,a.warnings=n,a.triggerMetaEvent(),a.reRender()}})),f}));return a.validatePromise=r,a.dirty=!0,a.errors=Rc,a.warnings=Rc,a.triggerMetaEvent(),a.reRender(),r},a.isFieldValidating=function(){return!!a.validatePromise},a.isFieldTouched=function(){return a.touched},a.isFieldDirty=function(){return!(!a.dirty&&void 0===a.props.initialValue)||void 0!==(0,a.props.fieldContext.getInternalHooks(Mu).getInitialValue)(a.getNamePath())},a.getErrors=function(){return a.errors},a.getWarnings=function(){return a.warnings},a.isListField=function(){return a.props.isListField},a.isList=function(){return a.props.isList},a.isPreserve=function(){return a.props.preserve},a.getMeta=function(){return a.prevValidating=a.isFieldValidating(),{touched:a.isFieldTouched(),validating:a.prevValidating,errors:a.errors,warnings:a.warnings,name:a.getNamePath()}},a.getOnlyChild=function(t){if("function"==typeof t){var n=a.getMeta();return H(H({},a.getOnlyChild(t(a.getControlled(),n,a.props.fieldContext))),{},{isFunction:!0})}var r=mt(t);return 1===r.length&&e.isValidElement(r[0])?{child:r[0],isFunction:!1}:{child:r,isFunction:!1}},a.getValue=function(e){var t=a.props.fieldContext.getFieldsValue,n=a.getNamePath();return hc(e||t(!0),n)},a.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=a.props,n=t.trigger,r=t.validateTrigger,o=t.getValueFromEvent,i=t.normalize,l=t.valuePropName,u=t.getValueProps,c=t.fieldContext,s=void 0!==r?r:c.validateTrigger,f=a.getNamePath(),d=c.getInternalHooks,p=c.getFieldsValue,m=d(Mu),h=m.dispatch,v=a.getValue(),g=u||function(e){return D({},l,e)},y=e[n],b=H(H({},e),g(v));b[n]=function(){var e;a.touched=!0,a.dirty=!0,a.triggerMetaEvent();for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e=o?o.apply(void 0,n):kc.apply(void 0,[l].concat(n)),i&&(e=i(e,v,p(!0))),h({type:"updateValue",namePath:f,value:e}),y&&y.apply(void 0,n)};var w=Fu(s||[]);return w.forEach((function(e){var t=b[e];b[e]=function(){t&&t.apply(void 0,arguments);var n=a.props.rules;n&&n.length&&h({type:"validateField",namePath:f,triggerName:e})}})),b},t.fieldContext&&(0,(0,t.fieldContext.getInternalHooks)(Mu).initEntityValue)(ot(a)),a}return tt(r,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(Mu).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var t,n=this.state.resetCount,r=this.props.children,a=this.getOnlyChild(r),o=a.child;return a.isFunction?t=o:e.isValidElement(o)?t=e.cloneElement(o,this.getControlled(o.props)):(Se(!o,"`children` of Field is not validate ReactElement."),t=o),e.createElement(e.Fragment,{key:n},t)}}]),r}(e.Component);Fc.contextType=Au,Fc.defaultProps={trigger:"onChange",valuePropName:"value"};const jc=function(t){var n=t.name,a=Y(t,Mc),o=e.useContext(Au),i=void 0!==n?mc(n):void 0,l="keep";return a.isListField||(l="_".concat((i||[]).join("_"))),e.createElement(Fc,r({key:l,name:i},a,{fieldContext:o}))},Lc=e.createContext(null);var Ic="__@field_split__";function zc(e){return e.map((function(e){return"".concat(Z(e),":").concat(e)})).join(Ic)}var Dc=function(){function e(){Je(this,e),this.kvs=new Map}return tt(e,[{key:"set",value:function(e,t){this.kvs.set(zc(e),t)}},{key:"get",value:function(e){return this.kvs.get(zc(e))}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(zc(e))}},{key:"map",value:function(e){return ct(this.kvs.entries()).map((function(t){var n=K(t,2),r=n[0],a=n[1],o=r.split(Ic);return e({key:o.map((function(e){var t=K(e.match(/^([^:]*):(.*)$/),3),n=t[1],r=t[2];return"number"===n?Number(r):r})),value:a})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}();const Vc=Dc;var Hc=["name","errors"],Uc=tt((function e(t){var n=this;Je(this,e),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldWarning:n.getFieldWarning,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===Mu?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve,getInitialValue:n.getInitialValue}):(Se(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.setInitialValues=function(e,t){n.initialValues=e||{},t&&(n.store=Ec({},e,n.store))},this.getInitialValue=function(e){return hc(n.initialValues,e)},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.timeoutId=null,this.warningUnhooked=function(){},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new Vc;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=mc(e);return t.get(n)||{INVALIDATE_NAME_PATH:mc(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),a=[];return r.forEach((function(n){var r,o="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var i="getMeta"in n?n.getMeta():null;t(i)&&a.push(o)}else a.push(o)})),gc(n.store,a.map(mc))},this.getFieldValue=function(e){n.warningUnhooked();var t=mc(e);return hc(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors(),warnings:t.getWarnings()}:{name:mc(e[n]),errors:[],warnings:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=mc(e);return n.getFieldsError([t])[0].errors},this.getFieldWarning=function(e){n.warningUnhooked();var t=mc(e);return n.getFieldsError([t])[0].warnings},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var a,o=t[0],i=t[1],l=!1;0===t.length?a=null:1===t.length?Array.isArray(o)?(a=o.map(mc),l=!1):(a=null,l=o):(a=o.map(mc),l=i);var u=n.getFieldEntities(!0),c=function(e){return e.isFieldTouched()};if(!a)return l?u.every(c):u.some(c);var s=new Vc;a.forEach((function(e){s.set(e,[])})),u.forEach((function(e){var t=e.getNamePath();a.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&s.update(n,(function(t){return[].concat(ct(t),[e])}))}))}));var f=function(e){return e.some(c)},d=s.map((function(e){return e.value}));return l?d.every(f):d.some(f)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(mc);return t.some((function(e){var t=e.getNamePath();return yc(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new Vc,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var a=t.get(r)||new Set;a.add({entity:e,value:n}),t.set(r,a)}}));var a,o=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var a=r.getNamePath();if(void 0!==n.getInitialValue(a))Se(!1,"Form already set 'initialValues' with path '".concat(a.join("."),"'. Field can not overwrite it."));else{var o=t.get(a);if(o&&o.size>1)Se(!1,"Multiple Field with path '".concat(a.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(o){var i=n.getFieldValue(a);e.skipExist&&void 0!==i||(n.store=vc(n.store,a,ct(o)[0].value))}}}}))};e.entities?a=e.entities:e.namePathList?(a=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=a).push.apply(n,ct(ct(r).map((function(e){return e.entity}))))}))):a=r,o(a)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.store=Ec({},n.initialValues),n.resetWithFieldInitialValue(),void n.notifyObservers(t,null,{type:"reset"});var r=e.map(mc);r.forEach((function(e){var t=n.getInitialValue(e);n.store=vc(n.store,e,t)})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"})},this.setFields=function(e){n.warningUnhooked();var t=n.store;e.forEach((function(e){var r=e.name,a=(e.errors,Y(e,Hc)),o=mc(r);"value"in a&&(n.store=vc(n.store,o,a.value)),n.notifyObservers(t,[o],{type:"setField",data:e})}))},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=H(H({},e.getMeta()),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(r,"originRCField",{value:!0}),r}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===hc(n.store,r)&&(n.store=vc(n.store,r,t))}},this.registerField=function(e){if(n.fieldEntities.push(e),void 0!==e.props.initialValue){var t=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(t,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(t,r){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e}));var o=void 0!==r?r:n.preserve;if(!1===o&&(!t||a.length>1)){var i=e.getNamePath(),l=t?void 0:hc(n.initialValues,i);if(i.length&&n.getFieldValue(i)!==l&&n.fieldEntities.every((function(e){return!xc(e.getNamePath(),i)}))){var u=n.store;n.store=vc(u,i,l,!0),n.notifyObservers(u,[i],{type:"remove"}),n.triggerDependenciesUpdate(u,i)}}}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var a=e.namePath,o=e.triggerName;n.validateFields([a],{triggerName:o})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var a=H(H({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,a)}))}else n.forceRootUpdate()},this.triggerDependenciesUpdate=function(e,t){var r=n.getDependencyChildrenFields(t);return r.length&&n.validateFields(r),n.notifyObservers(e,r,{type:"dependenciesUpdate",relatedFields:[t].concat(ct(r))}),r},this.updateValue=function(e,t){var r=mc(e),a=n.store;n.store=vc(n.store,r,t),n.notifyObservers(a,[r],{type:"valueUpdate",source:"internal"});var o=n.triggerDependenciesUpdate(a,r),i=n.callbacks.onValuesChange;i&&i(gc(n.store,[r]),n.getFieldsValue()),n.triggerOnFieldsChange([r].concat(ct(o)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;e&&(n.store=Ec(n.store,e)),n.notifyObservers(t,null,{type:"valueUpdate",source:"external"})},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],a=new Vc;return n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=mc(t);a.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))})),function e(n){(a.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var a=n.getNamePath();n.isFieldDirty()&&a.length&&(r.push(a),e(a))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var a=n.getFields();if(t){var o=new Vc;t.forEach((function(e){var t=e.name,n=e.errors;o.set(t,n)})),a.forEach((function(e){e.errors=o.get(e.name)||e.errors}))}r(a.filter((function(t){var n=t.name;return yc(e,n)})),a)}},this.validateFields=function(e,t){n.warningUnhooked();var r=!!e,a=r?e.map(mc):[],o=[];n.getFieldEntities(!0).forEach((function(i){if(r||a.push(i.getNamePath()),(null==t?void 0:t.recursive)&&r){var l=i.getNamePath();l.every((function(t,n){return e[n]===t||void 0===e[n]}))&&a.push(l)}if(i.props.rules&&i.props.rules.length){var u=i.getNamePath();if(!r||yc(a,u)){var c=i.validateRules(H({validateMessages:H(H({},sc),n.validateMessages)},t));o.push(c.then((function(){return{name:u,errors:[],warnings:[]}})).catch((function(e){var t=[],n=[];return e.forEach((function(e){var r=e.rule.warningOnly,a=e.errors;r?n.push.apply(n,ct(a)):t.push.apply(t,ct(a))})),t.length?Promise.reject({name:u,errors:t,warnings:n}):{name:u,errors:t,warnings:n}})))}}}));var i=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(a,o){e.forEach((function(e,i){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[i]=e,n>0||(t&&o(r),a(r))}))}))})):Promise.resolve([])}(o);n.lastValidatePromise=i,i.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var l=i.then((function(){return n.lastValidatePromise===i?Promise.resolve(n.getFieldsValue(a)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(a),errorFields:t,outOfDate:n.lastValidatePromise!==i})}));return l.catch((function(e){return e})),l},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t}));const Bc=function(t){var n=e.useRef(),r=K(e.useState({}),2)[1];if(!n.current)if(t)n.current=t;else{var a=new Uc((function(){r({})}));n.current=a.getForm()}return[n.current]};var Wc=e.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}});const $c=Wc;var qc=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"];const Kc=function(t,n){var a=t.name,o=t.initialValues,i=t.fields,l=t.form,u=t.preserve,c=t.children,s=t.component,f=void 0===s?"form":s,d=t.validateMessages,p=t.validateTrigger,m=void 0===p?"onChange":p,h=t.onValuesChange,v=t.onFieldsChange,g=t.onFinish,y=t.onFinishFailed,b=Y(t,qc),w=e.useContext($c),E=K(Bc(l),1)[0],x=E.getInternalHooks(Mu),k=x.useSubscribe,C=x.setInitialValues,S=x.setCallbacks,O=x.setValidateMessages,P=x.setPreserve;e.useImperativeHandle(n,(function(){return E})),e.useEffect((function(){return w.registerForm(a,E),function(){w.unregisterForm(a)}}),[w,E,a]),O(H(H({},w.validateMessages),d)),S({onValuesChange:h,onFieldsChange:function(e){if(w.triggerFormChange(a,e),v){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];v.apply(void 0,[e].concat(n))}},onFinish:function(e){w.triggerFormFinish(a,e),g&&g(e)},onFinishFailed:y}),P(u);var N=e.useRef(null);C(o,!N.current),N.current||(N.current=!0);var _=c,T="function"==typeof c;T&&(_=c(E.getFieldsValue(!0),E)),k(!T);var M=e.useRef();e.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==Z(e)||"object"!==Z(t))return!1;var n=Object.keys(e),r=Object.keys(t),a=new Set([].concat(ct(n),ct(r)));return ct(a).every((function(n){var r=e[n],a=t[n];return"function"==typeof r&&"function"==typeof a||r===a}))})(M.current||[],i||[])||E.setFields(i||[]),M.current=i}),[i,E]);var R=e.useMemo((function(){return H(H({},E),{},{validateTrigger:m})}),[E,m]),A=e.createElement(Au.Provider,{value:R},_);return!1===f?A:e.createElement(f,r({},b,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),E.submit()},onReset:function(e){var t;e.preventDefault(),E.resetFields(),null===(t=b.onReset)||void 0===t||t.call(b,e)}}),A)};var Yc=e.forwardRef(Kc);Yc.FormProvider=function(t){var n=t.validateMessages,r=t.onFormChange,a=t.onFormFinish,o=t.children,i=e.useContext(Wc),l=e.useRef({});return e.createElement(Wc.Provider,{value:H(H({},i),{},{validateMessages:H(H({},i.validateMessages),n),triggerFormChange:function(e,t){r&&r(e,{changedFields:t,forms:l.current}),i.triggerFormChange(e,t)},triggerFormFinish:function(e,t){a&&a(e,{values:t,forms:l.current}),i.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(l.current=H(H({},l.current),{},D({},e,t))),i.registerForm(e,t)},unregisterForm:function(e){var t=H({},l.current);delete t[e],l.current=t,i.unregisterForm(e)}})},o)},Yc.Field=jc,Yc.List=function(t){var n=t.name,r=t.initialValue,a=t.children,o=t.rules,i=t.validateTrigger,l=e.useContext(Au),u=e.useRef({keys:[],id:0}).current,c=e.useMemo((function(){var e=mc(l.prefixName)||[];return[].concat(ct(e),ct(mc(n)))}),[l.prefixName,n]),s=e.useMemo((function(){return H(H({},l),{},{prefixName:c})}),[l,c]),f=e.useMemo((function(){return{getKey:function(e){var t=c.length,n=e[t];return[u.keys[n],e.slice(t+1)]}}}),[c]);return"function"!=typeof a?(Se(!1,"Form.List only accepts function as children."),null):e.createElement(Lc.Provider,{value:f},e.createElement(Au.Provider,{value:s},e.createElement(jc,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:o,validateTrigger:i,initialValue:r,isList:!0},(function(e,t){var n=e.value,r=void 0===n?[]:n,o=e.onChange,i=l.getFieldValue,s=function(){return i(c||[])||[]},f={add:function(e,t){var n=s();t>=0&&t<=n.length?(u.keys=[].concat(ct(u.keys.slice(0,t)),[u.id],ct(u.keys.slice(t))),o([].concat(ct(n.slice(0,t)),[e],ct(n.slice(t))))):(u.keys=[].concat(ct(u.keys),[u.id]),o([].concat(ct(n),[e]))),u.id+=1},remove:function(e){var t=s(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(u.keys=u.keys.filter((function(e,t){return!n.has(t)})),o(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=s();e<0||e>=n.length||t<0||t>=n.length||(u.keys=Cc(u.keys,e,t),o(Cc(n,e,t)))}}},d=r||[];return Array.isArray(d)||(d=[]),a(d.map((function(e,t){var n=u.keys[t];return void 0===n&&(u.keys[t]=u.id,n=u.keys[t],u.id+=1),{name:t,key:n,isListField:!0}})),f,t)}))))},Yc.useForm=Bc;var Qc=e.createContext({});function Gc(e){return!!(e.prefix||e.suffix||e.allowClear)}function Xc(e,t,n,r){if(n){var a=t;if("click"===t.type){var o=e.cloneNode(!0);return a=Object.create(t,{target:{value:o},currentTarget:{value:o}}),o.value="",void n(a)}if(void 0!==r)return a=Object.create(t,{target:{value:e},currentTarget:{value:e}}),e.value=r,void n(a);n(a)}}var Zc=(0,e.forwardRef)((function(t,n){var a,o,i,l=t.prefixCls,u=t.bordered,c=void 0===u||u,s=t.status,f=t.size,d=t.onBlur,p=t.onFocus,m=t.suffix,h=t.allowClear,v=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","bordered","status","size","onBlur","onFocus","suffix","allowClear"]),g=e.useContext(zi),y=g.getPrefixCls,b=g.direction,w=g.input,E=y("input",l),x=(0,e.useRef)(null),k=e.useContext(gu),C=f||k,S=(0,e.useContext)(Qc),O=S.status,P=S.hasFeedback,N=Tu(O,s),_=Gc(t),T=(0,e.useRef)(_);(0,e.useEffect)((function(){var e;_&&!T.current&&yl(document.activeElement===(null===(e=x.current)||void 0===e?void 0:e.input),"Input","When Input is focused, dynamic add or remove prefix / suffix will make it lose focus caused by dom structure change. Read more: https://ant.design/components/input/#FAQ"),T.current=_}),[_]);var M=(0,e.useRef)([]),R=function(){M.current.push(window.setTimeout((function(){var e,t,n,r;(null===(e=x.current)||void 0===e?void 0:e.input)&&"password"===(null===(t=x.current)||void 0===t?void 0:t.input.getAttribute("type"))&&(null===(n=x.current)||void 0===n?void 0:n.input.hasAttribute("value"))&&(null===(r=x.current)||void 0===r||r.input.removeAttribute("value"))})))};(0,e.useEffect)((function(){return R(),function(){return M.current.forEach((function(e){return window.clearTimeout(e)}))}}),[]);var A,F=(P||m)&&e.createElement(e.Fragment,null,m,P&&Nu(E,N)),j=Gc(t)||P;return"object"===Z(h)&&(null==h?void 0:h.clearIcon)?A=h:h&&(A={clearIcon:e.createElement(vu,null)}),e.createElement(pu,r({ref:vt(n,x),prefixCls:E,autoComplete:null==w?void 0:w.autoComplete},v,{onBlur:function(e){R(),null==d||d(e)},onFocus:function(e){R(),null==p||p(e)},suffix:F,allowClear:A,inputClassName:G()(!j&&(a={},D(a,"".concat(E,"-sm"),"small"===C),D(a,"".concat(E,"-lg"),"large"===C),D(a,"".concat(E,"-rtl"),"rtl"===b),D(a,"".concat(E,"-borderless"),!c),a),!j&&_u(E,N)),affixWrapperClassName:G()((o={},D(o,"".concat(E,"-affix-wrapper-sm"),"small"===C),D(o,"".concat(E,"-affix-wrapper-lg"),"large"===C),D(o,"".concat(E,"-affix-wrapper-rtl"),"rtl"===b),D(o,"".concat(E,"-affix-wrapper-borderless"),!c),o),_u("".concat(E,"-affix-wrapper"),N,P)),wrapperClassName:G()(D({},"".concat(E,"-group-rtl"),"rtl"===b)),groupClassName:G()((i={},D(i,"".concat(E,"-group-wrapper-sm"),"small"===C),D(i,"".concat(E,"-group-wrapper-lg"),"large"===C),D(i,"".concat(E,"-group-wrapper-rtl"),"rtl"===b),i),_u("".concat(E,"-group-wrapper"),N,P))}))}));const Jc=Zc,es={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M909.6 854.5L649.9 594.8C690.2 542.7 712 479 712 412c0-80.2-31.3-155.4-87.9-212.1-56.6-56.7-132-87.9-212.1-87.9s-155.5 31.3-212.1 87.9C143.2 256.5 112 331.8 112 412c0 80.1 31.3 155.5 87.9 212.1C256.5 680.8 331.8 712 412 712c67 0 130.6-21.8 182.7-62l259.7 259.6a8.2 8.2 0 0011.6 0l43.6-43.5a8.2 8.2 0 000-11.6zM570.4 570.4C528 612.7 471.8 636 412 636s-116-23.3-158.4-65.6C211.3 528 188 471.8 188 412s23.3-116.1 65.6-158.4C296 211.3 352.2 188 412 188s116.1 23.2 158.4 65.6S636 352.2 636 412s-23.3 116.1-65.6 158.4z"}}]},name:"search",theme:"outlined"};var ts=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:es}))};ts.displayName="SearchOutlined";const ns=e.forwardRef(ts);var rs=tt((function e(t){Je(this,e),this.error=new Error("unreachable case: ".concat(JSON.stringify(t)))}));var as,os=0,is={};function ls(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=os++,r=t;function a(){(r-=1)<=0?(e(),delete is[n]):is[n]=an(a)}return is[n]=an(a),n}function us(e){return!e||null===e.offsetParent||e.hidden}function cs(e){var t=(e||"").match(/rgba?\((\d*), (\d*), (\d*)(, [\d.]*)?\)/);return!(t&&t[1]&&t[2]&&t[3]&&t[1]===t[2]&&t[2]===t[3])}ls.cancel=function(e){void 0!==e&&(an.cancel(is[e]),delete is[e])},ls.ids=is;var ss=function(t){rt(r,t);var n=lt(r);function r(){var t;return Je(this,r),(t=n.apply(this,arguments)).containerRef=e.createRef(),t.animationStart=!1,t.destroyed=!1,t.onClick=function(e,n){var r,a,o=t.props,i=o.insertExtraNode;if(!(o.disabled||!e||us(e)||e.className.indexOf("-leave")>=0)){t.extraNode=document.createElement("div");var l=ot(t).extraNode,u=t.context.getPrefixCls;l.className="".concat(u(""),"-click-animating-node");var c=t.getAttributeName();if(e.setAttribute(c,"true"),n&&"#ffffff"!==n&&"rgb(255, 255, 255)"!==n&&cs(n)&&!/rgba\((?:\d*, ){3}0\)/.test(n)&&"transparent"!==n){l.style.borderColor=n;var s=(null===(r=e.getRootNode)||void 0===r?void 0:r.call(e))||e.ownerDocument,f=s instanceof Document?s.body:null!==(a=s.firstChild)&&void 0!==a?a:s;as=Ae("\n      [".concat(u(""),"-click-animating-without-extra-node='true']::after, .").concat(u(""),"-click-animating-node {\n        --antd-wave-shadow-color: ").concat(n,";\n      }"),"antd-wave",{csp:t.csp,attachTo:f})}i&&e.appendChild(l),["transition","animation"].forEach((function(n){e.addEventListener("".concat(n,"start"),t.onTransitionStart),e.addEventListener("".concat(n,"end"),t.onTransitionEnd)}))}},t.onTransitionStart=function(e){if(!t.destroyed){var n=t.containerRef.current;e&&e.target===n&&!t.animationStart&&t.resetEffect(n)}},t.onTransitionEnd=function(e){e&&"fadeEffect"===e.animationName&&t.resetEffect(e.target)},t.bindAnimationEvent=function(e){if(e&&e.getAttribute&&!e.getAttribute("disabled")&&!(e.className.indexOf("disabled")>=0)){var n=function(n){if("INPUT"!==n.target.tagName&&!us(n.target)){t.resetEffect(e);var r=getComputedStyle(e).getPropertyValue("border-top-color")||getComputedStyle(e).getPropertyValue("border-color")||getComputedStyle(e).getPropertyValue("background-color");t.clickWaveTimeoutId=window.setTimeout((function(){return t.onClick(e,r)}),0),ls.cancel(t.animationStartId),t.animationStart=!0,t.animationStartId=ls((function(){t.animationStart=!1}),10)}};return e.addEventListener("click",n,!0),{cancel:function(){e.removeEventListener("click",n,!0)}}}},t.renderWave=function(n){var r=n.csp,a=t.props.children;if(t.csp=r,!e.isValidElement(a))return a;var o=t.containerRef;return gt(a)&&(o=vt(a.ref,t.containerRef)),mi(a,{ref:o})},t}return tt(r,[{key:"componentDidMount",value:function(){var e=this.containerRef.current;e&&1===e.nodeType&&(this.instance=this.bindAnimationEvent(e))}},{key:"componentWillUnmount",value:function(){this.instance&&this.instance.cancel(),this.clickWaveTimeoutId&&clearTimeout(this.clickWaveTimeoutId),this.destroyed=!0}},{key:"getAttributeName",value:function(){var e=this.context.getPrefixCls,t=this.props.insertExtraNode;return"".concat(e(""),t?"-click-animating":"-click-animating-without-extra-node")}},{key:"resetEffect",value:function(e){var t=this;if(e&&e!==this.extraNode&&e instanceof Element){var n=this.props.insertExtraNode,r=this.getAttributeName();e.setAttribute(r,"false"),as&&(as.innerHTML=""),n&&this.extraNode&&e.contains(this.extraNode)&&e.removeChild(this.extraNode),["transition","animation"].forEach((function(n){e.removeEventListener("".concat(n,"start"),t.onTransitionStart),e.removeEventListener("".concat(n,"end"),t.onTransitionEnd)}))}}},{key:"render",value:function(){return e.createElement(Di,null,this.renderWave)}}]),r}(e.Component);ss.contextType=zi;var fs=function(){return{width:0,opacity:0,transform:"scale(0)"}},ds=function(e){return{width:e.scrollWidth,opacity:1,transform:"scale(1)"}};const ps=function(t){var n=t.prefixCls,r=!!t.loading;return t.existIcon?e.createElement("span",{className:"".concat(n,"-loading-icon")},e.createElement(Ou,null)):e.createElement(Kr,{visible:r,motionName:"".concat(n,"-loading-icon-motion"),removeOnLeave:!0,onAppearStart:fs,onAppearActive:ds,onEnterStart:fs,onEnterActive:ds,onLeaveStart:ds,onLeaveActive:fs},(function(t,r){var a=t.className,o=t.style;return e.createElement("span",{className:"".concat(n,"-loading-icon"),style:o,ref:r},e.createElement(Ou,{className:a}))}))};var ms=/^[\u4e00-\u9fa5]{2}$/,hs=ms.test.bind(ms);function vs(e){return"text"===e||"link"===e}Vi("default","primary","ghost","dashed","link","text"),Vi("default","circle","round"),Vi("submit","button","reset");var gs=function(t,n){var a,o=t.loading,i=void 0!==o&&o,l=t.prefixCls,u=t.type,c=void 0===u?"default":u,s=t.danger,f=t.shape,d=void 0===f?"default":f,p=t.size,m=t.className,h=t.children,v=t.icon,g=t.ghost,y=void 0!==g&&g,b=t.block,w=void 0!==b&&b,E=t.htmlType,x=void 0===E?"button":E,k=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["loading","prefixCls","type","danger","shape","size","className","children","icon","ghost","block","htmlType"]),C=e.useContext(gu),S=K(e.useState(!!i),2),O=S[0],P=S[1],N=K(e.useState(!1),2),_=N[0],T=N[1],M=e.useContext(zi),R=M.getPrefixCls,A=M.autoInsertSpaceInButton,F=M.direction,j=n||e.createRef(),L=function(){return 1===e.Children.count(h)&&!v&&!vs(c)},I="object"===Z(i)&&i.delay?i.delay||!0:!!i;e.useEffect((function(){var e=null;return"number"==typeof I?e=window.setTimeout((function(){e=null,P(I)}),I):P(I),function(){e&&(window.clearTimeout(e),e=null)}}),[I]),e.useEffect((function(){if(j&&j.current&&!1!==A){var e=j.current.textContent;L()&&hs(e)?_||T(!0):_&&T(!1)}}),[j]);var z=function(e){var n=t.onClick,r=t.disabled;O||r?e.preventDefault():null==n||n(e)};yl(!("string"==typeof v&&v.length>2),"Button","`icon` is using ReactNode instead of string naming in v4. Please check `".concat(v,"` at https://ant.design/components/icon")),yl(!(y&&vs(c)),"Button","`link` or `text` button can't be a `ghost` button.");var V=R("btn",l),H=!1!==A,U=p||C,B=U&&{large:"lg",small:"sm",middle:void 0}[U]||"",W=O?"loading":v,$=G()(V,(D(a={},"".concat(V,"-").concat(d),"default"!==d&&d),D(a,"".concat(V,"-").concat(c),c),D(a,"".concat(V,"-").concat(B),B),D(a,"".concat(V,"-icon-only"),!h&&0!==h&&!!W),D(a,"".concat(V,"-background-ghost"),y&&!vs(c)),D(a,"".concat(V,"-loading"),O),D(a,"".concat(V,"-two-chinese-chars"),_&&H),D(a,"".concat(V,"-block"),w),D(a,"".concat(V,"-dangerous"),!!s),D(a,"".concat(V,"-rtl"),"rtl"===F),a),m),q=v&&!O?v:e.createElement(ps,{existIcon:!!v,prefixCls:V,loading:!!O}),Y=h||0===h?function(t,n){var r=!1,a=[];return e.Children.forEach(t,(function(e){var t=Z(e),n="string"===t||"number"===t;if(r&&n){var o=a.length-1,i=a[o];a[o]="".concat(i).concat(e)}else a.push(e);r=n})),e.Children.map(a,(function(t){return function(t,n){if(null!=t){var r,a=n?" ":"";return"string"!=typeof t&&"number"!=typeof t&&"string"==typeof t.type&&hs(t.props.children)?mi(t,{children:t.props.children.split("").join(a)}):"string"==typeof t?hs(t)?e.createElement("span",null,t.split("").join(a)):e.createElement("span",null,t):(r=t,e.isValidElement(r)&&r.type===e.Fragment?e.createElement("span",null,t):t)}}(t,n)}))}(h,L()&&H):null,Q=xn(k,["navigate"]);if(void 0!==Q.href)return e.createElement("a",r({},Q,{className:$,onClick:z,ref:j}),q,Y);var X=e.createElement("button",r({},k,{type:x,className:$,onClick:z,ref:j}),q,Y);return vs(c)?X:e.createElement(ss,{disabled:!!O},X)},ys=e.forwardRef(gs);ys.displayName="Button",ys.Group=function(t){return e.createElement(Di,null,(function(n){var a,o=n.getPrefixCls,i=n.direction,l=t.prefixCls,u=t.size,c=t.className,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","size","className"]),f=o("btn-group",l),d="";switch(u){case"large":d="lg";break;case"small":d="sm";break;case"middle":case void 0:break;default:console.warn(new rs(u).error)}var p=G()(f,(D(a={},"".concat(f,"-").concat(d),d),D(a,"".concat(f,"-rtl"),"rtl"===i),a),c);return e.createElement("div",r({},s,{className:p}))}))},ys.__ANT_BUTTON=!0;const bs=ys;var ws=e.forwardRef((function(t,n){var a,o,i=t.prefixCls,l=t.inputPrefixCls,u=t.className,c=t.size,s=t.suffix,f=t.enterButton,d=void 0!==f&&f,p=t.addonAfter,m=t.loading,h=t.disabled,v=t.onSearch,g=t.onChange,y=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","inputPrefixCls","className","size","suffix","enterButton","addonAfter","loading","disabled","onSearch","onChange"]),b=e.useContext(zi),w=b.getPrefixCls,E=b.direction,x=e.useContext(gu),k=c||x,C=e.useRef(null),S=function(e){var t;document.activeElement===(null===(t=C.current)||void 0===t?void 0:t.input)&&e.preventDefault()},O=function(e){var t,n;v&&v(null===(n=null===(t=C.current)||void 0===t?void 0:t.input)||void 0===n?void 0:n.value,e)},P=w("input-search",i),N=w("input",l),_="boolean"==typeof d?e.createElement(ns,null):null,T="".concat(P,"-button"),M=d||{},R=M.type&&!0===M.type.__ANT_BUTTON;o=R||"button"===M.type?mi(M,r({onMouseDown:S,onClick:function(e){var t,n;null===(n=null===(t=null==M?void 0:M.props)||void 0===t?void 0:t.onClick)||void 0===n||n.call(t,e),O(e)},key:"enterButton"},R?{className:T,size:k}:{})):e.createElement(bs,{className:T,type:d?"primary":void 0,size:k,disabled:h,key:"enterButton",onMouseDown:S,onClick:O,loading:m,icon:_},d),p&&(o=[o,mi(p,{key:"addonAfter"})]);var A=G()(P,(D(a={},"".concat(P,"-rtl"),"rtl"===E),D(a,"".concat(P,"-").concat(k),!!k),D(a,"".concat(P,"-with-button"),!!d),a),u);return e.createElement(Jc,r({ref:vt(C,n),onPressEnter:O},y,{size:k,prefixCls:N,addonAfter:o,suffix:s,onChange:function(e){e&&e.target&&"click"===e.type&&v&&v(e.target.value,e),g&&g(e)},className:A,disabled:h}))}));ws.displayName="Search";const Es=ws;var xs,ks,Cs="\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n",Ss=["letter-spacing","line-height","padding-top","padding-bottom","font-family","font-weight","font-size","font-variant","text-rendering","text-transform","width","text-indent","padding-left","padding-right","border-width","box-sizing","word-break"],Os={};function Ps(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.getAttribute("id")||e.getAttribute("data-reactid")||e.getAttribute("name");if(t&&Os[n])return Os[n];var r=window.getComputedStyle(e),a=r.getPropertyValue("box-sizing")||r.getPropertyValue("-moz-box-sizing")||r.getPropertyValue("-webkit-box-sizing"),o=parseFloat(r.getPropertyValue("padding-bottom"))+parseFloat(r.getPropertyValue("padding-top")),i=parseFloat(r.getPropertyValue("border-bottom-width"))+parseFloat(r.getPropertyValue("border-top-width")),l=Ss.map((function(e){return"".concat(e,":").concat(r.getPropertyValue(e))})).join(";"),u={sizingStyle:l,paddingSize:o,borderSize:i,boxSizing:a};return t&&n&&(Os[n]=u),u}!function(e){e[e.NONE=0]="NONE",e[e.RESIZING=1]="RESIZING",e[e.RESIZED=2]="RESIZED"}(ks||(ks={}));var Ns=function(t){rt(a,t);var n=lt(a);function a(t){var o;return Je(this,a),(o=n.call(this,t)).nextFrameActionId=void 0,o.resizeFrameId=void 0,o.textArea=void 0,o.saveTextArea=function(e){o.textArea=e},o.handleResize=function(e){var t=o.state.resizeStatus,n=o.props,r=n.autoSize,a=n.onResize;t===ks.NONE&&("function"==typeof a&&a(e),r&&o.resizeOnNextFrame())},o.resizeOnNextFrame=function(){cancelAnimationFrame(o.nextFrameActionId),o.nextFrameActionId=requestAnimationFrame(o.resizeTextarea)},o.resizeTextarea=function(){var e=o.props.autoSize;if(e&&o.textArea){var t=e.minRows,n=e.maxRows,r=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;xs||((xs=document.createElement("textarea")).setAttribute("tab-index","-1"),xs.setAttribute("aria-hidden","true"),document.body.appendChild(xs)),e.getAttribute("wrap")?xs.setAttribute("wrap",e.getAttribute("wrap")):xs.removeAttribute("wrap");var a=Ps(e,t),o=a.paddingSize,i=a.borderSize,l=a.boxSizing,u=a.sizingStyle;xs.setAttribute("style","".concat(u,";").concat(Cs)),xs.value=e.value||e.placeholder||"";var c,s=Number.MIN_SAFE_INTEGER,f=Number.MAX_SAFE_INTEGER,d=xs.scrollHeight;if("border-box"===l?d+=i:"content-box"===l&&(d-=o),null!==n||null!==r){xs.value=" ";var p=xs.scrollHeight-o;null!==n&&(s=p*n,"border-box"===l&&(s=s+o+i),d=Math.max(s,d)),null!==r&&(f=p*r,"border-box"===l&&(f=f+o+i),c=d>f?"":"hidden",d=Math.min(f,d))}return{height:d,minHeight:s,maxHeight:f,overflowY:c,resize:"none"}}(o.textArea,!1,t,n);o.setState({textareaStyles:r,resizeStatus:ks.RESIZING},(function(){cancelAnimationFrame(o.resizeFrameId),o.resizeFrameId=requestAnimationFrame((function(){o.setState({resizeStatus:ks.RESIZED},(function(){o.resizeFrameId=requestAnimationFrame((function(){o.setState({resizeStatus:ks.NONE}),o.fixFirefoxAutoScroll()}))}))}))}))}},o.renderTextArea=function(){var t=o.props,n=t.prefixCls,a=void 0===n?"rc-textarea":n,i=t.autoSize,l=t.onResize,u=t.className,c=t.disabled,s=o.state,f=s.textareaStyles,d=s.resizeStatus,p=xn(o.props,["prefixCls","onPressEnter","autoSize","defaultValue","onResize"]),m=G()(a,u,D({},"".concat(a,"-disabled"),c));"value"in p&&(p.value=p.value||"");var h=H(H(H({},o.props.style),f),d===ks.RESIZING?{overflowX:"hidden",overflowY:"hidden"}:null);return e.createElement(qt,{onResize:o.handleResize,disabled:!(i||l)},e.createElement("textarea",r({},p,{className:m,style:h,ref:o.saveTextArea})))},o.state={textareaStyles:{},resizeStatus:ks.NONE},o}return tt(a,[{key:"componentDidUpdate",value:function(e){e.value===this.props.value&&ft()(e.autoSize,this.props.autoSize)||this.resizeTextarea()}},{key:"componentWillUnmount",value:function(){cancelAnimationFrame(this.nextFrameActionId),cancelAnimationFrame(this.resizeFrameId)}},{key:"fixFirefoxAutoScroll",value:function(){try{if(document.activeElement===this.textArea){var e=this.textArea.selectionStart,t=this.textArea.selectionEnd;this.textArea.setSelectionRange(e,t)}}catch(e){}}},{key:"render",value:function(){return this.renderTextArea()}}]),a}(e.Component);const _s=Ns,Ts=function(t){rt(a,t);var n=lt(a);function a(e){var t;Je(this,a),(t=n.call(this,e)).resizableTextArea=void 0,t.focus=function(){t.resizableTextArea.textArea.focus()},t.saveTextArea=function(e){t.resizableTextArea=e},t.handleChange=function(e){var n=t.props.onChange;t.setValue(e.target.value,(function(){t.resizableTextArea.resizeTextarea()})),n&&n(e)},t.handleKeyDown=function(e){var n=t.props,r=n.onPressEnter,a=n.onKeyDown;13===e.keyCode&&r&&r(e),a&&a(e)};var r=void 0===e.value||null===e.value?e.defaultValue:e.value;return t.state={value:r},t}return tt(a,[{key:"setValue",value:function(e,t){"value"in this.props||this.setState({value:e},t)}},{key:"blur",value:function(){this.resizableTextArea.textArea.blur()}},{key:"render",value:function(){return e.createElement(_s,r({},this.props,{value:this.state.value,onKeyDown:this.handleKeyDown,onChange:this.handleChange,ref:this.saveTextArea}))}}],[{key:"getDerivedStateFromProps",value:function(e){return"value"in e?{value:e.value}:null}}]),a}(e.Component);var Ms=Vi("text","input"),Rs=function(t){rt(r,t);var n=lt(r);function r(){return Je(this,r),n.apply(this,arguments)}return tt(r,[{key:"renderClearIcon",value:function(t){var n,r=this.props,a=r.value,o=r.disabled,i=r.readOnly,l=r.handleReset,u=r.suffix,c=!o&&!i&&a,s="".concat(t,"-clear-icon");return e.createElement(vu,{onClick:l,onMouseDown:function(e){return e.preventDefault()},className:G()((n={},D(n,"".concat(s,"-hidden"),!c),D(n,"".concat(s,"-has-suffix"),!!u),n),s),role:"button"})}},{key:"renderTextAreaWithClearIcon",value:function(t,n,r){var a,o=this.props,i=o.value,l=o.allowClear,u=o.className,c=o.style,s=o.direction,f=o.bordered,d=o.hidden,p=o.status,m=r.status,h=r.hasFeedback;if(!l)return mi(n,{value:i});var v,g=G()("".concat(t,"-affix-wrapper"),"".concat(t,"-affix-wrapper-textarea-with-clear-btn"),_u("".concat(t,"-affix-wrapper"),Tu(m,p),h),(D(a={},"".concat(t,"-affix-wrapper-rtl"),"rtl"===s),D(a,"".concat(t,"-affix-wrapper-borderless"),!f),D(a,"".concat(u),!((v=this.props).addonBefore||v.addonAfter)&&u),a));return e.createElement("span",{className:g,style:c,hidden:d},mi(n,{style:null,value:i}),this.renderClearIcon(t))}},{key:"render",value:function(){var t=this;return e.createElement(Qc.Consumer,null,(function(e){var n=t.props,r=n.prefixCls,a=n.inputType,o=n.element;if(a===Ms[0])return t.renderTextAreaWithClearIcon(r,o,e)}))}}]),r}(e.Component);const As=Rs;function Fs(e,t){return ct(e||"").slice(0,t).join("")}function js(e,t,n,r){var a=n;return e?a=Fs(n,r):ct(t||"").length<n.length&&ct(n||"").length>r&&(a=t),a}var Ls=e.forwardRef((function(t,n){var a,o=t.prefixCls,i=t.bordered,l=void 0===i||i,u=t.showCount,c=void 0!==u&&u,s=t.maxLength,f=t.className,d=t.style,p=t.size,m=t.onCompositionStart,h=t.onCompositionEnd,v=t.onChange,g=t.status,y=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","bordered","showCount","maxLength","className","style","size","onCompositionStart","onCompositionEnd","onChange","status"]),b=e.useContext(zi),w=b.getPrefixCls,E=b.direction,x=e.useContext(gu),k=e.useContext(Qc),C=k.status,S=k.hasFeedback,O=Tu(C,g),P=e.useRef(null),N=e.useRef(null),_=K(e.useState(!1),2),T=_[0],M=_[1],R=e.useRef(),A=e.useRef(0),F=K(dt(y.defaultValue,{value:y.value}),2),j=F[0],L=F[1],I=y.hidden,z=function(e,t){void 0===y.value&&(L(e),null==t||t())},V=Number(s)>0,H=w("input",o);e.useImperativeHandle(n,(function(){var e;return{resizableTextArea:null===(e=P.current)||void 0===e?void 0:e.resizableTextArea,focus:function(e){var t,n;!function(e,t){if(e){e.focus(t);var n=(t||{}).cursor;if(n){var r=e.value.length;switch(n){case"start":e.setSelectionRange(0,0);break;case"end":e.setSelectionRange(r,r);break;default:e.setSelectionRange(0,r)}}}}(null===(n=null===(t=P.current)||void 0===t?void 0:t.resizableTextArea)||void 0===n?void 0:n.textArea,e)},blur:function(){var e;return null===(e=P.current)||void 0===e?void 0:e.blur()}}}));var U=e.createElement(Ts,r({},xn(y,["allowClear"]),{className:G()((a={},D(a,"".concat(H,"-borderless"),!l),D(a,f,f&&!c),D(a,"".concat(H,"-sm"),"small"===x||"small"===p),D(a,"".concat(H,"-lg"),"large"===x||"large"===p),a),_u(H,O)),style:c?void 0:d,prefixCls:H,onCompositionStart:function(e){M(!0),R.current=j,A.current=e.currentTarget.selectionStart,null==m||m(e)},onChange:function(e){var t=e.target.value;!T&&V&&(t=js(e.target.selectionStart>=s+1||e.target.selectionStart===t.length||!e.target.selectionStart,j,t,s)),z(t),Xc(e.currentTarget,e,v,t)},onCompositionEnd:function(e){var t;M(!1);var n=e.currentTarget.value;V&&(n=js(A.current>=s+1||A.current===(null===(t=R.current)||void 0===t?void 0:t.length),R.current,n,s)),n!==j&&(z(n),Xc(e.currentTarget,e,v,n)),null==h||h(e)},ref:P})),B=function(e){return null==e?"":String(e)}(j);T||!V||null!==y.value&&void 0!==y.value||(B=Fs(B,s));var W=e.createElement(As,r({},y,{prefixCls:H,direction:E,inputType:"text",value:B,element:U,handleReset:function(e){var t,n;z("",(function(){var e;null===(e=P.current)||void 0===e||e.focus()})),Xc(null===(n=null===(t=P.current)||void 0===t?void 0:t.resizableTextArea)||void 0===n?void 0:n.textArea,e,v)},ref:N,bordered:l,status:g,style:c?void 0:d}));if(c||S){var $,q,Y=ct(B).length;return q="object"===Z(c)?c.formatter({count:Y,maxLength:s}):"".concat(Y).concat(V?" / ".concat(s):""),e.createElement("div",{hidden:I,className:G()("".concat(H,"-textarea"),($={},D($,"".concat(H,"-textarea-rtl"),"rtl"===E),D($,"".concat(H,"-textarea-show-count"),c),$),_u("".concat(H,"-textarea"),O,S),f),style:d,"data-count":q},W,S&&Nu(H,O))}return W}));const Is=Ls,zs={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258c161.3 0 279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766zm-4-430c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z"}}]},name:"eye",theme:"outlined"};var Ds=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:zs}))};Ds.displayName="EyeOutlined";const Vs=e.forwardRef(Ds),Hs={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M942.2 486.2Q889.47 375.11 816.7 305l-50.88 50.88C807.31 395.53 843.45 447.4 874.7 512 791.5 684.2 673.4 766 512 766q-72.67 0-133.87-22.38L323 798.75Q408 838 512 838q288.3 0 430.2-300.3a60.29 60.29 0 000-51.5zm-63.57-320.64L836 122.88a8 8 0 00-11.32 0L715.31 232.2Q624.86 186 512 186q-288.3 0-430.2 300.3a60.3 60.3 0 000 51.5q56.69 119.4 136.5 191.41L112.48 835a8 8 0 000 11.31L155.17 889a8 8 0 0011.31 0l712.15-712.12a8 8 0 000-11.32zM149.3 512C232.6 339.8 350.7 258 512 258c54.54 0 104.13 9.36 149.12 28.39l-70.3 70.3a176 176 0 00-238.13 238.13l-83.42 83.42C223.1 637.49 183.3 582.28 149.3 512zm246.7 0a112.11 112.11 0 01146.2-106.69L401.31 546.2A112 112 0 01396 512z"}},{tag:"path",attrs:{d:"M508 624c-3.46 0-6.87-.16-10.25-.47l-52.82 52.82a176.09 176.09 0 00227.42-227.42l-52.82 52.82c.31 3.38.47 6.79.47 10.25a111.94 111.94 0 01-112 112z"}}]},name:"eye-invisible",theme:"outlined"};var Us=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Hs}))};Us.displayName="EyeInvisibleOutlined";const Bs=e.forwardRef(Us);var Ws={click:"onClick",hover:"onMouseOver"},$s=e.forwardRef((function(t,n){var a=K((0,e.useState)(!1),2),o=a[0],i=a[1],l=function(){t.disabled||i(!o)},u=function(a){var i=a.getPrefixCls,u=t.className,c=t.prefixCls,s=t.inputPrefixCls,f=t.size,d=t.visibilityToggle,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["className","prefixCls","inputPrefixCls","size","visibilityToggle"]),m=i("input",s),h=i("input-password",c),v=d&&function(n){var r,a=t.action,i=t.iconRender,u=Ws[a]||"",c=(void 0===i?function(){return null}:i)(o),s=(D(r={},u,l),D(r,"className","".concat(n,"-icon")),D(r,"key","passwordIcon"),D(r,"onMouseDown",(function(e){e.preventDefault()})),D(r,"onMouseUp",(function(e){e.preventDefault()})),r);return e.cloneElement(e.isValidElement(c)?c:e.createElement("span",null,c),s)}(h),g=G()(h,u,D({},"".concat(h,"-").concat(f),!!f)),y=r(r({},xn(p,["suffix","iconRender"])),{type:o?"text":"password",className:g,prefixCls:m,suffix:v});return f&&(y.size=f),e.createElement(Jc,r({ref:n},y))};return e.createElement(Di,null,u)}));$s.defaultProps={action:"click",visibilityToggle:!0,iconRender:function(t){return t?e.createElement(Vs,null):e.createElement(Bs,null)}},$s.displayName="Password";const qs=$s;var Ks=Jc;Ks.Group=function(t){var n,r=(0,e.useContext)(zi),a=r.getPrefixCls,o=r.direction,i=t.prefixCls,l=t.className,u=void 0===l?"":l,c=a("input-group",i),s=G()(c,(D(n={},"".concat(c,"-lg"),"large"===t.size),D(n,"".concat(c,"-sm"),"small"===t.size),D(n,"".concat(c,"-compact"),t.compact),D(n,"".concat(c,"-rtl"),"rtl"===o),n),u);return e.createElement("span",{className:s,style:t.style,onMouseEnter:t.onMouseEnter,onMouseLeave:t.onMouseLeave,onFocus:t.onFocus,onBlur:t.onBlur},t.children)},Ks.Search=Es,Ks.TextArea=Is,Ks.Password=qs;const Ys=Ks;function Qs(){var t=Yl(Zl),n=t[0],r=t[1],a=Yl(Xl),o=a[0],i=a[1],l=Yl(Jl),u=l[0],c=l[1],s=Yl(Ql),f=s[0],d=s[1];return e.createElement(Ys,{value:n,onChange:function(e){var t=e.target.value,n=u.slice(0),a=t.toLowerCase();if(a.split("").forEach((function(e,t){e!==o.charAt(t)?n[t]=tu.wrong:n[t]=[tu.wrong,tu.fixed].includes(u[t])?tu.fixed:tu.correct})),a===o){var l=ru()();return i(l),c(au(l.length)),r(""),void d(f+1)}c(n),r(t)}})}function Gs(){return e.createElement("div",{className:"basicTypeGame--yZgov"},e.createElement("div",{className:"paper--zD401"},e.createElement(eu,null),e.createElement("div",{className:"centerBorder--L3Uq8"},e.createElement(ou,null),e.createElement(Qs,null))))}var Xs=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Zs=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Xs(n,t),n.prototype.render=function(){return e.createElement("div",null,e.createElement(Gs,null))},n}(e.Component),Js={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 00-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4A106.62 106.62 0 00471 99.9c-52 0-98 35-111.8 85.1l-85.9 311h-.3v428h472.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-.2-12.6-2-25.1-5.6-37.1zM112 528v364c0 17.7 14.3 32 32 32h65V496h-65c-17.7 0-32 14.3-32 32z"}}]},name:"like",theme:"filled"};var ef=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Js}))};ef.displayName="LikeFilled";const tf=e.forwardRef(ef);var nf=function(t,n){var a=t.prefixCls,o=t.component,i=void 0===o?"article":o,l=t.className,u=t["aria-label"],c=t.setContentRef,s=t.children,f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","component","className","aria-label","setContentRef","children"]),d=n;return c&&(yl(!1,"Typography","`setContentRef` is deprecated. Please use `ref` instead."),d=vt(n,c)),e.createElement(Di,null,(function(t){var n=t.getPrefixCls,o=t.direction,c=i,p=n("typography",a),m=G()(p,D({},"".concat(p,"-rtl"),"rtl"===o),l);return e.createElement(c,r({className:m,"aria-label":u,ref:d},f),s)}))},rf=e.forwardRef(nf);rf.displayName="Typography";const af=rf;var of=n(640),lf=n.n(of);const uf={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z"}}]},name:"edit",theme:"outlined"};var cf=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:uf}))};cf.displayName="EditOutlined";const sf=e.forwardRef(cf),ff={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z"}}]},name:"check",theme:"outlined"};var df=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:ff}))};df.displayName="CheckOutlined";const pf=e.forwardRef(df),mf={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"}}]},name:"copy",theme:"outlined"};var hf=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:mf}))};hf.displayName="CopyOutlined";const vf=e.forwardRef(hf);var gf={border:0,background:"transparent",padding:0,lineHeight:"inherit",display:"inline-block"},yf=e.forwardRef((function(t,n){var a=t.style,o=t.noStyle,i=t.disabled,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["style","noStyle","disabled"]),u={};return o||(u=r({},gf)),i&&(u.pointerEvents="none"),u=r(r({},u),a),e.createElement("div",r({role:"button",tabIndex:0,ref:n},l,{onKeyDown:function(e){e.keyCode===En.ENTER&&e.preventDefault()},onKeyUp:function(e){var n=e.keyCode,r=t.onClick;n===En.ENTER&&r&&r()},style:u}))}));const bf=yf;var wf=function(e){if(Oe()&&window.document.documentElement){var t=Array.isArray(e)?e:[e],n=window.document.documentElement;return t.some((function(e){return e in n.style}))}return!1};function Ef(e,t){return Array.isArray(e)||void 0===t?wf(e):function(e,t){if(!wf(e))return!1;var n=document.createElement("div"),r=n.style[e];return n.style[e]=t,n.style[e]!==r}(e,t)}const xf={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M864 170h-60c-4.4 0-8 3.6-8 8v518H310v-73c0-6.7-7.8-10.5-13-6.3l-141.9 112a8 8 0 000 12.6l141.9 112c5.3 4.2 13 .4 13-6.3v-75h498c35.3 0 64-28.7 64-64V178c0-4.4-3.6-8-8-8z"}}]},name:"enter",theme:"outlined"};var kf=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:xf}))};kf.displayName="EnterOutlined";const Cf=e.forwardRef(kf),Sf=function(t){var n=t.prefixCls,r=t["aria-label"],a=t.className,o=t.style,i=t.direction,l=t.maxLength,u=t.autoSize,c=void 0===u||u,s=t.value,f=t.onSave,d=t.onCancel,p=t.onEnd,m=t.component,h=t.enterIcon,v=void 0===h?e.createElement(Cf,null):h,g=e.useRef(),y=e.useRef(!1),b=e.useRef(),w=K(e.useState(s),2),E=w[0],x=w[1];e.useEffect((function(){x(s)}),[s]),e.useEffect((function(){if(g.current&&g.current.resizableTextArea){var e=g.current.resizableTextArea.textArea;e.focus();var t=e.value.length;e.setSelectionRange(t,t)}}),[]);var k=function(){f(E.trim())},C=m?"".concat(n,"-").concat(m):"",S=G()(n,"".concat(n,"-edit-content"),D({},"".concat(n,"-rtl"),"rtl"===i),a,C);return e.createElement("div",{className:S,style:o},e.createElement(Is,{ref:g,maxLength:l,value:E,onChange:function(e){var t=e.target;x(t.value.replace(/[\n\r]/g,""))},onKeyDown:function(e){var t=e.keyCode;y.current||(b.current=t)},onKeyUp:function(e){var t=e.keyCode,n=e.ctrlKey,r=e.altKey,a=e.metaKey,o=e.shiftKey;b.current!==t||y.current||n||r||a||o||(t===En.ENTER?(k(),null==p||p()):t===En.ESC&&d())},onCompositionStart:function(){y.current=!0},onCompositionEnd:function(){y.current=!1},onBlur:function(){k()},"aria-label":r,rows:1,autoSize:c}),null!==v?mi(v,{className:"".concat(n,"-edit-content-confirm")}):null)};function Of(t,n){return e.useMemo((function(){var e=!!t;return[e,r(r({},n),e&&"object"===Z(t)?t:null)]}),[t])}function Pf(e){var t=Z(e);return"string"===t||"number"===t}function Nf(e,t){for(var n=0,r=[],a=0;a<e.length;a+=1){if(n===t)return r;var o=e[a],i=n+(Pf(o)?String(o).length:1);if(i>t){var l=t-n;return r.push(String(o).slice(0,l)),r}r.push(o),n=i}return e}const _f=function(t){var n=t.enabledMeasure,a=t.children,o=t.text,i=t.width,l=t.rows,u=t.onEllipsis,c=K(e.useState([0,0,0]),2),s=c[0],f=c[1],d=K(e.useState(0),2),p=d[0],m=d[1],h=K(s,3),v=h[0],g=h[1],y=h[2],b=K(e.useState(0),2),w=b[0],E=b[1],x=e.useRef(null),k=e.useRef(null),C=e.useMemo((function(){return mt(o)}),[o]),S=e.useMemo((function(){return function(e){var t=0;return e.forEach((function(e){Pf(e)?t+=String(e).length:t+=1})),t}(C)}),[C]),O=e.useMemo((function(){return n&&3===p?a(Nf(C,g),g<S):a(C,!1)}),[n,p,a,C,g,S]);Kt((function(){n&&i&&S&&(m(1),f([0,Math.ceil(S/2),S]))}),[n,i,o,S,l]),Kt((function(){var e;1===p&&E((null===(e=x.current)||void 0===e?void 0:e.offsetHeight)||0)}),[p]),Kt((function(){var e,t;if(w)if(1===p)((null===(e=k.current)||void 0===e?void 0:e.offsetHeight)||0)<=l*w?(m(4),u(!1)):m(2);else if(2===p)if(v!==y){var n=(null===(t=k.current)||void 0===t?void 0:t.offsetHeight)||0,r=v,a=y;v===y-1?a=v:n<=l*w?r=g:a=g;var o=Math.ceil((r+a)/2);f([r,o,a])}else m(3),u(!0)}),[p,v,y,l,w]);var P,N,_={width:i,whiteSpace:"normal",margin:0,padding:0},T=function(t,n,a){return e.createElement("span",{"aria-hidden":!0,ref:n,style:r({position:"fixed",display:"block",left:0,top:0,zIndex:-9999,visibility:"hidden",pointerEvents:"none"},a)},t)};return e.createElement(e.Fragment,null,O,n&&3!==p&&4!==p&&e.createElement(e.Fragment,null,T("lg",x,{wordBreak:"keep-all",whiteSpace:"nowrap"}),1===p?T(a(C,!1),k,_):(P=k,N=Nf(C,g),T(a(N,!0),P,_))))},Tf=function(t){var n=t.title,r=t.enabledEllipsis,a=t.isEllipsis,o=t.children;return n&&r?e.createElement(Xi,{title:n,visible:!!a&&void 0},o):o};function Mf(e,t,n){return!0===e||void 0===e?t:e||n&&t}function Rf(e){return Array.isArray(e)?e:[e]}var Af=e.forwardRef((function(t,n){var a,o,i,l,u,c,s,f=t.prefixCls,d=t.className,p=t.style,m=t.type,h=t.disabled,v=t.children,g=t.ellipsis,y=t.editable,b=t.copyable,w=t.component,E=t.title,x=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","style","type","disabled","children","ellipsis","editable","copyable","component","title"]),k=e.useContext(zi),C=k.getPrefixCls,S=k.direction,O=(a="Text",i=e.useContext(Ti),l=e.useMemo((function(){var e=_i.Text,t=i?i.Text:{};return r(r({},"function"==typeof e?e():e),t||{})}),[a,o,i]),[l])[0],P=e.useRef(null),N=e.useRef(null),_=C("typography",f),T=xn(x,["mark","code","delete","underline","strong","keyboard","italic"]),M=K(Of(y),2),R=M[0],A=M[1],F=K(dt(!1,{value:A.editing}),2),j=F[0],L=F[1],I=A.triggerType,z=void 0===I?["icon"]:I,V=function(e){var t;e&&(null===(t=A.onStart)||void 0===t||t.call(A)),L(e)};u=function(){var e;j||null===(e=N.current)||void 0===e||e.focus()},c=[j],s=e.useRef(!1),e.useEffect((function(){s.current?u():s.current=!0}),c);var H=function(e){null==e||e.preventDefault(),V(!0)},U=K(Of(b),2),B=U[0],W=U[1],$=K(e.useState(!1),2),q=$[0],Y=$[1],Q=e.useRef(),X=function(){clearTimeout(Q.current)},J=function(e){var t;null==e||e.preventDefault(),null==e||e.stopPropagation(),lf()(W.text||String(v)||""),Y(!0),X(),Q.current=setTimeout((function(){Y(!1)}),3e3),null===(t=W.onCopy)||void 0===t||t.call(W)};e.useEffect((function(){return X}),[]);var ee=K(e.useState(!1),2),te=ee[0],ne=ee[1],re=K(e.useState(!1),2),ae=re[0],oe=re[1],ie=K(e.useState(!1),2),le=ie[0],ue=ie[1],ce=K(e.useState(!1),2),se=ce[0],fe=ce[1],de=K(e.useState(!1),2),pe=de[0],me=de[1],he=K(Of(g,{expandable:!1}),2),ve=he[0],ge=he[1],ye=ve&&!le,be=ge.rows,we=void 0===be?1:be,Ee=e.useMemo((function(){return!ye||void 0!==ge.suffix||ge.onEllipsis||ge.expandable||R||B}),[ye,ge,R,B]);Kt((function(){ve&&!Ee&&(ne(Ef("webkitLineClamp")),oe(Ef("textOverflow")))}),[Ee,ve]);var xe=e.useMemo((function(){return!Ee&&(1===we?ae:te)}),[Ee,ae,te]),ke=ye&&(xe?pe:se),Ce=ye&&1===we&&xe,Se=ye&&we>1&&xe,Oe=function(e){var t;ue(!0),null===(t=ge.onExpand)||void 0===t||t.call(ge,e)},Pe=K(e.useState(0),2),Ne=Pe[0],_e=Pe[1],Te=function(e){var t;fe(e),se!==e&&(null===(t=ge.onEllipsis)||void 0===t||t.call(ge,e))};e.useEffect((function(){var e=P.current;if(ve&&xe&&e){var t=Se?e.offsetHeight<e.scrollHeight:e.offsetWidth<e.scrollWidth;pe!==t&&me(t)}}),[ve,xe,v,Se]);var Me=!0===ge.tooltip?v:ge.tooltip,Re=e.useMemo((function(){var e=function(e){return["string","number"].includes(Z(e))};if(ve&&!xe)return e(v)?v:e(E)?E:e(Me)?Me:void 0}),[ve,xe,E,Me,ke]);if(j)return e.createElement(Sf,{value:"string"==typeof v?v:"",onSave:function(e){var t;null===(t=A.onChange)||void 0===t||t.call(A,e),V(!1)},onCancel:function(){var e;null===(e=A.onCancel)||void 0===e||e.call(A),V(!1)},onEnd:A.onEnd,prefixCls:_,className:d,style:p,direction:S,component:w,maxLength:A.maxLength,autoSize:A.autoSize,enterIcon:A.enterIcon});var Ae=function(){if(R){var t=A.icon,n=A.tooltip,r=mt(n)[0]||O.edit,a="string"==typeof r?r:"";return z.includes("icon")?e.createElement(Xi,{key:"edit",title:!1===n?"":r},e.createElement(bf,{ref:N,className:"".concat(_,"-edit"),onClick:H,"aria-label":a},t||e.createElement(sf,{role:"button"}))):null}},Fe=function(){if(B){var t=W.tooltips,n=W.icon,r=Rf(t),a=Rf(n),o=q?Mf(r[1],O.copied):Mf(r[0],O.copy),i=q?O.copied:O.copy,l="string"==typeof o?o:i;return e.createElement(Xi,{key:"copy",title:o},e.createElement(bf,{className:G()("".concat(_,"-copy"),q&&"".concat(_,"-copy-success")),onClick:J,"aria-label":l},q?Mf(a[1],e.createElement(pf,null),!0):Mf(a[0],e.createElement(vf,null),!0)))}};return e.createElement(qt,{onResize:function(e){var t=e.offsetWidth;_e(t)},disabled:!ye||xe},(function(a){var o;return e.createElement(Tf,{title:Me,enabledEllipsis:ye,isEllipsis:ke},e.createElement(af,r({className:G()((o={},D(o,"".concat(_,"-").concat(m),m),D(o,"".concat(_,"-disabled"),h),D(o,"".concat(_,"-ellipsis"),ve),D(o,"".concat(_,"-single-line"),ye&&1===we),D(o,"".concat(_,"-ellipsis-single-line"),Ce),D(o,"".concat(_,"-ellipsis-multiple-line"),Se),o),d),style:r(r({},p),{WebkitLineClamp:Se?we:void 0}),component:w,ref:vt(a,P,n),direction:S,onClick:z.includes("text")?H:null,"aria-label":Re,title:E},T),e.createElement(_f,{enabledMeasure:ye&&!xe,text:v,rows:we,width:Ne,onEllipsis:Te},(function(n,r){var a=n;n.length&&r&&Re&&(a=e.createElement("span",{key:"show-content","aria-hidden":!0},a));var o=function(t,n){var r=t.mark,a=t.code,o=t.underline,i=t.delete,l=t.strong,u=t.keyboard,c=t.italic,s=n;function f(t,n){t&&(s=e.createElement(n,{},s))}return f(l,"strong"),f(o,"u"),f(i,"del"),f(a,"code"),f(r,"mark"),f(u,"kbd"),f(c,"i"),s}(t,e.createElement(e.Fragment,null,a,function(t){return[t&&e.createElement("span",{"aria-hidden":!0,key:"ellipsis"},"..."),ge.suffix,(n=t,[n&&(a=ge.expandable,o=ge.symbol,a?(r=o||O.expand,e.createElement("a",{key:"expand",className:"".concat(_,"-expand"),onClick:Oe,"aria-label":O.expand},r)):null),Ae(),Fe()])];var n,r,a,o}(r)));return o}))))}))}));const Ff=Af;var jf=function(t,n){var a=t.ellipsis,o=t.rel,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["ellipsis","rel"]);yl("object"!==Z(a),"Typography.Link","`ellipsis` only supports boolean value.");var l=e.useRef(null);e.useImperativeHandle(n,(function(){return l.current}));var u=r(r({},i),{rel:void 0===o&&"_blank"===i.target?"noopener noreferrer":o});return delete u.navigate,e.createElement(Ff,r({},u,{ref:l,ellipsis:!!a,component:"a"}))};const Lf=e.forwardRef(jf);var If=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t}(1,2,3,4,5);var zf=af;zf.Text=function(t){var n=t.ellipsis,a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["ellipsis"]),o=e.useMemo((function(){return n&&"object"===Z(n)?xn(n,["expandable","rows"]):n}),[n]);return yl("object"!==Z(n)||!n||!("expandable"in n)&&!("rows"in n),"Typography.Text","`ellipsis` do not support `expandable` or `rows` props."),e.createElement(Ff,r({},a,{ellipsis:o,component:"span"}))},zf.Link=Lf,zf.Title=function(t){var n,a=t.level,o=void 0===a?1:a,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["level"]);return-1!==If.indexOf(o)?n="h".concat(o):(yl(!1,"Typography.Title","Title only accept `1 | 2 | 3 | 4 | 5` as `level` value. And `5` need 4.6.0+ version."),n="h1"),e.createElement(Ff,r({},i,{component:n}))},zf.Paragraph=function(t){return e.createElement(Ff,r({},t,{component:"div"}))};const Df=zf,Vf=(0,e.createContext)({});var Hf=["xxl","xl","lg","md","sm","xs"],Uf={xs:"(max-width: 575px)",sm:"(min-width: 576px)",md:"(min-width: 768px)",lg:"(min-width: 992px)",xl:"(min-width: 1200px)",xxl:"(min-width: 1600px)"},Bf=new Map,Wf=-1,$f={};const qf={matchHandlers:{},dispatch:function(e){return $f=e,Bf.forEach((function(e){return e($f)})),Bf.size>=1},subscribe:function(e){return Bf.size||this.register(),Wf+=1,Bf.set(Wf,e),e($f),Wf},unsubscribe:function(e){Bf.delete(e),Bf.size||this.unregister()},unregister:function(){var e=this;Object.keys(Uf).forEach((function(t){var n=Uf[t],r=e.matchHandlers[n];null==r||r.mql.removeListener(null==r?void 0:r.listener)})),Bf.clear()},register:function(){var e=this;Object.keys(Uf).forEach((function(t){var n=Uf[t],a=function(n){var a=n.matches;e.dispatch(r(r({},$f),D({},t,a)))},o=window.matchMedia(n);o.addListener(a),e.matchHandlers[n]={mql:o,listener:a},a(o)}))}};var Kf,Yf=(Vi("top","middle","bottom","stretch"),Vi("start","end","center","space-around","space-between"),e.forwardRef((function(t,n){var a,o=t.prefixCls,i=t.justify,l=t.align,u=t.className,c=t.style,s=t.children,f=t.gutter,d=void 0===f?0:f,p=t.wrap,m=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","justify","align","className","style","children","gutter","wrap"]),h=e.useContext(zi),v=h.getPrefixCls,g=h.direction,y=K(e.useState({xs:!0,sm:!0,md:!0,lg:!0,xl:!0,xxl:!0}),2),b=y[0],w=y[1],E=function(){var t=K(e.useState(!1),2),n=t[0],r=t[1];return e.useEffect((function(){r(function(){if(!Oe()||!window.document.documentElement)return!1;if(void 0!==Kf)return Kf;var e=document.createElement("div");return e.style.display="flex",e.style.flexDirection="column",e.style.rowGap="1px",e.appendChild(document.createElement("div")),e.appendChild(document.createElement("div")),document.body.appendChild(e),Kf=1===e.scrollHeight,document.body.removeChild(e),Kf}())}),[]),n}(),x=e.useRef(d);e.useEffect((function(){var e=qf.subscribe((function(e){var t=x.current||0;(!Array.isArray(t)&&"object"===Z(t)||Array.isArray(t)&&("object"===Z(t[0])||"object"===Z(t[1])))&&w(e)}));return function(){return qf.unsubscribe(e)}}),[]);var k,C=v("row",o),S=(k=[0,0],(Array.isArray(d)?d:[d,0]).forEach((function(e,t){if("object"===Z(e))for(var n=0;n<Hf.length;n++){var r=Hf[n];if(b[r]&&void 0!==e[r]){k[t]=e[r];break}}else k[t]=e||0})),k),O=G()(C,(D(a={},"".concat(C,"-no-wrap"),!1===p),D(a,"".concat(C,"-").concat(i),i),D(a,"".concat(C,"-").concat(l),l),D(a,"".concat(C,"-rtl"),"rtl"===g),a),u),P={},N=S[0]>0?S[0]/-2:void 0,_=S[1]>0?S[1]/-2:void 0;if(N&&(P.marginLeft=N,P.marginRight=N),E){var T=K(S,2);P.rowGap=T[1]}else _&&(P.marginTop=_,P.marginBottom=_);var M=K(S,2),R=M[0],A=M[1],F=e.useMemo((function(){return{gutter:[R,A],wrap:p,supportFlexGap:E}}),[R,A,p,E]);return e.createElement(Vf.Provider,{value:F},e.createElement("div",r({},m,{className:O,style:r(r({},P),c),ref:n}),s))})));Yf.displayName="Row";const Qf=Yf;const Gf=function(t){var n=t.prefixCls,a=t.className,o=t.hoverable,i=void 0===o||o,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","hoverable"]);return e.createElement(Di,null,(function(t){var o=(0,t.getPrefixCls)("card",n),u=G()("".concat(o,"-grid"),a,D({},"".concat(o,"-grid-hoverable"),i));return e.createElement("div",r({},l,{className:u}))}))};function Xf(t){var n=(0,e.useRef)(),r=(0,e.useRef)(!1);return(0,e.useEffect)((function(){return function(){r.current=!0,an.cancel(n.current)}}),[]),function(){for(var e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];r.current||(an.cancel(n.current),n.current=an((function(){t.apply(void 0,a)})))}}function Zf(t,n){var r,a=t.prefixCls,o=t.id,i=t.active,l=t.tab,u=l.key,c=l.tab,s=l.disabled,f=l.closeIcon,d=t.closable,p=t.renderWrapper,m=t.removeAriaLabel,h=t.editable,v=t.onClick,g=t.onRemove,y=t.onFocus,b=t.style,w="".concat(a,"-tab");e.useEffect((function(){return g}),[]);var E=h&&!1!==d&&!s;function x(e){s||v(e)}var k=e.createElement("div",{key:u,ref:n,className:G()(w,(r={},D(r,"".concat(w,"-with-remove"),E),D(r,"".concat(w,"-active"),i),D(r,"".concat(w,"-disabled"),s),r)),style:b,onClick:x},e.createElement("div",{role:"tab","aria-selected":i,id:o&&"".concat(o,"-tab-").concat(u),className:"".concat(w,"-btn"),"aria-controls":o&&"".concat(o,"-panel-").concat(u),"aria-disabled":s,tabIndex:s?null:0,onClick:function(e){e.stopPropagation(),x(e)},onKeyDown:function(e){[En.SPACE,En.ENTER].includes(e.which)&&(e.preventDefault(),x(e))},onFocus:y},c),E&&e.createElement("button",{type:"button","aria-label":m||"remove",tabIndex:0,className:"".concat(w,"-remove"),onClick:function(e){var t;e.stopPropagation(),(t=e).preventDefault(),t.stopPropagation(),h.onEdit("remove",{key:u,event:t})}},f||h.removeIcon||"Ã—"));return p?p(k):k}const Jf=e.forwardRef(Zf);var ed={width:0,height:0,left:0,top:0},td={width:0,height:0,left:0,top:0,right:0},nd={adjustX:1,adjustY:1},rd=[0,0];const ad={topLeft:{points:["bl","tl"],overflow:nd,offset:[0,-4],targetOffset:rd},topCenter:{points:["bc","tc"],overflow:nd,offset:[0,-4],targetOffset:rd},topRight:{points:["br","tr"],overflow:nd,offset:[0,-4],targetOffset:rd},bottomLeft:{points:["tl","bl"],overflow:nd,offset:[0,4],targetOffset:rd},bottomCenter:{points:["tc","bc"],overflow:nd,offset:[0,4],targetOffset:rd},bottomRight:{points:["tr","br"],overflow:nd,offset:[0,4],targetOffset:rd}};var od=En.ESC,id=En.TAB;function ld(t){var n=t.visible,r=t.setTriggerVisible,a=t.triggerRef,o=t.menuRef,i=t.menuClassName,l=t.onVisibleChange,u=function(e){switch(e.keyCode){case od:case id:n&&a.current&&(a.current.triggerRef.current&&a.current.triggerRef.current.focus(),r(!1),"function"==typeof l&&l(!1))}};return e.useEffect((function(){return n?(setTimeout((function(){!function(){if(o.current){var e,t,n,r=(null===(e=o.current.className)||void 0===e?void 0:e.includes(i))?o.current:null===(t=(n=o.current).querySelector)||void 0===t?void 0:t.call(n,i);r&&r.focus()}}(),window.addEventListener("keydown",u)}),100),function(){window.removeEventListener("keydown",u)}):function(){return null}}),[n]),{returnFocus:function(){n&&a.current&&a.current.triggerRef.current&&setTimeout((function(){var e,t,n;null===(e=a.current)||void 0===e||null===(t=e.triggerRef)||void 0===t||null===(n=t.current)||void 0===n||n.focus()}),100)}}}var ud=["arrow","prefixCls","transitionName","animation","align","placement","placements","getPopupContainer","showAction","hideAction","overlayClassName","overlayStyle","visible","trigger"];function cd(t,n){var r=t.arrow,a=void 0!==r&&r,o=t.prefixCls,i=void 0===o?"rc-dropdown":o,l=t.transitionName,u=t.animation,c=t.align,s=t.placement,f=void 0===s?"bottomLeft":s,d=t.placements,p=void 0===d?ad:d,m=t.getPopupContainer,h=t.showAction,v=t.hideAction,g=t.overlayClassName,y=t.overlayStyle,b=t.visible,w=t.trigger,E=void 0===w?["hover"]:w,x=Y(t,ud),k=K(e.useState(),2),C=k[0],S=k[1],O="visible"in t?b:C,P=e.useRef(null);e.useImperativeHandle(n,(function(){return P.current}));var N,_,T,M,R,A,F=e.useRef(null),j="".concat(i,"-menu"),L=ld({visible:O,setTriggerVisible:S,triggerRef:P,menuRef:F,menuClassName:j,onVisibleChange:t.onVisibleChange}).returnFocus,I=function(){var e=t.overlay;return"function"==typeof e?e():e},z=function(e){var n=t.onOverlayClick,r=I().props;S(!1),n&&n(e),r.onClick&&r.onClick(e),L()},V=function(){var t=I(),n={prefixCls:j,onClick:z,ref:gt(t)?F:void 0};return"string"==typeof t.type&&delete n.prefixCls,e.createElement(e.Fragment,null,a&&e.createElement("div",{className:"".concat(i,"-arrow")}),e.cloneElement(t,n))},U=v;return U||-1===E.indexOf("contextMenu")||(U=["click"]),e.createElement(wo,H(H({builtinPlacements:p},x),{},{prefixCls:i,ref:P,popupClassName:G()(g,D({},"".concat(i,"-show-arrow"),a)),popupStyle:y,action:E,showAction:h,hideAction:U||[],popupPlacement:f,popupAlign:c,popupTransitionName:l,popupAnimation:u,popupVisible:O,stretch:(R=t.minOverlayWidthMatchTrigger,A=t.alignPoint,("minOverlayWidthMatchTrigger"in t?R:!A)?"minWidth":""),popup:"function"==typeof t.overlay?V:V(),onPopupVisibleChange:function(e){var n=t.onVisibleChange;S(e),"function"==typeof n&&n(e)},getPopupContainer:m}),(T=(_=t.children).props?_.props:{},M=G()(T.className,void 0!==(N=t.openClassName)?N:"".concat(i,"-open")),O&&_?e.cloneElement(_,{className:M}):_))}const sd=e.forwardRef(cd);function fd(t,n){var r=t.prefixCls,a=t.editable,o=t.locale,i=t.style;return a&&!1!==a.showAdd?e.createElement("button",{ref:n,type:"button",className:"".concat(r,"-nav-add"),style:i,"aria-label":(null==o?void 0:o.addAriaLabel)||"Add tab",onClick:function(e){a.onEdit("add",{event:e})}},a.addIcon||"+"):null}const dd=e.forwardRef(fd);function pd(t,n){var r=t.prefixCls,a=t.id,o=t.tabs,i=t.locale,l=t.mobile,u=t.moreIcon,c=void 0===u?"More":u,s=t.moreTransitionName,f=t.style,d=t.className,p=t.editable,m=t.tabBarGutter,h=t.rtl,v=t.removeAriaLabel,g=t.onTabClick,y=K((0,e.useState)(!1),2),b=y[0],w=y[1],E=K((0,e.useState)(null),2),x=E[0],k=E[1],C="".concat(a,"-more-popup"),S="".concat(r,"-dropdown"),O=null!==x?"".concat(C,"-").concat(x):null,P=null==i?void 0:i.dropdownAriaLabel,N=e.createElement(ii,{onClick:function(e){var t=e.key,n=e.domEvent;g(t,n),w(!1)},id:C,tabIndex:-1,role:"listbox","aria-activedescendant":O,selectedKeys:[x],"aria-label":void 0!==P?P:"expanded dropdown"},o.map((function(t){var n=p&&!1!==t.closable&&!t.disabled;return e.createElement(qn,{key:t.key,id:"".concat(C,"-").concat(t.key),role:"option","aria-controls":a&&"".concat(a,"-panel-").concat(t.key),disabled:t.disabled},e.createElement("span",null,t.tab),n&&e.createElement("button",{type:"button","aria-label":v||"remove",tabIndex:0,className:"".concat(S,"-menu-item-remove"),onClick:function(e){var n,r;e.stopPropagation(),n=e,r=t.key,n.preventDefault(),n.stopPropagation(),p.onEdit("remove",{key:r,event:n})}},t.closeIcon||p.removeIcon||"Ã—"))})));function _(e){for(var t=o.filter((function(e){return!e.disabled})),n=t.findIndex((function(e){return e.key===x}))||0,r=t.length,a=0;a<r;a+=1){var i=t[n=(n+e+r)%r];if(!i.disabled)return void k(i.key)}}(0,e.useEffect)((function(){var e=document.getElementById(O);e&&e.scrollIntoView&&e.scrollIntoView(!1)}),[x]),(0,e.useEffect)((function(){b||k(null)}),[b]);var T=D({},h?"marginRight":"marginLeft",m);o.length||(T.visibility="hidden",T.order=1);var M=G()(D({},"".concat(S,"-rtl"),h)),R=l?null:e.createElement(sd,{prefixCls:S,overlay:N,trigger:["hover"],visible:b,transitionName:s,onVisibleChange:w,overlayClassName:M,mouseEnterDelay:.1,mouseLeaveDelay:.1},e.createElement("button",{type:"button",className:"".concat(r,"-nav-more"),style:T,tabIndex:-1,"aria-hidden":"true","aria-haspopup":"listbox","aria-controls":C,id:"".concat(a,"-more"),"aria-expanded":b,onKeyDown:function(e){var t=e.which;if(b)switch(t){case En.UP:_(-1),e.preventDefault();break;case En.DOWN:_(1),e.preventDefault();break;case En.ESC:w(!1);break;case En.SPACE:case En.ENTER:null!==x&&g(x,e)}else[En.DOWN,En.SPACE,En.ENTER].includes(t)&&(w(!0),e.preventDefault())}},c));return e.createElement("div",{className:G()("".concat(r,"-nav-operations"),d),style:f,ref:n},R,e.createElement(dd,{prefixCls:r,locale:i,editable:p}))}const md=e.memo(e.forwardRef(pd),(function(e,t){return t.tabMoving})),hd=(0,e.createContext)(null);var vd=Math.pow(.995,20);function gd(t,n){var r=e.useRef(t),a=K(e.useState({}),2)[1];return[r.current,function(e){var t="function"==typeof e?e(r.current):e;t!==r.current&&n(t,r.current),r.current=t,a({})}]}var yd=function(t){var n,r=t.position,a=t.prefixCls,o=t.extra;if(!o)return null;var i={};return o&&"object"===Z(o)&&!e.isValidElement(o)?i=o:i.right=o,"right"===r&&(n=i.right),"left"===r&&(n=i.left),n?e.createElement("div",{className:"".concat(a,"-extra-content")},n):null};function bd(t,n){var a,o,i,l,u,c,s,f=e.useContext(hd),d=f.prefixCls,p=f.tabs,m=t.className,h=t.style,v=t.id,g=t.animated,y=t.activeKey,b=t.rtl,w=t.extra,E=t.editable,x=t.locale,k=t.tabPosition,C=t.tabBarGutter,S=t.children,O=t.onTabClick,P=t.onTabScroll,N=(0,e.useRef)(),_=(0,e.useRef)(),T=(0,e.useRef)(),M=(0,e.useRef)(),R=K((o=(0,e.useRef)(new Map),[function(t){return o.current.has(t)||o.current.set(t,e.createRef()),o.current.get(t)},function(e){o.current.delete(e)}]),2),A=R[0],F=R[1],j="top"===k||"bottom"===k,L=K(gd(0,(function(e,t){j&&P&&P({direction:e>t?"left":"right"})})),2),I=L[0],z=L[1],V=K(gd(0,(function(e,t){!j&&P&&P({direction:e>t?"top":"bottom"})})),2),U=V[0],B=V[1],W=K((0,e.useState)(0),2),$=W[0],q=W[1],Y=K((0,e.useState)(0),2),Q=Y[0],X=Y[1],Z=K((0,e.useState)(null),2),J=Z[0],ee=Z[1],te=K((0,e.useState)(null),2),ne=te[0],re=te[1],ae=K((0,e.useState)(0),2),oe=ae[0],ie=ae[1],le=K((0,e.useState)(0),2),ue=le[0],ce=le[1],se=(i=new Map,l=(0,e.useRef)([]),u=K((0,e.useState)({}),2)[1],c=(0,e.useRef)("function"==typeof i?i():i),s=Xf((function(){var e=c.current;l.current.forEach((function(t){e=t(e)})),l.current=[],c.current=e,u({})})),[c.current,function(e){l.current.push(e),s()}]),fe=K(se,2),de=fe[0],pe=fe[1],me=function(t,n,r){return(0,e.useMemo)((function(){for(var e,r=new Map,a=n.get(null===(e=t[0])||void 0===e?void 0:e.key)||ed,o=a.left+a.width,i=0;i<t.length;i+=1){var l,u=t[i].key,c=n.get(u);c||(c=n.get(null===(l=t[i-1])||void 0===l?void 0:l.key)||ed);var s=r.get(u)||H({},c);s.right=o-s.left-s.width,r.set(u,s)}return r}),[t.map((function(e){return e.key})).join("_"),n,r])}(p,de,$),he="".concat(d,"-nav-operations-hidden"),ve=0,ge=0;function ye(e){return e<ve?ve:e>ge?ge:e}j?b?(ve=0,ge=Math.max(0,$-J)):(ve=Math.min(0,J-$),ge=0):(ve=Math.min(0,ne-Q),ge=0);var be=(0,e.useRef)(),we=K((0,e.useState)(),2),Ee=we[0],xe=we[1];function ke(){xe(Date.now())}function Ce(){window.clearTimeout(be.current)}function Se(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:y,t=me.get(e)||{width:0,height:0,left:0,right:0,top:0};if(j){var n=I;b?t.right<I?n=t.right:t.right+t.width>I+J&&(n=t.right+t.width-J):t.left<-I?n=-t.left:t.left+t.width>-I+J&&(n=-(t.left+t.width-J)),B(0),z(ye(n))}else{var r=U;t.top<-U?r=-t.top:t.top+t.height>-U+ne&&(r=-(t.top+t.height-ne)),z(0),B(ye(r))}}!function(t,n){var r=K((0,e.useState)(),2),a=r[0],o=r[1],i=K((0,e.useState)(0),2),l=i[0],u=i[1],c=K((0,e.useState)(0),2),s=c[0],f=c[1],d=K((0,e.useState)(),2),p=d[0],m=d[1],h=(0,e.useRef)(),v=(0,e.useRef)(),g=(0,e.useRef)(null);g.current={onTouchStart:function(e){var t=e.touches[0],n=t.screenX,r=t.screenY;o({x:n,y:r}),window.clearInterval(h.current)},onTouchMove:function(e){if(a){e.preventDefault();var t=e.touches[0],r=t.screenX,i=t.screenY;o({x:r,y:i});var c=r-a.x,s=i-a.y;n(c,s);var d=Date.now();u(d),f(d-l),m({x:c,y:s})}},onTouchEnd:function(){if(a&&(o(null),m(null),p)){var e=p.x/s,t=p.y/s,r=Math.abs(e),i=Math.abs(t);if(Math.max(r,i)<.1)return;var l=e,u=t;h.current=window.setInterval((function(){Math.abs(l)<.01&&Math.abs(u)<.01?window.clearInterval(h.current):n(20*(l*=vd),20*(u*=vd))}),20)}},onWheel:function(e){var t=e.deltaX,r=e.deltaY,a=0,o=Math.abs(t),i=Math.abs(r);o===i?a="x"===v.current?t:r:o>i?(a=t,v.current="x"):(a=r,v.current="y"),n(-a,-a)&&e.preventDefault()}},e.useEffect((function(){function e(e){g.current.onTouchMove(e)}function n(e){g.current.onTouchEnd(e)}return document.addEventListener("touchmove",e,{passive:!1}),document.addEventListener("touchend",n,{passive:!1}),t.current.addEventListener("touchstart",(function(e){g.current.onTouchStart(e)}),{passive:!1}),t.current.addEventListener("wheel",(function(e){g.current.onWheel(e)})),function(){document.removeEventListener("touchmove",e),document.removeEventListener("touchend",n)}}),[])}(N,(function(e,t){function n(e,t){e((function(e){return ye(e+t)}))}if(j){if(J>=$)return!1;n(z,e)}else{if(ne>=Q)return!1;n(B,t)}return Ce(),ke(),!0})),(0,e.useEffect)((function(){return Ce(),Ee&&(be.current=window.setTimeout((function(){xe(0)}),100)),Ce}),[Ee]);var Oe=function(t,n,r,a,o){var i,l,u,c=o.tabs,s=o.tabPosition,f=o.rtl;["top","bottom"].includes(s)?(i="width",l=f?"right":"left",u=Math.abs(n.left)):(i="height",l="top",u=-n.top);var d=n[i],p=r[i],m=a[i],h=d;return p+m>d&&p<d&&(h=d-m),(0,e.useMemo)((function(){if(!c.length)return[0,0];for(var e=c.length,n=e,r=0;r<e;r+=1){var a=t.get(c[r].key)||td;if(a[l]+a[i]>u+h){n=r-1;break}}for(var o=0,s=e-1;s>=0;s-=1)if((t.get(c[s].key)||td)[l]<u){o=s+1;break}return[o,n]}),[t,u,h,s,c.map((function(e){return e.key})).join("_"),f])}(me,{width:J,height:ne,left:I,top:U},{width:$,height:Q},{width:oe,height:ue},H(H({},t),{},{tabs:p})),Pe=K(Oe,2),Ne=Pe[0],_e=Pe[1],Te={};"top"===k||"bottom"===k?Te[b?"marginRight":"marginLeft"]=C:Te.marginTop=C;var Me=p.map((function(t,n){var r=t.key;return e.createElement(Jf,{id:v,prefixCls:d,key:r,tab:t,style:0===n?void 0:Te,closable:t.closable,editable:E,active:r===y,renderWrapper:S,removeAriaLabel:null==x?void 0:x.removeAriaLabel,ref:A(r),onClick:function(e){O(r,e)},onRemove:function(){F(r)},onFocus:function(){Se(r),ke(),N.current&&(b||(N.current.scrollLeft=0),N.current.scrollTop=0)}})})),Re=Xf((function(){var e,t,n,r,a,o,i=(null===(e=N.current)||void 0===e?void 0:e.offsetWidth)||0,l=(null===(t=N.current)||void 0===t?void 0:t.offsetHeight)||0,u=(null===(n=M.current)||void 0===n?void 0:n.offsetWidth)||0,c=(null===(r=M.current)||void 0===r?void 0:r.offsetHeight)||0;ee(i),re(l),ie(u),ce(c);var s=((null===(a=_.current)||void 0===a?void 0:a.offsetWidth)||0)-u,f=((null===(o=_.current)||void 0===o?void 0:o.offsetHeight)||0)-c;q(s),X(f),pe((function(){var e=new Map;return p.forEach((function(t){var n=t.key,r=A(n).current;r&&e.set(n,{width:r.offsetWidth,height:r.offsetHeight,left:r.offsetLeft,top:r.offsetTop})})),e}))})),Ae=p.slice(0,Ne),Fe=p.slice(_e+1),je=[].concat(ct(Ae),ct(Fe)),Le=K((0,e.useState)(),2),Ie=Le[0],ze=Le[1],De=me.get(y),Ve=(0,e.useRef)();function He(){an.cancel(Ve.current)}(0,e.useEffect)((function(){var e={};return De&&(j?(b?e.right=De.right:e.left=De.left,e.width=De.width):(e.top=De.top,e.height=De.height)),He(),Ve.current=an((function(){ze(e)})),He}),[De,j,b]),(0,e.useEffect)((function(){Se()}),[y,De,me,j]),(0,e.useEffect)((function(){Re()}),[b,C,y,p.map((function(e){return e.key})).join("_")]);var Ue,Be,We,$e,qe=!!je.length,Ke="".concat(d,"-nav-wrap");return j?b?(Be=I>0,Ue=I+J<$):(Ue=I<0,Be=-I+J<$):(We=U<0,$e=-U+ne<Q),e.createElement("div",{ref:n,role:"tablist",className:G()("".concat(d,"-nav"),m),style:h,onKeyDown:function(){ke()}},e.createElement(yd,{position:"left",extra:w,prefixCls:d}),e.createElement(qt,{onResize:Re},e.createElement("div",{className:G()(Ke,(a={},D(a,"".concat(Ke,"-ping-left"),Ue),D(a,"".concat(Ke,"-ping-right"),Be),D(a,"".concat(Ke,"-ping-top"),We),D(a,"".concat(Ke,"-ping-bottom"),$e),a)),ref:N},e.createElement(qt,{onResize:Re},e.createElement("div",{ref:_,className:"".concat(d,"-nav-list"),style:{transform:"translate(".concat(I,"px, ").concat(U,"px)"),transition:Ee?"none":void 0}},Me,e.createElement(dd,{ref:M,prefixCls:d,locale:x,editable:E,style:H(H({},0===Me.length?void 0:Te),{},{visibility:qe?"hidden":null})}),e.createElement("div",{className:G()("".concat(d,"-ink-bar"),D({},"".concat(d,"-ink-bar-animated"),g.inkBar)),style:Ie}))))),e.createElement(md,r({},t,{removeAriaLabel:null==x?void 0:x.removeAriaLabel,ref:T,prefixCls:d,tabs:je,className:!qe&&he,tabMoving:!!Ee})),e.createElement(yd,{position:"right",extra:w,prefixCls:d}))}const wd=e.forwardRef(bd);function Ed(t){var n=t.id,r=t.activeKey,a=t.animated,o=t.tabPosition,i=t.rtl,l=t.destroyInactiveTabPane,u=e.useContext(hd),c=u.prefixCls,s=u.tabs,f=a.tabPane,d=s.findIndex((function(e){return e.key===r}));return e.createElement("div",{className:G()("".concat(c,"-content-holder"))},e.createElement("div",{className:G()("".concat(c,"-content"),"".concat(c,"-content-").concat(o),D({},"".concat(c,"-content-animated"),f)),style:d&&f?D({},i?"marginRight":"marginLeft","-".concat(d,"00%")):null},s.map((function(t){return e.cloneElement(t.node,{key:t.key,prefixCls:c,tabKey:t.key,id:n,animated:f,active:t.key===r,destroyInactiveTabPane:l})}))))}function xd(t){var n=t.prefixCls,r=t.forceRender,a=t.className,o=t.style,i=t.id,l=t.active,u=t.animated,c=t.destroyInactiveTabPane,s=t.tabKey,f=t.children,d=K(e.useState(r),2),p=d[0],m=d[1];e.useEffect((function(){l?m(!0):c&&m(!1)}),[l,c]);var h={};return l||(u?(h.visibility="hidden",h.height=0,h.overflowY="hidden"):h.display="none"),e.createElement("div",{id:i&&"".concat(i,"-panel-").concat(s),role:"tabpanel",tabIndex:l?0:-1,"aria-labelledby":i&&"".concat(i,"-tab-").concat(s),"aria-hidden":!l,style:H(H({},h),o),className:G()("".concat(n,"-tabpane"),l&&"".concat(n,"-tabpane-active"),a)},(l||p||r)&&f)}var kd=["id","prefixCls","className","children","direction","activeKey","defaultActiveKey","editable","animated","tabPosition","tabBarGutter","tabBarStyle","tabBarExtraContent","locale","moreIcon","moreTransitionName","destroyInactiveTabPane","renderTabBar","onChange","onTabClick","onTabScroll"],Cd=0;function Sd(t,n){var a,o,i=t.id,l=t.prefixCls,u=void 0===l?"rc-tabs":l,c=t.className,s=t.children,f=t.direction,d=t.activeKey,p=t.defaultActiveKey,m=t.editable,h=t.animated,v=void 0===h?{inkBar:!0,tabPane:!1}:h,g=t.tabPosition,y=void 0===g?"top":g,b=t.tabBarGutter,w=t.tabBarStyle,E=t.tabBarExtraContent,x=t.locale,k=t.moreIcon,C=t.moreTransitionName,S=t.destroyInactiveTabPane,O=t.renderTabBar,P=t.onChange,N=t.onTabClick,_=t.onTabScroll,T=Y(t,kd),M=function(t){return mt(t).map((function(t){return e.isValidElement(t)?H(H({key:void 0!==t.key?String(t.key):void 0},t.props),{},{node:t}):null})).filter((function(e){return e}))}(s),R="rtl"===f;o=!1===v?{inkBar:!1,tabPane:!1}:!0===v?{inkBar:!0,tabPane:!0}:H({inkBar:!0,tabPane:!1},"object"===Z(v)?v:{});var A=K((0,e.useState)(!1),2),F=A[0],j=A[1];(0,e.useEffect)((function(){j(ar())}),[]);var L=K(dt((function(){var e;return null===(e=M[0])||void 0===e?void 0:e.key}),{value:d,defaultValue:p}),2),I=L[0],z=L[1],V=K((0,e.useState)((function(){return M.findIndex((function(e){return e.key===I}))})),2),U=V[0],B=V[1];(0,e.useEffect)((function(){var e,t=M.findIndex((function(e){return e.key===I}));-1===t&&(t=Math.max(0,Math.min(U,M.length-1)),z(null===(e=M[t])||void 0===e?void 0:e.key)),B(t)}),[M.map((function(e){return e.key})).join("_"),I,U]);var W=K(dt(null,{value:i}),2),$=W[0],q=W[1],Q=y;F&&!["left","right"].includes(y)&&(Q="top"),(0,e.useEffect)((function(){i||(q("rc-tabs-".concat(Cd)),Cd+=1)}),[]);var X,J={id:$,activeKey:I,animated:o,tabPosition:Q,rtl:R,mobile:F},ee=H(H({},J),{},{editable:m,locale:x,moreIcon:k,moreTransitionName:C,tabBarGutter:b,onTabClick:function(e,t){null==N||N(e,t);var n=e!==I;z(e),n&&(null==P||P(e))},onTabScroll:_,extra:E,style:w,panes:s});return X=O?O(ee,wd):e.createElement(wd,ee),e.createElement(hd.Provider,{value:{tabs:M,prefixCls:u}},e.createElement("div",r({ref:n,id:i,className:G()(u,"".concat(u,"-").concat(Q),(a={},D(a,"".concat(u,"-mobile"),F),D(a,"".concat(u,"-editable"),m),D(a,"".concat(u,"-rtl"),R),a),c)},T),X,e.createElement(Ed,r({destroyInactiveTabPane:S},J,{animated:o}))))}var Od=e.forwardRef(Sd);Od.TabPane=xd;const Pd=Od,Nd={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"defs",attrs:{},children:[{tag:"style",attrs:{}}]},{tag:"path",attrs:{d:"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"}},{tag:"path",attrs:{d:"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"}}]},name:"plus",theme:"outlined"};var _d=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Nd}))};_d.displayName="PlusOutlined";const Td=e.forwardRef(_d),Md={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"}}]},name:"close",theme:"outlined"};var Rd=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Md}))};Rd.displayName="CloseOutlined";const Ad=e.forwardRef(Rd);function Fd(t){var n,a=t.type,o=t.className,i=t.size,l=t.onEdit,u=t.hideAdd,c=t.centered,s=t.addIcon,f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["type","className","size","onEdit","hideAdd","centered","addIcon"]),d=f.prefixCls,p=f.moreIcon,m=void 0===p?e.createElement(ci,null):p,h=e.useContext(zi),v=h.getPrefixCls,g=h.direction,y=v("tabs",d);"editable-card"===a&&(n={onEdit:function(e,t){var n=t.key,r=t.event;null==l||l("add"===e?r:n,e)},removeIcon:e.createElement(Ad,null),addIcon:s||e.createElement(Td,null),showAdd:!0!==u});var b=v();return yl(!("onPrevClick"in f)&&!("onNextClick"in f),"Tabs","`onPrevClick` and `onNextClick` has been removed. Please use `onTabScroll` instead."),e.createElement(gu.Consumer,null,(function(t){var l,u=void 0!==i?i:t;return e.createElement(Pd,r({direction:g,moreTransitionName:"".concat(b,"-slide-up")},f,{className:G()((l={},D(l,"".concat(y,"-").concat(u),u),D(l,"".concat(y,"-card"),["card","editable-card"].includes(a)),D(l,"".concat(y,"-editable-card"),"editable-card"===a),D(l,"".concat(y,"-centered"),c),l),o),editable:n,moreIcon:m,prefixCls:y}))}))}Fd.TabPane=xd;const jd=Fd;var Ld=["xs","sm","md","lg","xl","xxl"],Id=e.forwardRef((function(t,n){var a,o=e.useContext(zi),i=o.getPrefixCls,l=o.direction,u=e.useContext(Vf),c=u.gutter,s=u.wrap,f=u.supportFlexGap,d=t.prefixCls,p=t.span,m=t.order,h=t.offset,v=t.push,g=t.pull,y=t.className,b=t.children,w=t.flex,E=t.style,x=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","span","order","offset","push","pull","className","children","flex","style"]),k=i("col",d),C={};Ld.forEach((function(e){var n,a={},o=t[e];"number"==typeof o?a.span=o:"object"===Z(o)&&(a=o||{}),delete x[e],C=r(r({},C),(D(n={},"".concat(k,"-").concat(e,"-").concat(a.span),void 0!==a.span),D(n,"".concat(k,"-").concat(e,"-order-").concat(a.order),a.order||0===a.order),D(n,"".concat(k,"-").concat(e,"-offset-").concat(a.offset),a.offset||0===a.offset),D(n,"".concat(k,"-").concat(e,"-push-").concat(a.push),a.push||0===a.push),D(n,"".concat(k,"-").concat(e,"-pull-").concat(a.pull),a.pull||0===a.pull),D(n,"".concat(k,"-rtl"),"rtl"===l),n))}));var S=G()(k,(D(a={},"".concat(k,"-").concat(p),void 0!==p),D(a,"".concat(k,"-order-").concat(m),m),D(a,"".concat(k,"-offset-").concat(h),h),D(a,"".concat(k,"-push-").concat(v),v),D(a,"".concat(k,"-pull-").concat(g),g),a),y,C),O={};if(c&&c[0]>0){var P=c[0]/2;O.paddingLeft=P,O.paddingRight=P}if(c&&c[1]>0&&!f){var N=c[1]/2;O.paddingTop=N,O.paddingBottom=N}return w&&(O.flex=function(e){return"number"==typeof e?"".concat(e," ").concat(e," auto"):/^\d+(\.\d+)?(px|em|rem|%)$/.test(e)?"0 0 ".concat(e):e}(w),!1!==s||O.minWidth||(O.minWidth=0)),e.createElement("div",r({},x,{style:r(r({},O),E),className:S,ref:n}),b)}));Id.displayName="Col";const zd=Id;var Dd=e.forwardRef((function(t,n){var a,o,i,l=e.useContext(zi),u=l.getPrefixCls,c=l.direction,s=e.useContext(gu),f=t.prefixCls,d=t.className,p=t.extra,m=t.headStyle,h=void 0===m?{}:m,v=t.bodyStyle,g=void 0===v?{}:v,y=t.title,b=t.loading,w=t.bordered,E=void 0===w||w,x=t.size,k=t.type,C=t.cover,S=t.actions,O=t.tabList,P=t.children,N=t.activeTabKey,_=t.defaultActiveTabKey,T=t.tabBarExtraContent,M=t.hoverable,R=t.tabProps,A=void 0===R?{}:R,F=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","extra","headStyle","bodyStyle","title","loading","bordered","size","type","cover","actions","tabList","children","activeTabKey","defaultActiveTabKey","tabBarExtraContent","hoverable","tabProps"]),j=u("card",f),L=0===g.padding||"0px"===g.padding?{padding:24}:void 0,I=e.createElement("div",{className:"".concat(j,"-loading-block")}),z=e.createElement("div",{className:"".concat(j,"-loading-content"),style:L},e.createElement(Qf,{gutter:8},e.createElement(zd,{span:22},I)),e.createElement(Qf,{gutter:8},e.createElement(zd,{span:8},I),e.createElement(zd,{span:15},I)),e.createElement(Qf,{gutter:8},e.createElement(zd,{span:6},I),e.createElement(zd,{span:18},I)),e.createElement(Qf,{gutter:8},e.createElement(zd,{span:13},I),e.createElement(zd,{span:9},I)),e.createElement(Qf,{gutter:8},e.createElement(zd,{span:4},I),e.createElement(zd,{span:3},I),e.createElement(zd,{span:16},I))),V=void 0!==N,H=r(r({},A),(D(a={},V?"activeKey":"defaultActiveKey",V?N:_),D(a,"tabBarExtraContent",T),a)),U=O&&O.length?e.createElement(jd,r({size:"large"},H,{className:"".concat(j,"-head-tabs"),onChange:function(e){var n;null===(n=t.onTabChange)||void 0===n||n.call(t,e)}}),O.map((function(t){return e.createElement(jd.TabPane,{tab:t.tab,disabled:t.disabled,key:t.key})}))):null;(y||p||U)&&(i=e.createElement("div",{className:"".concat(j,"-head"),style:h},e.createElement("div",{className:"".concat(j,"-head-wrapper")},y&&e.createElement("div",{className:"".concat(j,"-head-title")},y),p&&e.createElement("div",{className:"".concat(j,"-extra")},p)),U));var B,W=C?e.createElement("div",{className:"".concat(j,"-cover")},C):null,$=e.createElement("div",{className:"".concat(j,"-body"),style:g},b?z:P),q=S&&S.length?e.createElement("ul",{className:"".concat(j,"-actions")},function(t){return t.map((function(n,r){return e.createElement("li",{style:{width:"".concat(100/t.length,"%")},key:"action-".concat(r)},e.createElement("span",null,n))}))}(S)):null,K=xn(F,["onTabChange"]),Y=x||s,Q=G()(j,(D(o={},"".concat(j,"-loading"),b),D(o,"".concat(j,"-bordered"),E),D(o,"".concat(j,"-hoverable"),M),D(o,"".concat(j,"-contain-grid"),(e.Children.forEach(t.children,(function(e){e&&e.type&&e.type===Gf&&(B=!0)})),B)),D(o,"".concat(j,"-contain-tabs"),O&&O.length),D(o,"".concat(j,"-").concat(Y),Y),D(o,"".concat(j,"-type-").concat(k),!!k),D(o,"".concat(j,"-rtl"),"rtl"===c),o),d);return e.createElement("div",r({ref:n},K,{className:Q}),i,W,$,q)}));Dd.Grid=Gf,Dd.Meta=function(t){return e.createElement(Di,null,(function(n){var a=n.getPrefixCls,o=t.prefixCls,i=t.className,l=t.avatar,u=t.title,c=t.description,s=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","avatar","title","description"]),f=a("card",o),d=G()("".concat(f,"-meta"),i),p=l?e.createElement("div",{className:"".concat(f,"-meta-avatar")},l):null,m=u?e.createElement("div",{className:"".concat(f,"-meta-title")},u):null,h=c?e.createElement("div",{className:"".concat(f,"-meta-description")},c):null,v=m||h?e.createElement("div",{className:"".concat(f,"-meta-detail")},m,h):null;return e.createElement("div",r({},s,{className:d}),p,v)}))};const Vd=Dd,Hd={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M872 474H286.9l350.2-304c5.6-4.9 2.2-14-5.2-14h-88.5c-3.9 0-7.6 1.4-10.5 3.9L155 487.8a31.96 31.96 0 000 48.3L535.1 866c1.5 1.3 3.3 2 5.2 2h91.5c7.4 0 10.8-9.2 5.2-14L286.9 550H872c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"}}]},name:"arrow-left",theme:"outlined"};var Ud=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Hd}))};Ud.displayName="ArrowLeftOutlined";const Bd=e.forwardRef(Ud),Wd={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M869 487.8L491.2 159.9c-2.9-2.5-6.6-3.9-10.5-3.9h-88.5c-7.4 0-10.8 9.2-5.2 14l350.2 304H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h585.1L386.9 854c-5.6 4.9-2.2 14 5.2 14h91.5c1.9 0 3.8-.7 5.2-2L869 536.2a32.07 32.07 0 000-48.4z"}}]},name:"arrow-right",theme:"outlined"};var $d=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Wd}))};$d.displayName="ArrowRightOutlined";const qd=e.forwardRef($d),Kd={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"}}]},name:"down",theme:"outlined"};var Yd=function(t,n){return e.createElement(Ke,H(H({},t),{},{ref:n,icon:Kd}))};Yd.displayName="DownOutlined";const Qd=e.forwardRef(Yd);var Gd=bs.Group,Xd=function(t){var n=e.useContext(zi),a=n.getPopupContainer,o=n.getPrefixCls,i=n.direction,l=t.prefixCls,u=t.type,c=void 0===u?"default":u,s=t.disabled,f=t.loading,d=t.onClick,p=t.htmlType,m=t.children,h=t.className,v=t.overlay,g=t.trigger,y=t.align,b=t.visible,w=t.onVisibleChange,E=t.placement,x=t.getPopupContainer,k=t.href,C=t.icon,S=void 0===C?e.createElement(ci,null):C,O=t.title,P=t.buttonsRender,N=void 0===P?function(e){return e}:P,_=t.mouseEnterDelay,T=t.mouseLeaveDelay,M=t.overlayClassName,R=t.overlayStyle,A=t.destroyPopupOnHide,F=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","type","disabled","loading","onClick","htmlType","children","className","overlay","trigger","align","visible","onVisibleChange","placement","getPopupContainer","href","icon","title","buttonsRender","mouseEnterDelay","mouseLeaveDelay","overlayClassName","overlayStyle","destroyPopupOnHide"]),j=o("dropdown-button",l),L={align:y,overlay:v,disabled:s,trigger:s?[]:g,onVisibleChange:w,getPopupContainer:x||a,mouseEnterDelay:_,mouseLeaveDelay:T,overlayClassName:M,overlayStyle:R,destroyPopupOnHide:A};"visible"in t&&(L.visible=b),L.placement="placement"in t?E:"rtl"===i?"bottomLeft":"bottomRight";var I=K(N([e.createElement(bs,{type:c,disabled:s,loading:f,onClick:d,htmlType:p,href:k,title:O},m),e.createElement(bs,{type:c,icon:S})]),2),z=I[0],D=I[1];return e.createElement(Gd,r({},F,{className:G()(j,h)}),z,e.createElement(ep,L,D))};Xd.__ANT_BUTTON=!0;const Zd=Xd;Vi("topLeft","topCenter","topRight","bottomLeft","bottomCenter","bottomRight","top","bottom");var Jd=function(t){var n,a=e.useContext(zi),o=a.getPopupContainer,i=a.getPrefixCls,l=a.direction,u=t.arrow,c=t.prefixCls,s=t.children,f=t.trigger,d=t.disabled,p=t.getPopupContainer,m=t.overlayClassName,h=i("dropdown",c),v=e.Children.only(s),g=mi(v,{className:G()("".concat(h,"-trigger"),D({},"".concat(h,"-rtl"),"rtl"===l),v.props.className),disabled:d}),y=G()(m,D({},"".concat(h,"-rtl"),"rtl"===l)),b=d?[]:f;b&&-1!==b.indexOf("contextMenu")&&(n=!0);var w,E,x,k,C=Si({arrowPointAtCenter:"object"===Z(u)&&u.pointAtCenter});return e.createElement(sd,r({alignPoint:n},t,{builtinPlacements:C,arrow:!!u,overlayClassName:y,prefixCls:h,getPopupContainer:p||o,transitionName:(w=i(),E=t.placement,x=void 0===E?"":E,k=t.transitionName,void 0!==k?k:x.indexOf("top")>=0?"".concat(w,"-slide-down"):"".concat(w,"-slide-up")),trigger:b,overlay:function(){return function(n){var r,a=t.overlay;r="function"==typeof a?a():a;var o=(r=e.Children.only("string"==typeof r?e.createElement("span",null,r):r)).props;yl(!o.mode||"vertical"===o.mode,"Dropdown",'mode="'.concat(o.mode,"\" is not supported for Dropdown's Menu."));var i=o.selectable,l=void 0!==i&&i,u=o.expandIcon,c=void 0!==u&&e.isValidElement(u)?u:e.createElement("span",{className:"".concat(n,"-menu-submenu-arrow")},e.createElement(rl,{className:"".concat(n,"-menu-submenu-arrow-icon")}));return"string"==typeof r.type?r:mi(r,{mode:"vertical",selectable:l,expandIcon:c})}(h)},placement:function(){var e=t.placement;if(!e)return"rtl"===l?"bottomRight":"bottomLeft";if(e.includes("Center")){var n=e.slice(0,e.indexOf("Center"));return yl(!e.includes("Center"),"Dropdown","You are using '".concat(e,"' placement in Dropdown, which is deprecated. Try to use '").concat(n,"' instead.")),n}return e}()}),g)};Jd.Button=Zd,Jd.defaultProps={mouseEnterDelay:.15,mouseLeaveDelay:.1};const ep=Jd;var tp=function(t){var n,a,o=t.prefixCls,i=t.separator,l=void 0===i?"/":i,u=t.children,c=t.overlay,s=t.dropdownProps,f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","separator","children","overlay","dropdownProps"]),d=(0,e.useContext(zi).getPrefixCls)("breadcrumb",o);return a=n="href"in f?e.createElement("a",r({className:"".concat(d,"-link")},f),u):e.createElement("span",r({className:"".concat(d,"-link")},f),u),n=c?e.createElement(ep,r({overlay:c,placement:"bottom"},s),e.createElement("span",{className:"".concat(d,"-overlay-link")},a,e.createElement(Qd,null))):a,u?e.createElement("span",null,n,l&&e.createElement("span",{className:"".concat(d,"-separator")},l)):null};tp.__ANT_BREADCRUMB_ITEM=!0;const np=tp;var rp=function(t){var n=t.children,r=(0,e.useContext(zi).getPrefixCls)("breadcrumb");return e.createElement("span",{className:"".concat(r,"-separator")},n||"/")};rp.__ANT_BREADCRUMB_SEPARATOR=!0;const ap=rp;function op(t,n,r,a){var o=r.indexOf(t)===r.length-1,i=function(e,t){if(!e.breadcrumbName)return null;var n=Object.keys(t).join("|");return e.breadcrumbName.replace(new RegExp(":(".concat(n,")"),"g"),(function(e,n){return t[n]||e}))}(t,n);return o?e.createElement("span",null,i):e.createElement("a",{href:"#/".concat(a.join("/"))},i)}var ip=function(e,t){return e=(e||"").replace(/^\//,""),Object.keys(t).forEach((function(n){e=e.replace(":".concat(n),t[n])})),e},lp=function(t){var n,a=t.prefixCls,o=t.separator,i=void 0===o?"/":o,l=t.style,u=t.className,c=t.routes,s=t.children,f=t.itemRender,d=void 0===f?op:f,p=t.params,m=void 0===p?{}:p,h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","separator","style","className","routes","children","itemRender","params"]),v=e.useContext(zi),g=v.getPrefixCls,y=v.direction,b=g("breadcrumb",a);if(c&&c.length>0){var w=[];n=c.map((function(t){var n,r=ip(t.path,m);return r&&w.push(r),t.children&&t.children.length&&(n=e.createElement(El,null,t.children.map((function(t){return e.createElement(El.Item,{key:t.path||t.breadcrumbName},d(t,m,c,function(e,t,n){var r=ct(e),a=ip(t||"",n);return a&&r.push(a),r}(w,t.path,m)))})))),e.createElement(np,{overlay:n,separator:i,key:r||t.breadcrumbName},d(t,m,c,w))}))}else s&&(n=mt(s).map((function(e,t){return e?(yl(e.type&&(!0===e.type.__ANT_BREADCRUMB_ITEM||!0===e.type.__ANT_BREADCRUMB_SEPARATOR),"Breadcrumb","Only accepts Breadcrumb.Item and Breadcrumb.Separator as it's children"),mi(e,{separator:i,key:t})):e})));var E=G()(b,D({},"".concat(b,"-rtl"),"rtl"===y),u);return e.createElement("div",r({className:E,style:l},h),n)};lp.Item=np,lp.Separator=ap;const up=lp;function cp(){return K(e.useReducer((function(e){return e+1}),0),2)[1]}var sp=e.createContext("default"),fp=function(t){var n=t.children,r=t.size;return e.createElement(sp.Consumer,null,(function(t){return e.createElement(sp.Provider,{value:r||t},n)}))};const dp=sp;var pp=function(t,n){var a,o,i=e.useContext(dp),l=K(e.useState(1),2),u=l[0],c=l[1],s=K(e.useState(!1),2),f=s[0],d=s[1],p=K(e.useState(!0),2),m=p[0],h=p[1],v=e.useRef(),g=e.useRef(),y=vt(n,v),b=e.useContext(zi).getPrefixCls,w=function(){if(g.current&&v.current){var e=g.current.offsetWidth,n=v.current.offsetWidth;if(0!==e&&0!==n){var r=t.gap,a=void 0===r?4:r;2*a<n&&c(n-2*a<e?(n-2*a)/e:1)}}};e.useEffect((function(){d(!0)}),[]),e.useEffect((function(){h(!0),c(1)}),[t.src]),e.useEffect((function(){w()}),[t.gap]);var E=t.prefixCls,x=t.shape,k=t.size,C=t.src,S=t.srcSet,O=t.icon,P=t.className,N=t.alt,_=t.draggable,T=t.children,M=t.crossOrigin,R=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","shape","size","src","srcSet","icon","className","alt","draggable","children","crossOrigin"]),A="default"===k?i:k,F=function(){var t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],n=(0,e.useRef)({}),r=cp();return(0,e.useEffect)((function(){var e=qf.subscribe((function(e){n.current=e,t&&r()}));return function(){return qf.unsubscribe(e)}}),[]),n.current}(Object.keys("object"===Z(A)&&A||{}).some((function(e){return["xs","sm","md","lg","xl","xxl"].includes(e)}))),j=e.useMemo((function(){if("object"!==Z(A))return{};var e=Hf.find((function(e){return F[e]})),t=A[e];return t?{width:t,height:t,lineHeight:"".concat(t,"px"),fontSize:O?t/2:18}:{}}),[F,A]);yl(!("string"==typeof O&&O.length>2),"Avatar","`icon` is using ReactNode instead of string naming in v4. Please check `".concat(O,"` at https://ant.design/components/icon"));var L,I=b("avatar",E),z=G()((D(a={},"".concat(I,"-lg"),"large"===A),D(a,"".concat(I,"-sm"),"small"===A),a)),V=e.isValidElement(C),H=G()(I,z,(D(o={},"".concat(I,"-").concat(x),!!x),D(o,"".concat(I,"-image"),V||C&&m),D(o,"".concat(I,"-icon"),!!O),o),P),U="number"==typeof A?{width:A,height:A,lineHeight:"".concat(A,"px"),fontSize:O?A/2:18}:{};if("string"==typeof C&&m)L=e.createElement("img",{src:C,draggable:_,srcSet:S,onError:function(){var e=t.onError;!1!==(e?e():void 0)&&h(!1)},alt:N,crossOrigin:M});else if(V)L=C;else if(O)L=O;else if(f||1!==u){var B="scale(".concat(u,") translateX(-50%)"),W={msTransform:B,WebkitTransform:B,transform:B},$="number"==typeof A?{lineHeight:"".concat(A,"px")}:{};L=e.createElement(qt,{onResize:w},e.createElement("span",{className:"".concat(I,"-string"),ref:function(e){g.current=e},style:r(r({},$),W)},T))}else L=e.createElement("span",{className:"".concat(I,"-string"),style:{opacity:0},ref:function(e){g.current=e}},T);return delete R.onError,delete R.gap,e.createElement("span",r({},R,{style:r(r(r({},U),j),R.style),className:H,ref:y}),L)},mp=e.forwardRef(pp);mp.displayName="Avatar",mp.defaultProps={shape:"circle",size:"default"};const hp=mp;var vp=function(e){return e?"function"==typeof e?e():e:null},gp=e.forwardRef((function(t,n){var a=t.prefixCls,o=t.title,i=t.content,l=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","title","content"]),u=e.useContext(zi).getPrefixCls,c=u("popover",a),s=u();return e.createElement(Xi,r({},l,{prefixCls:c,ref:n,overlay:function(t){if(o||i)return e.createElement(e.Fragment,null,o&&e.createElement("div",{className:"".concat(t,"-title")},vp(o)),e.createElement("div",{className:"".concat(t,"-inner-content")},vp(i)))}(c),transitionName:Ki(s,"zoom-big",l.transitionName)}))}));gp.displayName="Popover",gp.defaultProps={placement:"top",trigger:"hover",mouseEnterDelay:.1,mouseLeaveDelay:.1,overlayStyle:{}};const yp=gp;var bp=hp;bp.Group=function(t){var n=e.useContext(zi),r=n.getPrefixCls,a=n.direction,o=t.prefixCls,i=t.className,l=void 0===i?"":i,u=t.maxCount,c=t.maxStyle,s=t.size,f=r("avatar-group",o),d=G()(f,D({},"".concat(f,"-rtl"),"rtl"===a),l),p=t.children,m=t.maxPopoverPlacement,h=void 0===m?"top":m,v=t.maxPopoverTrigger,g=void 0===v?"hover":v,y=mt(p).map((function(e,t){return mi(e,{key:"avatar-key-".concat(t)})})),b=y.length;if(u&&u<b){var w=y.slice(0,u),E=y.slice(u,b);return w.push(e.createElement(yp,{key:"avatar-popover-key",content:E,trigger:g,placement:h,overlayClassName:"".concat(f,"-popover")},e.createElement(hp,{style:c},"+".concat(b-u)))),e.createElement(fp,{size:s},e.createElement("div",{className:d,style:t.style},w))}return e.createElement(fp,{size:s},e.createElement("div",{className:d,style:t.style},y))};const wp=bp;var Ep=function(t,n,r){return n&&r?e.createElement(Mi,{componentName:"PageHeader"},(function(a){var o=a.back;return e.createElement("div",{className:"".concat(t,"-back")},e.createElement(bf,{onClick:function(e){null==r||r(e)},className:"".concat(t,"-back-button"),"aria-label":o},n))})):null},xp=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"ltr";return void 0!==t.backIcon?t.backIcon:"rtl"===n?e.createElement(qd,null):e.createElement(Bd,null)};const kp=function(t){var n,r=K(e.useState(!1),2),a=r[0],o=r[1],i=(n=e.useRef(!0),e.useEffect((function(){return function(){n.current=!1}}),[]),function(){return!n.current}),l=function(e){var t=e.width;i()||o(t<768)};return e.createElement(Di,null,(function(n){var r,o,i=n.getPrefixCls,u=n.pageHeader,c=n.direction,s=t.prefixCls,f=t.style,d=t.footer,p=t.children,m=t.breadcrumb,h=t.breadcrumbRender,v=t.className,g=!0;"ghost"in t?g=t.ghost:u&&"ghost"in u&&(g=u.ghost);var y=i("page-header",s),b=(null==m?void 0:m.routes)?function(t){return e.createElement(up,t)}(m):null,w=m&&"props"in m,E=null!==(o=null==h?void 0:h(t,b))&&void 0!==o?o:b,x=w?m:E,k=G()(y,v,(D(r={"has-breadcrumb":!!x,"has-footer":!!d},"".concat(y,"-ghost"),g),D(r,"".concat(y,"-rtl"),"rtl"===c),D(r,"".concat(y,"-compact"),a),r));return e.createElement(qt,{onResize:l},e.createElement("div",{className:k,style:f},x,function(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"ltr",a=n.title,o=n.avatar,i=n.subTitle,l=n.tags,u=n.extra,c=n.onBack,s="".concat(t,"-heading"),f=a||i||l||u;if(!f)return null;var d=xp(n,r),p=Ep(t,d,c),m=p||o||f;return e.createElement("div",{className:s},m&&e.createElement("div",{className:"".concat(s,"-left")},p,o&&e.createElement(wp,o),a&&e.createElement("span",{className:"".concat(s,"-title"),title:"string"==typeof a?a:void 0},a),i&&e.createElement("span",{className:"".concat(s,"-sub-title"),title:"string"==typeof i?i:void 0},i),l&&e.createElement("span",{className:"".concat(s,"-tags")},l)),u&&e.createElement("span",{className:"".concat(s,"-extra")},u))}(y,t,c),p&&function(t,n){return e.createElement("div",{className:"".concat(t,"-content")},n)}(y,p),function(t,n){return n?e.createElement("div",{className:"".concat(t,"-footer")},n):null}(y,d)))}))};var Cp=new RegExp("^(".concat(Ui.join("|"),")(-inverse)?$")),Sp=new RegExp("^(".concat(Hi.join("|"),")$")),Op=function(t,n){var a,o=t.prefixCls,i=t.className,l=t.style,u=t.children,c=t.icon,s=t.color,f=t.onClose,d=t.closeIcon,p=t.closable,m=void 0!==p&&p,h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","style","children","icon","color","onClose","closeIcon","closable"]),v=e.useContext(zi),g=v.getPrefixCls,y=v.direction,b=K(e.useState(!0),2),w=b[0],E=b[1];e.useEffect((function(){"visible"in h&&E(h.visible)}),[h.visible]);var x=function(){return!!s&&(Cp.test(s)||Sp.test(s))},k=r({backgroundColor:s&&!x()?s:void 0},l),C=x(),S=g("tag",o),O=G()(S,(D(a={},"".concat(S,"-").concat(s),C),D(a,"".concat(S,"-has-color"),s&&!C),D(a,"".concat(S,"-hidden"),!w),D(a,"".concat(S,"-rtl"),"rtl"===y),a),i),P=function(e){e.stopPropagation(),null==f||f(e),e.defaultPrevented||"visible"in h||E(!1)},N="onClick"in h||u&&"a"===u.type,_=xn(h,["visible"]),T=c||null,M=T?e.createElement(e.Fragment,null,T,e.createElement("span",null,u)):u,R=e.createElement("span",r({},_,{ref:n,className:O,style:k}),M,m?d?e.createElement("span",{className:"".concat(S,"-close-icon"),onClick:P},d):e.createElement(Ad,{className:"".concat(S,"-close-icon"),onClick:P}):null);return N?e.createElement(ss,null,R):R},Pp=e.forwardRef(Op);Pp.displayName="Tag",Pp.CheckableTag=function(t){var n,a=t.prefixCls,o=t.className,i=t.checked,l=t.onChange,u=t.onClick,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}(t,["prefixCls","className","checked","onChange","onClick"]),s=(0,e.useContext(zi).getPrefixCls)("tag",a),f=G()(s,(D(n={},"".concat(s,"-checkable"),!0),D(n,"".concat(s,"-checkable-checked"),i),n),o);return e.createElement("span",r({},c,{className:f,onClick:function(e){null==l||l(!i),null==u||u(e)}}))};const Np=Pp;var _p=Df.Paragraph,Tp=Df.Title,Mp=e.createElement("div",null,e.createElement(Tp,{level:5,underline:!0},"Known Issues"),e.createElement(_p,null,"Safari may have issues with downloading files, displaying images and playing chat alerts in canvas."),e.createElement(_p,null,"If `http://` and `https://` contents are mixed in 1 page, Canvas will display blank because of mixed content security settings. This is browser issue."));function Rp(t){var n=t.children;return e.createElement(Qf,null,n)}function Ap(){return e.createElement(Vd,null,e.createElement(kp,{title:"Learning Canvas",className:"site-page-header",subTitle:"Introduction",tags:e.createElement(Np,{color:"success"},"Important"),extra:[e.createElement(bs,{key:"1",href:"https://canvas.northwestern.edu/courses/128385/pages/which-browser-should-i-use?module_item_id=1708726",target:"_blank",rel:"noreferrer noopener"},"Reference")],avatar:{icon:e.createElement(tf,null)}},e.createElement(Rp,null,Mp)))}function Fp(){return e.createElement("div",{className:"notes--BOcrj"},e.createElement(Ap,null))}var jp=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};return function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Lp=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return jp(n,t),n.prototype.render=function(){return e.createElement(I,null,e.createElement(g,null,e.createElement(h,{path:"/",element:e.createElement(Pl,null)}),e.createElement(h,{path:"game",element:e.createElement(Zs,null)}),e.createElement(h,{path:"canvas",element:e.createElement(Fp,null)})))},n}(e.Component);t.render(e.createElement(Lp,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,