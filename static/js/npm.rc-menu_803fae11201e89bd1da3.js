"use strict";(self.webpackChunkbirthday=self.webpackChunkbirthday||[]).push([[153],{4423:(e,n,t)=>{t.d(n,{iz:()=>_e,ck:()=>G,BW:()=>Le,sN:()=>G,Wd:()=>pe,ZP:()=>Fe,Xl:()=>ze});var r=t(7462),o=t(4942),i=t(1413),l=t(3433),u=t(9439),a=t(4925),c=t(7294),s=t(4184),f=t.n(s),d=t(6774),v=t.n(d),p=t(1770),m=t(334),y=t(9214),h=t(5671),Z=t(3144),b=t(9340),C=t(8557),g=t(5105),E=t(8423),M=t(6982),I=["children","locked"],K=c.createContext(null);function P(e){var n=e.children,t=e.locked,r=(0,a.Z)(e,I),o=c.useContext(K),l=(0,M.Z)((function(){return e=o,n=r,t=(0,i.Z)({},e),Object.keys(n).forEach((function(e){var r=n[e];void 0!==r&&(t[e]=r)})),t;var e,n,t}),[o,r],(function(e,n){return!(t||e[0]===n[0]&&v()(e[1],n[1]))}));return c.createElement(K.Provider,{value:l},n)}function x(e,n,t,r){var o=c.useContext(K),i=o.activeKey,l=o.onActive,u=o.onInactive,a={active:i===e};return n||(a.onMouseEnter=function(n){null==t||t({key:e,domEvent:n}),l(e)},a.onMouseLeave=function(n){null==r||r({key:e,domEvent:n}),u(e)}),a}var k=["item"];function S(e){var n=e.item,t=(0,a.Z)(e,k);return Object.defineProperty(t,"item",{get:function(){return(0,m.ZP)(!1,"`info.item` is deprecated since we will move to function component that not provides React Node instance in future."),n}}),t}function w(e){var n=e.icon,t=e.props,r=e.children;return("function"==typeof n?c.createElement(n,(0,i.Z)({},t)):n)||r||null}function R(e){var n=c.useContext(K),t=n.mode,r=n.rtl,o=n.inlineIndent;return"inline"!==t?null:r?{paddingRight:e*o}:{paddingLeft:e*o}}var N=[],D=c.createContext(null);function O(){return c.useContext(D)}var T=c.createContext(N);function A(e){var n=c.useContext(T);return c.useMemo((function(){return void 0!==e?[].concat((0,l.Z)(n),[e]):n}),[n,e])}var L=c.createContext(null),_=c.createContext(null);function z(e,n){return void 0===e?null:"".concat(e,"-").concat(n)}function V(e){return z(c.useContext(_),e)}const F=c.createContext({});var j=["title","attribute","elementRef"],W=["style","className","eventKey","warnKey","disabled","itemIcon","children","role","onMouseEnter","onMouseLeave","onClick","onKeyDown","onFocus"],H=["active"],q=function(e){(0,b.Z)(t,e);var n=(0,C.Z)(t);function t(){return(0,h.Z)(this,t),n.apply(this,arguments)}return(0,Z.Z)(t,[{key:"render",value:function(){var e=this.props,n=e.title,t=e.attribute,o=e.elementRef,i=(0,a.Z)(e,j),l=(0,E.Z)(i,["eventKey"]);return(0,m.ZP)(!t,"`attribute` of Menu.Item is deprecated. Please pass attribute directly."),c.createElement(y.Z.Item,(0,r.Z)({},t,{title:"string"==typeof n?n:void 0},l,{ref:o}))}}]),t}(c.Component),B=function(e){var n,t=e.style,u=e.className,s=e.eventKey,d=(e.warnKey,e.disabled),v=e.itemIcon,p=e.children,m=e.role,y=e.onMouseEnter,h=e.onMouseLeave,Z=e.onClick,b=e.onKeyDown,C=e.onFocus,E=(0,a.Z)(e,W),M=V(s),I=c.useContext(K),P=I.prefixCls,k=I.onItemClick,N=I.disabled,D=I.overflowDisabled,O=I.itemIcon,T=I.selectedKeys,L=I.onActive,_=c.useContext(F)._internalRenderMenuItem,z="".concat(P,"-item"),j=c.useRef(),B=c.useRef(),G=N||d,U=A(s),X=function(e){return{key:s,keyPath:(0,l.Z)(U).reverse(),item:j.current,domEvent:e}},Y=v||O,J=x(s,G,y,h),Q=J.active,$=(0,a.Z)(J,H),ee=T.includes(s),ne=R(U.length),te={};"option"===e.role&&(te["aria-selected"]=ee);var re=c.createElement(q,(0,r.Z)({ref:j,elementRef:B,role:null===m?"none":m||"menuitem",tabIndex:d?null:-1,"data-menu-id":D&&M?null:M},E,$,te,{component:"li","aria-disabled":d,style:(0,i.Z)((0,i.Z)({},ne),t),className:f()(z,(n={},(0,o.Z)(n,"".concat(z,"-active"),Q),(0,o.Z)(n,"".concat(z,"-selected"),ee),(0,o.Z)(n,"".concat(z,"-disabled"),G),n),u),onClick:function(e){if(!G){var n=X(e);null==Z||Z(S(n)),k(n)}},onKeyDown:function(e){if(null==b||b(e),e.which===g.Z.ENTER){var n=X(e);null==Z||Z(S(n)),k(n)}},onFocus:function(e){L(s),null==C||C(e)}}),p,c.createElement(w,{props:(0,i.Z)((0,i.Z)({},e),{},{isSelected:ee}),icon:Y}));return _&&(re=_(re,e)),re};const G=function(e){var n=e.eventKey,t=O(),r=A(n);return c.useEffect((function(){if(t)return t.registerPath(n,r),function(){t.unregisterPath(n,r)}}),[r]),t?null:c.createElement(B,e)};var U=t(344);function X(e,n){return(0,U.Z)(e).map((function(e,t){if(c.isValidElement(e)){var r,o,i=e.key,u=null!==(r=null===(o=e.props)||void 0===o?void 0:o.eventKey)&&void 0!==r?r:i;null==u&&(u="tmp_key-".concat([].concat((0,l.Z)(n),[t]).join("-")));var a={key:u,eventKey:u};return c.cloneElement(e,a)}return e}))}function Y(e){var n=c.useRef(e);n.current=e;var t=c.useCallback((function(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return null===(e=n.current)||void 0===e?void 0:e.call.apply(e,[n].concat(r))}),[]);return e?t:void 0}var J=["className","children"],Q=function(e,n){var t=e.className,o=e.children,i=(0,a.Z)(e,J),l=c.useContext(K),u=l.prefixCls,s=l.mode,d=l.rtl;return c.createElement("ul",(0,r.Z)({className:f()(u,d&&"".concat(u,"-rtl"),"".concat(u,"-sub"),"".concat(u,"-").concat("inline"===s?"inline":"vertical"),t)},i,{"data-menu-list":!0,ref:n}),o)},$=c.forwardRef(Q);$.displayName="SubMenuList";const ee=$;var ne=t(4768),te=t(5164),re={adjustX:1,adjustY:1},oe={topLeft:{points:["bl","tl"],overflow:re,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:re,offset:[0,7]},leftTop:{points:["tr","tl"],overflow:re,offset:[-4,0]},rightTop:{points:["tl","tr"],overflow:re,offset:[4,0]}},ie={topLeft:{points:["bl","tl"],overflow:re,offset:[0,-7]},bottomLeft:{points:["tl","bl"],overflow:re,offset:[0,7]},rightTop:{points:["tr","tl"],overflow:re,offset:[-4,0]},leftTop:{points:["tl","tr"],overflow:re,offset:[4,0]}};function le(e,n,t){return n||(t?t[e]||t.other:void 0)}var ue={horizontal:"bottomLeft",vertical:"rightTop","vertical-left":"rightTop","vertical-right":"leftTop"};function ae(e){var n=e.prefixCls,t=e.visible,r=e.children,l=e.popup,a=e.popupClassName,s=e.popupOffset,d=e.disabled,v=e.mode,p=e.onVisibleChange,m=c.useContext(K),y=m.getPopupContainer,h=m.rtl,Z=m.subMenuOpenDelay,b=m.subMenuCloseDelay,C=m.builtinPlacements,g=m.triggerSubMenuAction,E=m.forceSubMenuRender,M=m.motion,I=m.defaultMotions,P=c.useState(!1),x=(0,u.Z)(P,2),k=x[0],S=x[1],w=h?(0,i.Z)((0,i.Z)({},ie),C):(0,i.Z)((0,i.Z)({},oe),C),R=ue[v],N=le(v,M,I),D=(0,i.Z)((0,i.Z)({},N),{},{leavedClassName:"".concat(n,"-hidden"),removeOnLeave:!1,motionAppear:!0}),O=c.useRef();return c.useEffect((function(){return O.current=(0,te.Z)((function(){S(t)})),function(){te.Z.cancel(O.current)}}),[t]),c.createElement(ne.Z,{prefixCls:n,popupClassName:f()("".concat(n,"-popup"),(0,o.Z)({},"".concat(n,"-rtl"),h),a),stretch:"horizontal"===v?"minWidth":null,getPopupContainer:y,builtinPlacements:w,popupPlacement:R,popupVisible:k,popup:l,popupAlign:s&&{offset:s},action:d?[]:[g],mouseEnterDelay:Z,mouseLeaveDelay:b,onPopupVisibleChange:p,forceRender:E,popupMotion:D},r)}var ce=t(444);function se(e){var n=e.id,t=e.open,o=e.keyPath,l=e.children,a="inline",s=c.useContext(K),f=s.prefixCls,d=s.forceSubMenuRender,v=s.motion,p=s.defaultMotions,m=s.mode,y=c.useRef(!1);y.current=m===a;var h=c.useState(!y.current),Z=(0,u.Z)(h,2),b=Z[0],C=Z[1],g=!!y.current&&t;c.useEffect((function(){y.current&&C(!1)}),[m]);var E=(0,i.Z)({},le(a,v,p));o.length>1&&(E.motionAppear=!1);var M=E.onVisibleChanged;return E.onVisibleChanged=function(e){return y.current||e||C(!0),null==M?void 0:M(e)},b?null:c.createElement(P,{mode:a,locked:!y.current},c.createElement(ce.Z,(0,r.Z)({visible:g},E,{forceRender:d,removeOnLeave:!1,leavedClassName:"".concat(f,"-hidden")}),(function(e){var t=e.className,r=e.style;return c.createElement(ee,{id:n,className:t,style:r},l)})))}var fe=["style","className","title","eventKey","warnKey","disabled","internalPopupClose","children","itemIcon","expandIcon","popupClassName","popupOffset","onClick","onMouseEnter","onMouseLeave","onTitleClick","onTitleMouseEnter","onTitleMouseLeave"],de=["active"],ve=function(e){var n,t=e.style,l=e.className,s=e.title,d=e.eventKey,v=(e.warnKey,e.disabled),p=e.internalPopupClose,m=e.children,h=e.itemIcon,Z=e.expandIcon,b=e.popupClassName,C=e.popupOffset,g=e.onClick,E=e.onMouseEnter,M=e.onMouseLeave,I=e.onTitleClick,k=e.onTitleMouseEnter,N=e.onTitleMouseLeave,D=(0,a.Z)(e,fe),O=V(d),T=c.useContext(K),_=T.prefixCls,z=T.mode,j=T.openKeys,W=T.disabled,H=T.overflowDisabled,q=T.activeKey,B=T.selectedKeys,G=T.itemIcon,U=T.expandIcon,X=T.onItemClick,J=T.onOpenChange,Q=T.onActive,$=c.useContext(F)._internalRenderSubMenuItem,ne=c.useContext(L).isSubPathKey,te=A(),re="".concat(_,"-submenu"),oe=W||v,ie=c.useRef(),le=c.useRef(),ue=h||G,ce=Z||U,ve=j.includes(d),pe=!H&&ve,me=ne(B,d),ye=x(d,oe,k,N),he=ye.active,Ze=(0,a.Z)(ye,de),be=c.useState(!1),Ce=(0,u.Z)(be,2),ge=Ce[0],Ee=Ce[1],Me=function(e){oe||Ee(e)},Ie=c.useMemo((function(){return he||"inline"!==z&&(ge||ne([q],d))}),[z,he,q,ge,d,ne]),Ke=R(te.length),Pe=Y((function(e){null==g||g(S(e)),X(e)})),xe=O&&"".concat(O,"-popup"),ke=c.createElement("div",(0,r.Z)({role:"menuitem",style:Ke,className:"".concat(re,"-title"),tabIndex:oe?null:-1,ref:ie,title:"string"==typeof s?s:null,"data-menu-id":H&&O?null:O,"aria-expanded":pe,"aria-haspopup":!0,"aria-controls":xe,"aria-disabled":oe,onClick:function(e){oe||(null==I||I({key:d,domEvent:e}),"inline"===z&&J(d,!ve))},onFocus:function(){Q(d)}},Ze),s,c.createElement(w,{icon:"horizontal"!==z?ce:null,props:(0,i.Z)((0,i.Z)({},e),{},{isOpen:pe,isSubMenu:!0})},c.createElement("i",{className:"".concat(re,"-arrow")}))),Se=c.useRef(z);if("inline"!==z&&(Se.current=te.length>1?"vertical":z),!H){var we=Se.current;ke=c.createElement(ae,{mode:we,prefixCls:re,visible:!p&&pe&&"inline"!==z,popupClassName:b,popupOffset:C,popup:c.createElement(P,{mode:"horizontal"===we?"vertical":we},c.createElement(ee,{id:xe,ref:le},m)),disabled:oe,onVisibleChange:function(e){"inline"!==z&&J(d,e)}},ke)}var Re=c.createElement(y.Z.Item,(0,r.Z)({role:"none"},D,{component:"li",style:t,className:f()(re,"".concat(re,"-").concat(z),l,(n={},(0,o.Z)(n,"".concat(re,"-open"),pe),(0,o.Z)(n,"".concat(re,"-active"),Ie),(0,o.Z)(n,"".concat(re,"-selected"),me),(0,o.Z)(n,"".concat(re,"-disabled"),oe),n)),onMouseEnter:function(e){Me(!0),null==E||E({key:d,domEvent:e})},onMouseLeave:function(e){Me(!1),null==M||M({key:d,domEvent:e})}}),ke,!H&&c.createElement(se,{id:xe,open:pe,keyPath:te},m));return $&&(Re=$(Re,e)),c.createElement(P,{onItemClick:Pe,mode:"horizontal"===z?"vertical":z,itemIcon:ue,expandIcon:ce},Re)};function pe(e){var n,t=e.eventKey,r=e.children,o=A(t),i=X(r,o),l=O();return c.useEffect((function(){if(l)return l.registerPath(t,o),function(){l.unregisterPath(t,o)}}),[o]),n=l?i:c.createElement(ve,e,i),c.createElement(T.Provider,{value:o},n)}var me=t(8603),ye=g.Z.LEFT,he=g.Z.RIGHT,Ze=g.Z.UP,be=g.Z.DOWN,Ce=g.Z.ENTER,ge=g.Z.ESC,Ee=g.Z.HOME,Me=g.Z.END,Ie=[Ze,be,ye,he];function Ke(e,n){return(0,me.tS)(e,!0).filter((function(e){return n.has(e)}))}function Pe(e,n,t){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if(!e)return null;var o=Ke(e,n),i=o.length,l=o.findIndex((function(e){return t===e}));return r<0?-1===l?l=i-1:l-=1:r>0&&(l+=1),o[l=(l+i)%i]}var xe=Math.random().toFixed(5).toString().slice(2),ke=0,Se="__RC_UTIL_PATH_SPLIT__",we=function(e){return e.join(Se)},Re="rc-menu-more";var Ne=["prefixCls","style","className","tabIndex","children","direction","id","mode","inlineCollapsed","disabled","disabledOverflow","subMenuOpenDelay","subMenuCloseDelay","forceSubMenuRender","defaultOpenKeys","openKeys","activeKey","defaultActiveFirst","selectable","multiple","defaultSelectedKeys","selectedKeys","onSelect","onDeselect","inlineIndent","motion","defaultMotions","triggerSubMenuAction","builtinPlacements","itemIcon","expandIcon","overflowedIndicator","overflowedIndicatorPopupClassName","getPopupContainer","onClick","onOpenChange","onKeyDown","openAnimation","openTransitionName","_internalRenderMenuItem","_internalRenderSubMenuItem"],De=[],Oe=["className","title","eventKey","children"],Te=["children"],Ae=function(e){var n=e.className,t=e.title,o=(e.eventKey,e.children),i=(0,a.Z)(e,Oe),l=c.useContext(K).prefixCls,u="".concat(l,"-item-group");return c.createElement("li",(0,r.Z)({},i,{onClick:function(e){return e.stopPropagation()},className:f()(u,n)}),c.createElement("div",{className:"".concat(u,"-title"),title:"string"==typeof t?t:void 0},t),c.createElement("ul",{className:"".concat(u,"-list")},o))};function Le(e){var n=e.children,t=(0,a.Z)(e,Te),r=X(n,A(t.eventKey));return O()?r:c.createElement(Ae,(0,E.Z)(t,["warnKey"]),r)}function _e(e){var n=e.className,t=e.style,r=c.useContext(K).prefixCls;return O()?null:c.createElement("li",{className:f()("".concat(r,"-item-divider"),n),style:t})}var ze=A,Ve=function(e){var n,t,s=e.prefixCls,d=void 0===s?"rc-menu":s,m=e.style,h=e.className,Z=e.tabIndex,b=void 0===Z?0:Z,C=e.children,g=e.direction,E=e.id,M=e.mode,I=void 0===M?"vertical":M,K=e.inlineCollapsed,x=e.disabled,k=e.disabledOverflow,w=e.subMenuOpenDelay,R=void 0===w?.1:w,N=e.subMenuCloseDelay,O=void 0===N?.1:N,T=e.forceSubMenuRender,A=e.defaultOpenKeys,V=e.openKeys,j=e.activeKey,W=e.defaultActiveFirst,H=e.selectable,q=void 0===H||H,B=e.multiple,U=void 0!==B&&B,J=e.defaultSelectedKeys,Q=e.selectedKeys,$=e.onSelect,ee=e.onDeselect,ne=e.inlineIndent,re=void 0===ne?24:ne,oe=e.motion,ie=e.defaultMotions,le=e.triggerSubMenuAction,ue=void 0===le?"hover":le,ae=e.builtinPlacements,ce=e.itemIcon,se=e.expandIcon,fe=e.overflowedIndicator,de=void 0===fe?"...":fe,ve=e.overflowedIndicatorPopupClassName,me=e.getPopupContainer,Oe=e.onClick,Te=e.onOpenChange,Ae=e.onKeyDown,Le=(e.openAnimation,e.openTransitionName,e._internalRenderMenuItem),_e=e._internalRenderSubMenuItem,ze=(0,a.Z)(e,Ne),Ve=X(C,De),Fe=c.useState(!1),je=(0,u.Z)(Fe,2),We=je[0],He=je[1],qe=c.useRef(),Be=function(e){var n=(0,p.Z)(e,{value:e}),t=(0,u.Z)(n,2),r=t[0],o=t[1];return c.useEffect((function(){ke+=1;var e="".concat(xe,"-").concat(ke);o("rc-menu-uuid-".concat(e))}),[]),r}(E),Ge="rtl"===g,Ue=c.useMemo((function(){return"inline"!==I&&"vertical"!==I||!K?[I,!1]:["vertical",K]}),[I,K]),Xe=(0,u.Z)(Ue,2),Ye=Xe[0],Je=Xe[1],Qe=c.useState(0),$e=(0,u.Z)(Qe,2),en=$e[0],nn=$e[1],tn=en>=Ve.length-1||"horizontal"!==Ye||k,rn=(0,p.Z)(A,{value:V,postState:function(e){return e||De}}),on=(0,u.Z)(rn,2),ln=on[0],un=on[1],an=function(e){un(e),null==Te||Te(e)},cn=c.useState(ln),sn=(0,u.Z)(cn,2),fn=sn[0],dn=sn[1],vn="inline"===Ye,pn=c.useRef(!1);c.useEffect((function(){vn&&dn(ln)}),[ln]),c.useEffect((function(){pn.current?vn?un(fn):an(De):pn.current=!0}),[vn]);var mn=function(){var e=c.useState({}),n=(0,u.Z)(e,2)[1],t=(0,c.useRef)(new Map),r=(0,c.useRef)(new Map),o=c.useState([]),i=(0,u.Z)(o,2),a=i[0],s=i[1],f=(0,c.useRef)(0),d=(0,c.useRef)(!1),v=(0,c.useCallback)((function(e,o){var i=we(o);r.current.set(i,e),t.current.set(e,i),f.current+=1;var l,u=f.current;l=function(){u===f.current&&(d.current||n({}))},Promise.resolve().then(l)}),[]),p=(0,c.useCallback)((function(e,n){var o=we(n);r.current.delete(o),t.current.delete(e)}),[]),m=(0,c.useCallback)((function(e){s(e)}),[]),y=(0,c.useCallback)((function(e,n){var r=(t.current.get(e)||"").split(Se);return n&&a.includes(r[0])&&r.unshift(Re),r}),[a]),h=(0,c.useCallback)((function(e,n){return e.some((function(e){return y(e,!0).includes(n)}))}),[y]),Z=(0,c.useCallback)((function(e){var n="".concat(t.current.get(e)).concat(Se),o=new Set;return(0,l.Z)(r.current.keys()).forEach((function(e){e.startsWith(n)&&o.add(r.current.get(e))})),o}),[]);return c.useEffect((function(){return function(){d.current=!0}}),[]),{registerPath:v,unregisterPath:p,refreshOverflowKeys:m,isSubPathKey:h,getKeyPath:y,getKeys:function(){var e=(0,l.Z)(t.current.keys());return a.length&&e.push(Re),e},getSubPathKeys:Z}}(),yn=mn.registerPath,hn=mn.unregisterPath,Zn=mn.refreshOverflowKeys,bn=mn.isSubPathKey,Cn=mn.getKeyPath,gn=mn.getKeys,En=mn.getSubPathKeys,Mn=c.useMemo((function(){return{registerPath:yn,unregisterPath:hn}}),[yn,hn]),In=c.useMemo((function(){return{isSubPathKey:bn}}),[bn]);c.useEffect((function(){Zn(tn?De:Ve.slice(en+1).map((function(e){return e.key})))}),[en,tn]);var Kn=(0,p.Z)(j||W&&(null===(n=Ve[0])||void 0===n?void 0:n.key),{value:j}),Pn=(0,u.Z)(Kn,2),xn=Pn[0],kn=Pn[1],Sn=Y((function(e){kn(e)})),wn=Y((function(){kn(void 0)})),Rn=(0,p.Z)(J||[],{value:Q,postState:function(e){return Array.isArray(e)?e:null==e?De:[e]}}),Nn=(0,u.Z)(Rn,2),Dn=Nn[0],On=Nn[1],Tn=Y((function(e){null==Oe||Oe(S(e)),function(e){if(q){var n,t=e.key,r=Dn.includes(t);n=U?r?Dn.filter((function(e){return e!==t})):[].concat((0,l.Z)(Dn),[t]):[t],On(n);var o=(0,i.Z)((0,i.Z)({},e),{},{selectedKeys:n});r?null==ee||ee(o):null==$||$(o)}!U&&ln.length&&"inline"!==Ye&&an(De)}(e)})),An=Y((function(e,n){var t=ln.filter((function(n){return n!==e}));if(n)t.push(e);else if("inline"!==Ye){var r=En(e);t=t.filter((function(e){return!r.has(e)}))}v()(ln,t)||an(t)})),Ln=Y(me),_n=function(e,n,t,r,i,l,u,a,s,f){var d=c.useRef(),v=c.useRef();v.current=n;var p=function(){te.Z.cancel(d.current)};return c.useEffect((function(){return function(){p()}}),[]),function(c){var m=c.which;if([].concat(Ie,[Ce,ge,Ee,Me]).includes(m)){var y,h,Z,b=function(){return y=new Set,h=new Map,Z=new Map,l().forEach((function(e){var n=document.querySelector("[data-menu-id='".concat(z(r,e),"']"));n&&(y.add(n),Z.set(n,e),h.set(e,n))})),y};b();var C=function(e,n){for(var t=e||document.activeElement;t;){if(n.has(t))return t;t=t.parentElement}return null}(h.get(n),y),g=Z.get(C),E=function(e,n,t,r){var i,l,u,a,c="prev",s="next",f="children",d="parent";if("inline"===e&&r===Ce)return{inlineTrigger:!0};var v=(i={},(0,o.Z)(i,Ze,c),(0,o.Z)(i,be,s),i),p=(l={},(0,o.Z)(l,ye,t?s:c),(0,o.Z)(l,he,t?c:s),(0,o.Z)(l,be,f),(0,o.Z)(l,Ce,f),l),m=(u={},(0,o.Z)(u,Ze,c),(0,o.Z)(u,be,s),(0,o.Z)(u,Ce,f),(0,o.Z)(u,ge,d),(0,o.Z)(u,ye,t?f:d),(0,o.Z)(u,he,t?d:f),u);switch(null===(a={inline:v,horizontal:p,vertical:m,inlineSub:v,horizontalSub:m,verticalSub:m}["".concat(e).concat(n?"":"Sub")])||void 0===a?void 0:a[r]){case c:return{offset:-1,sibling:!0};case s:return{offset:1,sibling:!0};case d:return{offset:-1,sibling:!1};case f:return{offset:1,sibling:!1};default:return null}}(e,1===u(g,!0).length,t,m);if(!E&&m!==Ee&&m!==Me)return;(Ie.includes(m)||[Ee,Me].includes(m))&&c.preventDefault();var M=function(e){if(e){var n=e,t=e.querySelector("a");(null==t?void 0:t.getAttribute("href"))&&(n=t);var r=Z.get(e);a(r),p(),d.current=(0,te.Z)((function(){v.current===r&&n.focus()}))}};if([Ee,Me].includes(m)||E.sibling||!C){var I,K,P=Ke(I=C&&"inline"!==e?function(e){for(var n=e;n;){if(n.getAttribute("data-menu-list"))return n;n=n.parentElement}return null}(C):i.current,y);K=m===Ee?P[0]:m===Me?P[P.length-1]:Pe(I,y,C,E.offset),M(K)}else if(E.inlineTrigger)s(g);else if(E.offset>0)s(g,!0),p(),d.current=(0,te.Z)((function(){b();var e=C.getAttribute("aria-controls"),n=Pe(document.getElementById(e),y);M(n)}),5);else if(E.offset<0){var x=u(g,!0),k=x[x.length-2],S=h.get(k);s(k,!1),M(S)}}null==f||f(c)}}(Ye,xn,Ge,Be,qe,gn,Cn,kn,(function(e,n){var t=null!=n?n:!ln.includes(e);An(e,t)}),Ae);c.useEffect((function(){He(!0)}),[]);var zn=c.useMemo((function(){return{_internalRenderMenuItem:Le,_internalRenderSubMenuItem:_e}}),[Le,_e]),Vn="horizontal"!==Ye||k?Ve:Ve.map((function(e,n){return c.createElement(P,{key:e.key,overflowDisabled:n>en},e)})),Fn=c.createElement(y.Z,(0,r.Z)({id:E,ref:qe,prefixCls:"".concat(d,"-overflow"),component:"ul",itemComponent:G,className:f()(d,"".concat(d,"-root"),"".concat(d,"-").concat(Ye),h,(t={},(0,o.Z)(t,"".concat(d,"-inline-collapsed"),Je),(0,o.Z)(t,"".concat(d,"-rtl"),Ge),t)),dir:g,style:m,role:"menu",tabIndex:b,data:Vn,renderRawItem:function(e){return e},renderRawRest:function(e){var n=e.length,t=n?Ve.slice(-n):null;return c.createElement(pe,{eventKey:Re,title:de,disabled:tn,internalPopupClose:0===n,popupClassName:ve},t)},maxCount:"horizontal"!==Ye||k?y.Z.INVALIDATE:y.Z.RESPONSIVE,ssr:"full","data-menu-list":!0,onVisibleChange:function(e){nn(e)},onKeyDown:_n},ze));return c.createElement(F.Provider,{value:zn},c.createElement(_.Provider,{value:Be},c.createElement(P,{prefixCls:d,mode:Ye,openKeys:ln,rtl:Ge,disabled:x,motion:We?oe:null,defaultMotions:We?ie:null,activeKey:xn,onActive:Sn,onInactive:wn,selectedKeys:Dn,inlineIndent:re,subMenuOpenDelay:R,subMenuCloseDelay:O,forceSubMenuRender:T,builtinPlacements:ae,triggerSubMenuAction:ue,getPopupContainer:Ln,itemIcon:ce,expandIcon:se,onItemClick:Tn,onOpenChange:An},c.createElement(L.Provider,{value:In},Fn),c.createElement("div",{style:{display:"none"},"aria-hidden":!0},c.createElement(D.Provider,{value:Mn},Ve)))))};Ve.Item=G,Ve.SubMenu=pe,Ve.ItemGroup=Le,Ve.Divider=_e;const Fe=Ve}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,