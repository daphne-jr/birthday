"use strict";(self.webpackChunkbirthday=self.webpackChunkbirthday||[]).push([[473],{444:(e,n,t)=>{t.d(n,{Z:()=>ue});var r=t(4942),o=t(1413),i=t(9439),a=t(1002),u=t(7294),c=t(4203),s=t(2550),f=t(4184),v=t.n(f),l=t(8924);function d(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t["Webkit".concat(e)]="webkit".concat(n),t["Moz".concat(e)]="moz".concat(n),t["ms".concat(e)]="MS".concat(n),t["O".concat(e)]="o".concat(n.toLowerCase()),t}var p,m,Z,y=(p=(0,l.Z)(),m="undefined"!=typeof window?window:{},Z={animationend:d("Animation","AnimationEnd"),transitionend:d("Transition","TransitionEnd")},p&&("AnimationEvent"in m||delete Z.animationend.animation,"TransitionEvent"in m||delete Z.transitionend.transition),Z),E={};if((0,l.Z)()){var h=document.createElement("div");E=h.style}var k={};function b(e){if(k[e])return k[e];var n=y[e];if(n)for(var t=Object.keys(n),r=t.length,o=0;o<r;o+=1){var i=t[o];if(Object.prototype.hasOwnProperty.call(n,i)&&i in E)return k[e]=n[i],k[e]}return""}var L=b("animationend"),A=b("transitionend"),C=!(!L||!A),g=L||"animationend",w=A||"transitionend";function R(e,n){return e?"object"===(0,a.Z)(e)?e[n.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(n):null}var S="none",P="appear",N="enter",O="leave",T="none",j="prepare",M="start",V="active",D="end";function z(e){var n=(0,u.useRef)(!1),t=(0,u.useState)(e),r=(0,i.Z)(t,2),o=r[0],a=r[1];return(0,u.useEffect)((function(){return function(){n.current=!0}}),[]),[o,function(e){n.current||a(e)}]}const F=(0,l.Z)()?u.useLayoutEffect:u.useEffect;var H=t(5164),I=[j,M,V,D];function K(e){return e===V||e===D}function x(e,n,t,a){var c=a.motionEnter,s=void 0===c||c,f=a.motionAppear,v=void 0===f||f,l=a.motionLeave,d=void 0===l||l,p=a.motionDeadline,m=a.motionLeaveImmediately,Z=a.onAppearPrepare,y=a.onEnterPrepare,E=a.onLeavePrepare,h=a.onAppearStart,k=a.onEnterStart,b=a.onLeaveStart,L=a.onAppearActive,A=a.onEnterActive,C=a.onLeaveActive,R=a.onAppearEnd,x=a.onEnterEnd,U=a.onLeaveEnd,W=a.onVisibleChanged,q=z(),B=(0,i.Z)(q,2),G=B[0],J=B[1],Q=z(S),X=(0,i.Z)(Q,2),Y=X[0],$=X[1],_=z(null),ee=(0,i.Z)(_,2),ne=ee[0],te=ee[1],re=(0,u.useRef)(!1),oe=(0,u.useRef)(null),ie=(0,u.useRef)(!1),ae=(0,u.useRef)(null);function ue(){return t()||ae.current}var ce=(0,u.useRef)(!1);function se(e){var n,t=ue();e&&!e.deadline&&e.target!==t||(Y===P&&ce.current?n=null==R?void 0:R(t,e):Y===N&&ce.current?n=null==x?void 0:x(t,e):Y===O&&ce.current&&(n=null==U?void 0:U(t,e)),!1===n||ie.current||($(S),te(null)))}var fe=function(e){var n=(0,u.useRef)(),t=(0,u.useRef)(e);t.current=e;var r=u.useCallback((function(e){t.current(e)}),[]);function o(e){e&&(e.removeEventListener(w,r),e.removeEventListener(g,r))}return u.useEffect((function(){return function(){o(n.current)}}),[]),[function(e){n.current&&n.current!==e&&o(n.current),e&&e!==n.current&&(e.addEventListener(w,r),e.addEventListener(g,r),n.current=e)},o]}(se),ve=(0,i.Z)(fe,1)[0],le=u.useMemo((function(){var e,n,t;switch(Y){case P:return e={},(0,r.Z)(e,j,Z),(0,r.Z)(e,M,h),(0,r.Z)(e,V,L),e;case N:return n={},(0,r.Z)(n,j,y),(0,r.Z)(n,M,k),(0,r.Z)(n,V,A),n;case O:return t={},(0,r.Z)(t,j,E),(0,r.Z)(t,M,b),(0,r.Z)(t,V,C),t;default:return{}}}),[Y]),de=function(e,n){var t=z(T),r=(0,i.Z)(t,2),o=r[0],a=r[1],c=function(){var e=u.useRef(null);function n(){H.Z.cancel(e.current)}return u.useEffect((function(){return function(){n()}}),[]),[function t(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;n();var i=(0,H.Z)((function(){o<=1?r({isCanceled:function(){return i!==e.current}}):t(r,o-1)}));e.current=i},n]}(),s=(0,i.Z)(c,2),f=s[0],v=s[1];return F((function(){if(o!==T&&o!==D){var e=I.indexOf(o),t=I[e+1],r=n(o);!1===r?a(t):f((function(e){function n(){e.isCanceled()||a(t)}!0===r?n():Promise.resolve(r).then(n)}))}}),[e,o]),u.useEffect((function(){return function(){v()}}),[]),[function(){a(j)},o]}(Y,(function(e){if(e===j){var n=le.prepare;return!!n&&n(ue())}var t;return Ze in le&&te((null===(t=le[Ze])||void 0===t?void 0:t.call(le,ue(),null))||null),Ze===V&&(ve(ue()),p>0&&(clearTimeout(oe.current),oe.current=setTimeout((function(){se({deadline:!0})}),p))),!0})),pe=(0,i.Z)(de,2),me=pe[0],Ze=pe[1],ye=K(Ze);ce.current=ye,F((function(){J(n);var t,r=re.current;re.current=!0,e&&(!r&&n&&v&&(t=P),r&&n&&s&&(t=N),(r&&!n&&d||!r&&m&&!n&&d)&&(t=O),t&&($(t),me()))}),[n]),(0,u.useEffect)((function(){(Y===P&&!v||Y===N&&!s||Y===O&&!d)&&$(S)}),[v,s,d]),(0,u.useEffect)((function(){return function(){clearTimeout(oe.current),ie.current=!0}}),[]),(0,u.useEffect)((function(){void 0!==G&&Y===S&&(null==W||W(G))}),[G,Y]);var Ee=ne;return le.prepare&&Ze===M&&(Ee=(0,o.Z)({transition:"none"},Ee)),[Y,Ze,Ee,null!=G?G:n]}var U=t(5671),W=t(3144),q=t(9340),B=t(8557);const G=function(e){(0,q.Z)(t,e);var n=(0,B.Z)(t);function t(){return(0,U.Z)(this,t),n.apply(this,arguments)}return(0,W.Z)(t,[{key:"render",value:function(){return this.props.children}}]),t}(u.Component),J=function(e){var n=e;function t(e){return!(!e.motionName||!n)}"object"===(0,a.Z)(e)&&(n=e.transitionSupport);var f=u.forwardRef((function(e,n){var a=e.visible,f=void 0===a||a,l=e.removeOnLeave,d=void 0===l||l,p=e.forceRender,m=e.children,Z=e.motionName,y=e.leavedClassName,E=e.eventProps,h=t(e),k=(0,u.useRef)(),b=(0,u.useRef)(),L=x(h,f,(function(){try{return k.current instanceof HTMLElement?k.current:(0,c.Z)(b.current)}catch(e){return null}}),e),A=(0,i.Z)(L,4),C=A[0],g=A[1],w=A[2],P=A[3],N=u.useRef(P);P&&(N.current=!0);var O,T=u.useCallback((function(e){k.current=e,(0,s.mH)(n,e)}),[]),V=(0,o.Z)((0,o.Z)({},E),{},{visible:f});if(m)if(C!==S&&t(e)){var D,z;g===j?z="prepare":K(g)?z="active":g===M&&(z="start"),O=m((0,o.Z)((0,o.Z)({},V),{},{className:v()(R(Z,C),(D={},(0,r.Z)(D,R(Z,"".concat(C,"-").concat(z)),z),(0,r.Z)(D,Z,"string"==typeof Z),D)),style:w}),T)}else O=P?m((0,o.Z)({},V),T):!d&&N.current?m((0,o.Z)((0,o.Z)({},V),{},{className:y}),T):p?m((0,o.Z)((0,o.Z)({},V),{},{style:{display:"none"}}),T):null;else O=null;return u.createElement(G,{ref:b},O)}));return f.displayName="CSSMotion",f}(C);var Q=t(7462),X=t(4925),Y="add",$="keep",_="remove",ee="removed";function ne(e){var n;return n=e&&"object"===(0,a.Z)(e)&&"key"in e?e:{key:e},(0,o.Z)((0,o.Z)({},n),{},{key:String(n.key)})}function te(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return e.map(ne)}function re(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],t=[],r=0,i=n.length,a=te(e),u=te(n);a.forEach((function(e){for(var n=!1,a=r;a<i;a+=1){var c=u[a];if(c.key===e.key){r<a&&(t=t.concat(u.slice(r,a).map((function(e){return(0,o.Z)((0,o.Z)({},e),{},{status:Y})}))),r=a),t.push((0,o.Z)((0,o.Z)({},c),{},{status:$})),r+=1,n=!0;break}}n||t.push((0,o.Z)((0,o.Z)({},e),{},{status:_}))})),r<i&&(t=t.concat(u.slice(r).map((function(e){return(0,o.Z)((0,o.Z)({},e),{},{status:Y})}))));var c={};t.forEach((function(e){var n=e.key;c[n]=(c[n]||0)+1}));var s=Object.keys(c).filter((function(e){return c[e]>1}));return s.forEach((function(e){(t=t.filter((function(n){var t=n.key,r=n.status;return t!==e||r!==_}))).forEach((function(n){n.key===e&&(n.status=$)}))})),t}var oe=["component","children","onVisibleChanged"],ie=["status"],ae=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];!function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:J,t=function(e){(0,q.Z)(r,e);var t=(0,B.Z)(r);function r(){var e;(0,U.Z)(this,r);for(var n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return(e=t.call.apply(t,[this].concat(i))).state={keyEntities:[]},e.removeKey=function(n){e.setState((function(e){return{keyEntities:e.keyEntities.map((function(e){return e.key!==n?e:(0,o.Z)((0,o.Z)({},e),{},{status:ee})}))}}))},e}return(0,W.Z)(r,[{key:"render",value:function(){var e=this,t=this.state.keyEntities,r=this.props,o=r.component,i=r.children,a=r.onVisibleChanged,c=(0,X.Z)(r,oe),s=o||u.Fragment,f={};return ae.forEach((function(e){f[e]=c[e],delete c[e]})),delete c.keys,u.createElement(s,c,t.map((function(t){var r=t.status,o=(0,X.Z)(t,ie),c=r===Y||r===$;return u.createElement(n,(0,Q.Z)({},f,{key:o.key,visible:c,eventProps:o,onVisibleChanged:function(n){null==a||a(n,{key:o.key}),n||e.removeKey(o.key)}}),i)})))}}],[{key:"getDerivedStateFromProps",value:function(e,n){var t=e.keys,r=n.keyEntities,o=te(t);return{keyEntities:re(r,o).filter((function(e){var n=r.find((function(n){var t=n.key;return e.key===t}));return!n||n.status!==ee||e.status!==_}))}}}]),r}(u.Component);t.defaultProps={component:"div"}}(C);const ue=J}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,