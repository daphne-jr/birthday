"use strict";(self.webpackChunkbirthday=self.webpackChunkbirthday||[]).push([[14],{3066:(e,t,n)=>{var r=n(7294),i=n(7462),a=n(4925),s=n(4942),o=n(1413),u=n(3433),l=n(5671),c=n(3144),d=n(7326),f=n(9340),g=n(8557),v=n(344),h=n(334),m="RC_FORM_INTERNAL_HOOKS",p=function(){(0,h.ZP)(!1,"Can not find FormContext. Please make sure you wrap Field under Form.")};const F=r.createContext({getFieldValue:p,getFieldsValue:p,getFieldError:p,getFieldWarning:p,getFieldsError:p,isFieldsTouched:p,isFieldTouched:p,isFieldValidating:p,isFieldsValidating:p,resetFields:p,setFields:p,setFieldsValue:p,validateFields:p,submit:p,getInternalHooks:function(){return p(),{dispatch:p,initEntityValue:p,registerField:p,useSubscribe:p,setInitialValues:p,setCallbacks:p,getFields:p,setValidateMessages:p,setPreserve:p,getInitialValue:p}}});function y(e){return null==e?[]:Array.isArray(e)?e:[e]}var Z=n(7757),V=n.n(Z),b=n(5861),k=n(5715),E="'${name}' is not a valid ${type}",P={default:"Validation error on field '${name}'",required:"'${name}' is required",enum:"'${name}' must be one of [${enum}]",whitespace:"'${name}' cannot be empty",date:{format:"'${name}' is invalid for format date",parse:"'${name}' could not be parsed as date",invalid:"'${name}' is invalid date"},types:{string:E,method:E,array:E,object:E,number:E,date:E,boolean:E,integer:E,float:E,regexp:E,email:E,url:E,hex:E},string:{len:"'${name}' must be exactly ${len} characters",min:"'${name}' must be at least ${min} characters",max:"'${name}' cannot be longer than ${max} characters",range:"'${name}' must be between ${min} and ${max} characters"},number:{len:"'${name}' must equal ${len}",min:"'${name}' cannot be less than ${min}",max:"'${name}' cannot be greater than ${max}",range:"'${name}' must be between ${min} and ${max}"},array:{len:"'${name}' must be exactly ${len} in length",min:"'${name}' cannot be less than ${min} in length",max:"'${name}' cannot be greater than ${max} in length",range:"'${name}' must be between ${min} and ${max} in length"},pattern:{mismatch:"'${name}' does not match pattern ${pattern}"}},w=n(1002),C=n(8306),x=n(8880);function N(e){return y(e)}function M(e,t){return(0,C.Z)(e,t)}function I(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=(0,x.Z)(e,t,n,r);return i}function $(e,t){var n={};return t.forEach((function(t){var r=M(e,t);n=I(n,t,r)})),n}function R(e,t){return e&&e.some((function(e){return T(e,t)}))}function A(e){return"object"===(0,w.Z)(e)&&null!==e&&Object.getPrototypeOf(e)===Object.prototype}function O(e,t){var n=Array.isArray(e)?(0,u.Z)(e):(0,o.Z)({},e);return t?(Object.keys(t).forEach((function(e){var r=n[e],i=t[e],a=A(r)&&A(i);n[e]=a?O(r,i||{}):i})),n):n}function U(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return n.reduce((function(e,t){return O(e,t)}),e)}function T(e,t){return!(!e||!t||e.length!==t.length)&&e.every((function(e,n){return t[n]===e}))}function j(e){var t=arguments.length<=1?void 0:arguments[1];return t&&t.target&&"object"===(0,w.Z)(t.target)&&e in t.target?t.target[e]:t}function L(e,t,n){var r=e.length;if(t<0||t>=r||n<0||n>=r)return e;var i=e[t],a=t-n;return a>0?[].concat((0,u.Z)(e.slice(0,n)),[i],(0,u.Z)(e.slice(n,t)),(0,u.Z)(e.slice(t+1,r))):a<0?[].concat((0,u.Z)(e.slice(0,t)),(0,u.Z)(e.slice(t+1,n+1)),[i],(0,u.Z)(e.slice(n+1,r))):e}var S=k.Z;function _(e,t){return e.replace(/\$\{\w+\}/g,(function(e){var n=e.slice(2,-1);return t[n]}))}function H(e,t,n,r,i){return D.apply(this,arguments)}function D(){return(D=(0,b.Z)(V().mark((function e(t,n,i,a,l){var c,d,f,g,v,h,m,p;return V().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return delete(c=(0,o.Z)({},i)).ruleIndex,d=null,c&&"array"===c.type&&c.defaultField&&(d=c.defaultField,delete c.defaultField),f=new S((0,s.Z)({},t,[c])),g=U({},P,a.validateMessages),f.messages(g),v=[],e.prev=8,e.next=11,Promise.resolve(f.validate((0,s.Z)({},t,n),(0,o.Z)({},a)));case 11:e.next=16;break;case 13:e.prev=13,e.t0=e.catch(8),e.t0.errors?v=e.t0.errors.map((function(e,t){var n=e.message;return r.isValidElement(n)?r.cloneElement(n,{key:"error_".concat(t)}):n})):(console.error(e.t0),v=[g.default]);case 16:if(v.length||!d){e.next=21;break}return e.next=19,Promise.all(n.map((function(e,n){return H("".concat(t,".").concat(n),e,d,a,l)})));case 19:return h=e.sent,e.abrupt("return",h.reduce((function(e,t){return[].concat((0,u.Z)(e),(0,u.Z)(t))}),[]));case 21:return m=(0,o.Z)((0,o.Z)({},i),{},{name:t,enum:(i.enum||[]).join(", ")},l),p=v.map((function(e){return"string"==typeof e?_(e,m):e})),e.abrupt("return",p);case 24:case"end":return e.stop()}}),e,null,[[8,13]])})))).apply(this,arguments)}function W(){return(W=(0,b.Z)(V().mark((function e(t){return V().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",Promise.all(t).then((function(e){var t;return(t=[]).concat.apply(t,(0,u.Z)(e))})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function q(){return(q=(0,b.Z)(V().mark((function e(t){var n;return V().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=0,e.abrupt("return",new Promise((function(e){t.forEach((function(r){r.then((function(r){r.errors.length&&e([r]),(n+=1)===t.length&&e([])}))}))})));case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var z=["name"],K=[];function J(e,t,n,r,i,a){return"function"==typeof e?e(t,n,"source"in a?{source:a.source}:{}):r!==i}var Y=function(e){(0,f.Z)(n,e);var t=(0,g.Z)(n);function n(e){var i;return(0,l.Z)(this,n),(i=t.call(this,e)).state={resetCount:0},i.cancelRegisterFunc=null,i.mounted=!1,i.touched=!1,i.dirty=!1,i.validatePromise=null,i.prevValidating=void 0,i.errors=K,i.warnings=K,i.cancelRegister=function(){var e=i.props,t=e.preserve,n=e.isListField,r=e.name;i.cancelRegisterFunc&&i.cancelRegisterFunc(n,t,N(r)),i.cancelRegisterFunc=null},i.getNamePath=function(){var e=i.props,t=e.name,n=e.fieldContext.prefixName,r=void 0===n?[]:n;return void 0!==t?[].concat((0,u.Z)(r),(0,u.Z)(t)):[]},i.getRules=function(){var e=i.props,t=e.rules,n=void 0===t?[]:t,r=e.fieldContext;return n.map((function(e){return"function"==typeof e?e(r):e}))},i.refresh=function(){i.mounted&&i.setState((function(e){return{resetCount:e.resetCount+1}}))},i.triggerMetaEvent=function(e){var t=i.props.onMetaChange;null==t||t((0,o.Z)((0,o.Z)({},i.getMeta()),{},{destroy:e}))},i.onStoreChange=function(e,t,n){var r=i.props,a=r.shouldUpdate,s=r.dependencies,o=void 0===s?[]:s,u=r.onReset,l=n.store,c=i.getNamePath(),d=i.getValue(e),f=i.getValue(l),g=t&&R(t,c);switch("valueUpdate"===n.type&&"external"===n.source&&d!==f&&(i.touched=!0,i.dirty=!0,i.validatePromise=null,i.errors=K,i.warnings=K,i.triggerMetaEvent()),n.type){case"reset":if(!t||g)return i.touched=!1,i.dirty=!1,i.validatePromise=null,i.errors=K,i.warnings=K,i.triggerMetaEvent(),null==u||u(),void i.refresh();break;case"remove":if(a)return void i.reRender();break;case"setField":if(g){var v=n.data;return"touched"in v&&(i.touched=v.touched),"validating"in v&&!("originRCField"in v)&&(i.validatePromise=v.validating?Promise.resolve([]):null),"errors"in v&&(i.errors=v.errors||K),"warnings"in v&&(i.warnings=v.warnings||K),i.dirty=!0,i.triggerMetaEvent(),void i.reRender()}if(a&&!c.length&&J(a,e,l,d,f,n))return void i.reRender();break;case"dependenciesUpdate":if(o.map(N).some((function(e){return R(n.relatedFields,e)})))return void i.reRender();break;default:if(g||(!o.length||c.length||a)&&J(a,e,l,d,f,n))return void i.reRender()}!0===a&&i.reRender()},i.validateRules=function(e){var t=i.getNamePath(),n=i.getValue(),r=Promise.resolve().then((function(){if(!i.mounted)return[];var a=i.props,s=a.validateFirst,l=void 0!==s&&s,c=a.messageVariables,d=(e||{}).triggerName,f=i.getRules();d&&(f=f.filter((function(e){var t=e.validateTrigger;return!t||y(t).includes(d)})));var g=function(e,t,n,r,i,a){var s,u=e.join("."),l=n.map((function(e,t){var n=e.validator,r=(0,o.Z)((0,o.Z)({},e),{},{ruleIndex:t});return n&&(r.validator=function(e,t,r){var i=!1,a=n(e,t,(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];Promise.resolve().then((function(){(0,h.ZP)(!i,"Your validator function has already return a promise. `callback` will be ignored."),i||r.apply(void 0,t)}))}));i=a&&"function"==typeof a.then&&"function"==typeof a.catch,(0,h.ZP)(i,"`callback` is deprecated. Please return a promise instead."),i&&a.then((function(){r()})).catch((function(e){r(e||" ")}))}),r})).sort((function(e,t){var n=e.warningOnly,r=e.ruleIndex,i=t.warningOnly,a=t.ruleIndex;return!!n==!!i?r-a:n?1:-1}));if(!0===i)s=new Promise(function(){var e=(0,b.Z)(V().mark((function e(n,i){var s,o,c;return V().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:s=0;case 1:if(!(s<l.length)){e.next=12;break}return o=l[s],e.next=5,H(u,t,o,r,a);case 5:if(!(c=e.sent).length){e.next=9;break}return i([{errors:c,rule:o}]),e.abrupt("return");case 9:s+=1,e.next=1;break;case 12:n([]);case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}());else{var c=l.map((function(e){return H(u,t,e,r,a).then((function(t){return{errors:t,rule:e}}))}));s=(i?function(e){return q.apply(this,arguments)}(c):function(e){return W.apply(this,arguments)}(c)).then((function(e){return Promise.reject(e)}))}return s.catch((function(e){return e})),s}(t,n,f,e,l,c);return g.catch((function(e){return e})).then((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K;if(i.validatePromise===r){i.validatePromise=null;var t=[],n=[];e.forEach((function(e){var r=e.rule.warningOnly,i=e.errors,a=void 0===i?K:i;r?n.push.apply(n,(0,u.Z)(a)):t.push.apply(t,(0,u.Z)(a))})),i.errors=t,i.warnings=n,i.triggerMetaEvent(),i.reRender()}})),g}));return i.validatePromise=r,i.dirty=!0,i.errors=K,i.warnings=K,i.triggerMetaEvent(),i.reRender(),r},i.isFieldValidating=function(){return!!i.validatePromise},i.isFieldTouched=function(){return i.touched},i.isFieldDirty=function(){return!(!i.dirty&&void 0===i.props.initialValue)||void 0!==(0,i.props.fieldContext.getInternalHooks(m).getInitialValue)(i.getNamePath())},i.getErrors=function(){return i.errors},i.getWarnings=function(){return i.warnings},i.isListField=function(){return i.props.isListField},i.isList=function(){return i.props.isList},i.isPreserve=function(){return i.props.preserve},i.getMeta=function(){return i.prevValidating=i.isFieldValidating(),{touched:i.isFieldTouched(),validating:i.prevValidating,errors:i.errors,warnings:i.warnings,name:i.getNamePath()}},i.getOnlyChild=function(e){if("function"==typeof e){var t=i.getMeta();return(0,o.Z)((0,o.Z)({},i.getOnlyChild(e(i.getControlled(),t,i.props.fieldContext))),{},{isFunction:!0})}var n=(0,v.Z)(e);return 1===n.length&&r.isValidElement(n[0])?{child:n[0],isFunction:!1}:{child:n,isFunction:!1}},i.getValue=function(e){var t=i.props.fieldContext.getFieldsValue,n=i.getNamePath();return M(e||t(!0),n)},i.getControlled=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=i.props,n=t.trigger,r=t.validateTrigger,a=t.getValueFromEvent,u=t.normalize,l=t.valuePropName,c=t.getValueProps,d=t.fieldContext,f=void 0!==r?r:d.validateTrigger,g=i.getNamePath(),v=d.getInternalHooks,h=d.getFieldsValue,p=v(m),F=p.dispatch,Z=i.getValue(),V=c||function(e){return(0,s.Z)({},l,e)},b=e[n],k=(0,o.Z)((0,o.Z)({},e),V(Z));k[n]=function(){var e;i.touched=!0,i.dirty=!0,i.triggerMetaEvent();for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];e=a?a.apply(void 0,n):j.apply(void 0,[l].concat(n)),u&&(e=u(e,Z,h(!0))),F({type:"updateValue",namePath:g,value:e}),b&&b.apply(void 0,n)};var E=y(f||[]);return E.forEach((function(e){var t=k[e];k[e]=function(){t&&t.apply(void 0,arguments);var n=i.props.rules;n&&n.length&&F({type:"validateField",namePath:g,triggerName:e})}})),k},e.fieldContext&&(0,(0,e.fieldContext.getInternalHooks)(m).initEntityValue)((0,d.Z)(i)),i}return(0,c.Z)(n,[{key:"componentDidMount",value:function(){var e=this.props,t=e.shouldUpdate,n=e.fieldContext;if(this.mounted=!0,n){var r=(0,n.getInternalHooks)(m).registerField;this.cancelRegisterFunc=r(this)}!0===t&&this.reRender()}},{key:"componentWillUnmount",value:function(){this.cancelRegister(),this.triggerMetaEvent(!0),this.mounted=!1}},{key:"reRender",value:function(){this.mounted&&this.forceUpdate()}},{key:"render",value:function(){var e,t=this.state.resetCount,n=this.props.children,i=this.getOnlyChild(n),a=i.child;return i.isFunction?e=a:r.isValidElement(a)?e=r.cloneElement(a,this.getControlled(a.props)):((0,h.ZP)(!a,"`children` of Field is not validate ReactElement."),e=a),r.createElement(r.Fragment,{key:t},e)}}]),n}(r.Component);Y.contextType=F,Y.defaultProps={trigger:"onChange",valuePropName:"value"};const B=function(e){var t=e.name,n=(0,a.Z)(e,z),s=r.useContext(F),o=void 0!==t?N(t):void 0,u="keep";return n.isListField||(u="_".concat((o||[]).join("_"))),r.createElement(Y,(0,i.Z)({key:u,name:o},n,{fieldContext:s}))},G=r.createContext(null);var Q=n(9439),X="__@field_split__";function ee(e){return e.map((function(e){return"".concat((0,w.Z)(e),":").concat(e)})).join(X)}const te=function(){function e(){(0,l.Z)(this,e),this.kvs=new Map}return(0,c.Z)(e,[{key:"set",value:function(e,t){this.kvs.set(ee(e),t)}},{key:"get",value:function(e){return this.kvs.get(ee(e))}},{key:"update",value:function(e,t){var n=t(this.get(e));n?this.set(e,n):this.delete(e)}},{key:"delete",value:function(e){this.kvs.delete(ee(e))}},{key:"map",value:function(e){return(0,u.Z)(this.kvs.entries()).map((function(t){var n=(0,Q.Z)(t,2),r=n[0],i=n[1],a=r.split(X);return e({key:a.map((function(e){var t=e.match(/^([^:]*):(.*)$/),n=(0,Q.Z)(t,3),r=n[1],i=n[2];return"number"===r?Number(i):i})),value:i})}))}},{key:"toJSON",value:function(){var e={};return this.map((function(t){var n=t.key,r=t.value;return e[n.join(".")]=r,null})),e}}]),e}();var ne=["name","errors"],re=(0,c.Z)((function e(t){var n=this;(0,l.Z)(this,e),this.formHooked=!1,this.forceRootUpdate=void 0,this.subscribable=!0,this.store={},this.fieldEntities=[],this.initialValues={},this.callbacks={},this.validateMessages=null,this.preserve=null,this.lastValidatePromise=null,this.getForm=function(){return{getFieldValue:n.getFieldValue,getFieldsValue:n.getFieldsValue,getFieldError:n.getFieldError,getFieldWarning:n.getFieldWarning,getFieldsError:n.getFieldsError,isFieldsTouched:n.isFieldsTouched,isFieldTouched:n.isFieldTouched,isFieldValidating:n.isFieldValidating,isFieldsValidating:n.isFieldsValidating,resetFields:n.resetFields,setFields:n.setFields,setFieldsValue:n.setFieldsValue,validateFields:n.validateFields,submit:n.submit,getInternalHooks:n.getInternalHooks}},this.getInternalHooks=function(e){return e===m?(n.formHooked=!0,{dispatch:n.dispatch,initEntityValue:n.initEntityValue,registerField:n.registerField,useSubscribe:n.useSubscribe,setInitialValues:n.setInitialValues,setCallbacks:n.setCallbacks,setValidateMessages:n.setValidateMessages,getFields:n.getFields,setPreserve:n.setPreserve,getInitialValue:n.getInitialValue}):((0,h.ZP)(!1,"`getInternalHooks` is internal usage. Should not call directly."),null)},this.useSubscribe=function(e){n.subscribable=e},this.setInitialValues=function(e,t){n.initialValues=e||{},t&&(n.store=U({},e,n.store))},this.getInitialValue=function(e){return M(n.initialValues,e)},this.setCallbacks=function(e){n.callbacks=e},this.setValidateMessages=function(e){n.validateMessages=e},this.setPreserve=function(e){n.preserve=e},this.timeoutId=null,this.warningUnhooked=function(){},this.getFieldEntities=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return e?n.fieldEntities.filter((function(e){return e.getNamePath().length})):n.fieldEntities},this.getFieldsMap=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=new te;return n.getFieldEntities(e).forEach((function(e){var n=e.getNamePath();t.set(n,e)})),t},this.getFieldEntitiesForNamePathList=function(e){if(!e)return n.getFieldEntities(!0);var t=n.getFieldsMap(!0);return e.map((function(e){var n=N(e);return t.get(n)||{INVALIDATE_NAME_PATH:N(e)}}))},this.getFieldsValue=function(e,t){if(n.warningUnhooked(),!0===e&&!t)return n.store;var r=n.getFieldEntitiesForNamePathList(Array.isArray(e)?e:null),i=[];return r.forEach((function(n){var r,a="INVALIDATE_NAME_PATH"in n?n.INVALIDATE_NAME_PATH:n.getNamePath();if(e||!(null===(r=n.isListField)||void 0===r?void 0:r.call(n)))if(t){var s="getMeta"in n?n.getMeta():null;t(s)&&i.push(a)}else i.push(a)})),$(n.store,i.map(N))},this.getFieldValue=function(e){n.warningUnhooked();var t=N(e);return M(n.store,t)},this.getFieldsError=function(e){return n.warningUnhooked(),n.getFieldEntitiesForNamePathList(e).map((function(t,n){return t&&!("INVALIDATE_NAME_PATH"in t)?{name:t.getNamePath(),errors:t.getErrors(),warnings:t.getWarnings()}:{name:N(e[n]),errors:[],warnings:[]}}))},this.getFieldError=function(e){n.warningUnhooked();var t=N(e);return n.getFieldsError([t])[0].errors},this.getFieldWarning=function(e){n.warningUnhooked();var t=N(e);return n.getFieldsError([t])[0].warnings},this.isFieldsTouched=function(){n.warningUnhooked();for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i,a=t[0],s=t[1],o=!1;0===t.length?i=null:1===t.length?Array.isArray(a)?(i=a.map(N),o=!1):(i=null,o=a):(i=a.map(N),o=s);var l=n.getFieldEntities(!0),c=function(e){return e.isFieldTouched()};if(!i)return o?l.every(c):l.some(c);var d=new te;i.forEach((function(e){d.set(e,[])})),l.forEach((function(e){var t=e.getNamePath();i.forEach((function(n){n.every((function(e,n){return t[n]===e}))&&d.update(n,(function(t){return[].concat((0,u.Z)(t),[e])}))}))}));var f=function(e){return e.some(c)},g=d.map((function(e){return e.value}));return o?g.every(f):g.some(f)},this.isFieldTouched=function(e){return n.warningUnhooked(),n.isFieldsTouched([e])},this.isFieldsValidating=function(e){n.warningUnhooked();var t=n.getFieldEntities();if(!e)return t.some((function(e){return e.isFieldValidating()}));var r=e.map(N);return t.some((function(e){var t=e.getNamePath();return R(r,t)&&e.isFieldValidating()}))},this.isFieldValidating=function(e){return n.warningUnhooked(),n.isFieldsValidating([e])},this.resetWithFieldInitialValue=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new te,r=n.getFieldEntities(!0);r.forEach((function(e){var n=e.props.initialValue,r=e.getNamePath();if(void 0!==n){var i=t.get(r)||new Set;i.add({entity:e,value:n}),t.set(r,i)}}));var i,a=function(r){r.forEach((function(r){if(void 0!==r.props.initialValue){var i=r.getNamePath();if(void 0!==n.getInitialValue(i))(0,h.ZP)(!1,"Form already set 'initialValues' with path '".concat(i.join("."),"'. Field can not overwrite it."));else{var a=t.get(i);if(a&&a.size>1)(0,h.ZP)(!1,"Multiple Field with path '".concat(i.join("."),"' set 'initialValue'. Can not decide which one to pick."));else if(a){var s=n.getFieldValue(i);e.skipExist&&void 0!==s||(n.store=I(n.store,i,(0,u.Z)(a)[0].value))}}}}))};e.entities?i=e.entities:e.namePathList?(i=[],e.namePathList.forEach((function(e){var n,r=t.get(e);r&&(n=i).push.apply(n,(0,u.Z)((0,u.Z)(r).map((function(e){return e.entity}))))}))):i=r,a(i)},this.resetFields=function(e){n.warningUnhooked();var t=n.store;if(!e)return n.store=U({},n.initialValues),n.resetWithFieldInitialValue(),void n.notifyObservers(t,null,{type:"reset"});var r=e.map(N);r.forEach((function(e){var t=n.getInitialValue(e);n.store=I(n.store,e,t)})),n.resetWithFieldInitialValue({namePathList:r}),n.notifyObservers(t,r,{type:"reset"})},this.setFields=function(e){n.warningUnhooked();var t=n.store;e.forEach((function(e){var r=e.name,i=(e.errors,(0,a.Z)(e,ne)),s=N(r);"value"in i&&(n.store=I(n.store,s,i.value)),n.notifyObservers(t,[s],{type:"setField",data:e})}))},this.getFields=function(){return n.getFieldEntities(!0).map((function(e){var t=e.getNamePath(),r=e.getMeta(),i=(0,o.Z)((0,o.Z)({},r),{},{name:t,value:n.getFieldValue(t)});return Object.defineProperty(i,"originRCField",{value:!0}),i}))},this.initEntityValue=function(e){var t=e.props.initialValue;if(void 0!==t){var r=e.getNamePath();void 0===M(n.store,r)&&(n.store=I(n.store,r,t))}},this.registerField=function(e){if(n.fieldEntities.push(e),void 0!==e.props.initialValue){var t=n.store;n.resetWithFieldInitialValue({entities:[e],skipExist:!0}),n.notifyObservers(t,[e.getNamePath()],{type:"valueUpdate",source:"internal"})}return function(t,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];n.fieldEntities=n.fieldEntities.filter((function(t){return t!==e}));var a=void 0!==r?r:n.preserve;if(!1===a&&(!t||i.length>1)){var s=e.getNamePath(),o=t?void 0:M(n.initialValues,s);if(s.length&&n.getFieldValue(s)!==o&&n.fieldEntities.every((function(e){return!T(e.getNamePath(),s)}))){var u=n.store;n.store=I(u,s,o,!0),n.notifyObservers(u,[s],{type:"remove"}),n.triggerDependenciesUpdate(u,s)}}}},this.dispatch=function(e){switch(e.type){case"updateValue":var t=e.namePath,r=e.value;n.updateValue(t,r);break;case"validateField":var i=e.namePath,a=e.triggerName;n.validateFields([i],{triggerName:a})}},this.notifyObservers=function(e,t,r){if(n.subscribable){var i=(0,o.Z)((0,o.Z)({},r),{},{store:n.getFieldsValue(!0)});n.getFieldEntities().forEach((function(n){(0,n.onStoreChange)(e,t,i)}))}else n.forceRootUpdate()},this.triggerDependenciesUpdate=function(e,t){var r=n.getDependencyChildrenFields(t);return r.length&&n.validateFields(r),n.notifyObservers(e,r,{type:"dependenciesUpdate",relatedFields:[t].concat((0,u.Z)(r))}),r},this.updateValue=function(e,t){var r=N(e),i=n.store;n.store=I(n.store,r,t),n.notifyObservers(i,[r],{type:"valueUpdate",source:"internal"});var a=n.triggerDependenciesUpdate(i,r),s=n.callbacks.onValuesChange;s&&s($(n.store,[r]),n.getFieldsValue()),n.triggerOnFieldsChange([r].concat((0,u.Z)(a)))},this.setFieldsValue=function(e){n.warningUnhooked();var t=n.store;e&&(n.store=U(n.store,e)),n.notifyObservers(t,null,{type:"valueUpdate",source:"external"})},this.getDependencyChildrenFields=function(e){var t=new Set,r=[],i=new te;return n.getFieldEntities().forEach((function(e){(e.props.dependencies||[]).forEach((function(t){var n=N(t);i.update(n,(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new Set;return t.add(e),t}))}))})),function e(n){(i.get(n)||new Set).forEach((function(n){if(!t.has(n)){t.add(n);var i=n.getNamePath();n.isFieldDirty()&&i.length&&(r.push(i),e(i))}}))}(e),r},this.triggerOnFieldsChange=function(e,t){var r=n.callbacks.onFieldsChange;if(r){var i=n.getFields();if(t){var a=new te;t.forEach((function(e){var t=e.name,n=e.errors;a.set(t,n)})),i.forEach((function(e){e.errors=a.get(e.name)||e.errors}))}r(i.filter((function(t){var n=t.name;return R(e,n)})),i)}},this.validateFields=function(e,t){n.warningUnhooked();var r=!!e,i=r?e.map(N):[],a=[];n.getFieldEntities(!0).forEach((function(s){if(r||i.push(s.getNamePath()),(null==t?void 0:t.recursive)&&r){var l=s.getNamePath();l.every((function(t,n){return e[n]===t||void 0===e[n]}))&&i.push(l)}if(s.props.rules&&s.props.rules.length){var c=s.getNamePath();if(!r||R(i,c)){var d=s.validateRules((0,o.Z)({validateMessages:(0,o.Z)((0,o.Z)({},P),n.validateMessages)},t));a.push(d.then((function(){return{name:c,errors:[],warnings:[]}})).catch((function(e){var t=[],n=[];return e.forEach((function(e){var r=e.rule.warningOnly,i=e.errors;r?n.push.apply(n,(0,u.Z)(i)):t.push.apply(t,(0,u.Z)(i))})),t.length?Promise.reject({name:c,errors:t,warnings:n}):{name:c,errors:t,warnings:n}})))}}}));var s=function(e){var t=!1,n=e.length,r=[];return e.length?new Promise((function(i,a){e.forEach((function(e,s){e.catch((function(e){return t=!0,e})).then((function(e){n-=1,r[s]=e,n>0||(t&&a(r),i(r))}))}))})):Promise.resolve([])}(a);n.lastValidatePromise=s,s.catch((function(e){return e})).then((function(e){var t=e.map((function(e){return e.name}));n.notifyObservers(n.store,t,{type:"validateFinish"}),n.triggerOnFieldsChange(t,e)}));var l=s.then((function(){return n.lastValidatePromise===s?Promise.resolve(n.getFieldsValue(i)):Promise.reject([])})).catch((function(e){var t=e.filter((function(e){return e&&e.errors.length}));return Promise.reject({values:n.getFieldsValue(i),errorFields:t,outOfDate:n.lastValidatePromise!==s})}));return l.catch((function(e){return e})),l},this.submit=function(){n.warningUnhooked(),n.validateFields().then((function(e){var t=n.callbacks.onFinish;if(t)try{t(e)}catch(e){console.error(e)}})).catch((function(e){var t=n.callbacks.onFinishFailed;t&&t(e)}))},this.forceRootUpdate=t}));const ie=function(e){var t=r.useRef(),n=r.useState({}),i=(0,Q.Z)(n,2)[1];if(!t.current)if(e)t.current=e;else{var a=new re((function(){i({})}));t.current=a.getForm()}return[t.current]};var ae=r.createContext({triggerFormChange:function(){},triggerFormFinish:function(){},registerForm:function(){},unregisterForm:function(){}});const se=ae;var oe=["name","initialValues","fields","form","preserve","children","component","validateMessages","validateTrigger","onValuesChange","onFieldsChange","onFinish","onFinishFailed"];const ue=function(e,t){var n=e.name,s=e.initialValues,l=e.fields,c=e.form,d=e.preserve,f=e.children,g=e.component,v=void 0===g?"form":g,h=e.validateMessages,p=e.validateTrigger,y=void 0===p?"onChange":p,Z=e.onValuesChange,V=e.onFieldsChange,b=e.onFinish,k=e.onFinishFailed,E=(0,a.Z)(e,oe),P=r.useContext(se),C=ie(c),x=(0,Q.Z)(C,1)[0],N=x.getInternalHooks(m),M=N.useSubscribe,I=N.setInitialValues,$=N.setCallbacks,R=N.setValidateMessages,A=N.setPreserve;r.useImperativeHandle(t,(function(){return x})),r.useEffect((function(){return P.registerForm(n,x),function(){P.unregisterForm(n)}}),[P,x,n]),R((0,o.Z)((0,o.Z)({},P.validateMessages),h)),$({onValuesChange:Z,onFieldsChange:function(e){if(P.triggerFormChange(n,e),V){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++)r[i-1]=arguments[i];V.apply(void 0,[e].concat(r))}},onFinish:function(e){P.triggerFormFinish(n,e),b&&b(e)},onFinishFailed:k}),A(d);var O=r.useRef(null);I(s,!O.current),O.current||(O.current=!0);var U=f,T="function"==typeof f;T&&(U=f(x.getFieldsValue(!0),x)),M(!T);var j=r.useRef();r.useEffect((function(){(function(e,t){if(e===t)return!0;if(!e&&t||e&&!t)return!1;if(!e||!t||"object"!==(0,w.Z)(e)||"object"!==(0,w.Z)(t))return!1;var n=Object.keys(e),r=Object.keys(t),i=new Set([].concat((0,u.Z)(n),(0,u.Z)(r)));return(0,u.Z)(i).every((function(n){var r=e[n],i=t[n];return"function"==typeof r&&"function"==typeof i||r===i}))})(j.current||[],l||[])||x.setFields(l||[]),j.current=l}),[l,x]);var L=r.useMemo((function(){return(0,o.Z)((0,o.Z)({},x),{},{validateTrigger:y})}),[x,y]),S=r.createElement(F.Provider,{value:L},U);return!1===v?S:r.createElement(v,(0,i.Z)({},E,{onSubmit:function(e){e.preventDefault(),e.stopPropagation(),x.submit()},onReset:function(e){var t;e.preventDefault(),x.resetFields(),null===(t=E.onReset)||void 0===t||t.call(E,e)}}),S)};var le=r.forwardRef(ue);le.FormProvider=function(e){var t=e.validateMessages,n=e.onFormChange,i=e.onFormFinish,a=e.children,u=r.useContext(ae),l=r.useRef({});return r.createElement(ae.Provider,{value:(0,o.Z)((0,o.Z)({},u),{},{validateMessages:(0,o.Z)((0,o.Z)({},u.validateMessages),t),triggerFormChange:function(e,t){n&&n(e,{changedFields:t,forms:l.current}),u.triggerFormChange(e,t)},triggerFormFinish:function(e,t){i&&i(e,{values:t,forms:l.current}),u.triggerFormFinish(e,t)},registerForm:function(e,t){e&&(l.current=(0,o.Z)((0,o.Z)({},l.current),{},(0,s.Z)({},e,t))),u.registerForm(e,t)},unregisterForm:function(e){var t=(0,o.Z)({},l.current);delete t[e],l.current=t,u.unregisterForm(e)}})},a)},le.Field=B,le.List=function(e){var t=e.name,n=e.initialValue,i=e.children,a=e.rules,s=e.validateTrigger,l=r.useContext(F),c=r.useRef({keys:[],id:0}).current,d=r.useMemo((function(){var e=N(l.prefixName)||[];return[].concat((0,u.Z)(e),(0,u.Z)(N(t)))}),[l.prefixName,t]),f=r.useMemo((function(){return(0,o.Z)((0,o.Z)({},l),{},{prefixName:d})}),[l,d]),g=r.useMemo((function(){return{getKey:function(e){var t=d.length,n=e[t];return[c.keys[n],e.slice(t+1)]}}}),[d]);return"function"!=typeof i?((0,h.ZP)(!1,"Form.List only accepts function as children."),null):r.createElement(G.Provider,{value:g},r.createElement(F.Provider,{value:f},r.createElement(B,{name:[],shouldUpdate:function(e,t,n){return"internal"!==n.source&&e!==t},rules:a,validateTrigger:s,initialValue:n,isList:!0},(function(e,t){var n=e.value,r=void 0===n?[]:n,a=e.onChange,s=l.getFieldValue,o=function(){return s(d||[])||[]},f={add:function(e,t){var n=o();t>=0&&t<=n.length?(c.keys=[].concat((0,u.Z)(c.keys.slice(0,t)),[c.id],(0,u.Z)(c.keys.slice(t))),a([].concat((0,u.Z)(n.slice(0,t)),[e],(0,u.Z)(n.slice(t))))):(c.keys=[].concat((0,u.Z)(c.keys),[c.id]),a([].concat((0,u.Z)(n),[e]))),c.id+=1},remove:function(e){var t=o(),n=new Set(Array.isArray(e)?e:[e]);n.size<=0||(c.keys=c.keys.filter((function(e,t){return!n.has(t)})),a(t.filter((function(e,t){return!n.has(t)}))))},move:function(e,t){if(e!==t){var n=o();e<0||e>=n.length||t<0||t>=n.length||(c.keys=L(c.keys,e,t),a(L(n,e,t)))}}},g=r||[];return Array.isArray(g)||(g=[]),i(g.map((function(e,t){var n=c.keys[t];return void 0===n&&(c.keys[t]=c.id,n=c.keys[t],c.id+=1),{name:t,key:n,isListField:!0}})),f,t)}))))},le.useForm=ie}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,